// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426
const kywd_error_app_tag = 57427
const kywd_error_message = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1492

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1348

var yyAct = [...]int{

	279, 564, 608, 13, 452, 547, 13, 262, 276, 528,
	392, 275, 508, 515, 398, 388, 457, 46, 45, 330,
	369, 44, 361, 42, 41, 351, 318, 289, 230, 290,
	40, 297, 382, 39, 251, 212, 220, 47, 38, 418,
	189, 37, 199, 168, 25, 16, 181, 244, 431, 72,
	277, 158, 164, 11, 419, 558, 11, 205, 463, 464,
	435, 438, 436, 437, 204, 478, 27, 195, 25, 348,
	346, 25, 299, 21, 301, 287, 21, 89, 615, 429,
	89, 603, 25, 458, 459, 25, 101, 102, 103, 556,
	27, 3, 89, 27, 618, 485, 555, 25, 171, 179,
	164, 554, 300, 303, 27, 553, 186, 27, 193, 552,
	502, 202, 164, 216, 222, 501, 196, 336, 335, 27,
	4, 235, 247, 254, 218, 293, 293, 283, 309, 26,
	321, 614, 332, 340, 354, 364, 372, 166, 391, 165,
	401, 336, 335, 280, 164, 178, 228, 163, 169, 228,
	231, 182, 232, 384, 383, 26, 184, 381, 191, 380,
	379, 200, 43, 214, 221, 345, 378, 325, 171, 377,
	282, 233, 245, 252, 376, 291, 291, 375, 307, 177,
	319, 186, 331, 338, 352, 362, 370, 342, 389, 193,
	399, 357, 248, 264, 285, 263, 176, 258, 356, 202,
	593, 305, 592, 600, 476, 366, 475, 587, 585, 405,
	582, 409, 216, 241, 580, 240, 407, 579, 169, 268,
	222, 271, 504, 503, 236, 257, 182, 410, 500, 413,
	235, 184, 269, 498, 495, 266, 267, 278, 493, 191,
	12, 417, 491, 12, 247, 420, 487, 425, 175, 200,
	260, 254, 302, 302, 203, 314, 430, 174, 440, 231,
	82, 232, 214, 166, 173, 165, 255, 239, 294, 294,
	221, 310, 456, 322, 433, 434, 343, 355, 365, 373,
	233, 393, 482, 402, 467, 449, 460, 295, 295, 293,
	311, 447, 444, 259, 245, 298, 298, 451, 313, 450,
	473, 252, 164, 472, 404, 455, 454, 471, 469, 164,
	164, 442, 432, 441, 248, 427, 470, 426, 321, 466,
	139, 264, 138, 263, 137, 258, 136, 131, 423, 130,
	332, 448, 129, 236, 128, 170, 127, 422, 126, 291,
	446, 424, 203, 185, 474, 192, 285, 416, 201, 479,
	215, 354, 453, 257, 112, 325, 111, 162, 234, 246,
	253, 364, 292, 292, 107, 308, 106, 320, 319, 372,
	339, 353, 363, 371, 483, 390, 488, 400, 260, 89,
	331, 598, 161, 492, 25, 50, 384, 383, 391, 494,
	381, 135, 380, 379, 255, 134, 489, 490, 401, 378,
	133, 352, 377, 496, 132, 170, 27, 376, 357, 125,
	375, 362, 499, 484, 124, 356, 302, 89, 185, 370,
	123, 259, 25, 97, 122, 96, 192, 121, 511, 89,
	268, 366, 294, 120, 25, 183, 201, 30, 389, 113,
	518, 110, 26, 269, 27, 105, 455, 454, 399, 215,
	89, 295, 550, 533, 95, 89, 27, 408, 443, 298,
	25, 322, 524, 428, 516, 95, 160, 234, 6, 207,
	273, 82, 535, 415, 93, 412, 406, 567, 509, 114,
	26, 246, 27, 172, 109, 597, 497, 486, 253, 445,
	484, 187, 26, 194, 355, 155, 206, 578, 154, 227,
	152, 151, 548, 150, 365, 148, 237, 523, 511, 612,
	304, 304, 373, 315, 147, 326, 146, 25, 26, 358,
	583, 385, 518, 394, 145, 403, 292, 565, 586, 144,
	584, 393, 143, 142, 141, 522, 519, 588, 533, 27,
	140, 402, 118, 117, 524, 594, 516, 550, 116, 115,
	91, 574, 599, 172, 90, 320, 285, 535, 509, 596,
	521, 607, 539, 89, 567, 601, 187, 62, 25, 505,
	288, 513, 281, 61, 194, 26, 306, 63, 261, 573,
	569, 250, 249, 525, 206, 59, 243, 467, 353, 523,
	27, 544, 545, 242, 611, 517, 89, 548, 363, 58,
	360, 25, 614, 520, 571, 227, 371, 359, 611, 557,
	619, 559, 560, 68, 565, 237, 561, 522, 519, 620,
	568, 350, 349, 27, 67, 390, 26, 89, 576, 577,
	198, 197, 25, 32, 241, 400, 240, 563, 574, 572,
	268, 562, 521, 89, 609, 581, 327, 570, 25, 285,
	241, 324, 240, 269, 27, 317, 266, 267, 609, 26,
	316, 64, 368, 367, 69, 510, 573, 569, 159, 284,
	27, 274, 60, 537, 304, 536, 94, 517, 534, 207,
	273, 82, 532, 527, 526, 520, 238, 229, 239, 549,
	26, 571, 98, 99, 100, 256, 104, 296, 296, 108,
	312, 272, 323, 326, 239, 344, 26, 568, 374, 57,
	347, 341, 337, 89, 566, 439, 66, 387, 25, 386,
	241, 70, 240, 546, 265, 119, 572, 334, 333, 329,
	65, 397, 396, 71, 570, 514, 358, 604, 605, 606,
	27, 226, 89, 616, 617, 510, 225, 25, 190, 224,
	89, 149, 223, 219, 385, 153, 34, 241, 512, 507,
	529, 543, 506, 217, 213, 211, 210, 89, 621, 27,
	33, 49, 25, 394, 239, 48, 26, 36, 35, 270,
	268, 81, 271, 403, 549, 188, 76, 75, 531, 85,
	73, 74, 77, 269, 27, 78, 266, 267, 83, 29,
	395, 566, 84, 79, 80, 26, 530, 180, 28, 89,
	541, 411, 540, 86, 25, 183, 87, 30, 88, 207,
	273, 82, 167, 256, 22, 20, 19, 542, 538, 18,
	26, 610, 17, 15, 14, 10, 27, 551, 9, 8,
	5, 272, 2, 1, 157, 610, 89, 156, 92, 0,
	7, 25, 51, 0, 30, 0, 0, 0, 89, 0,
	81, 296, 575, 25, 0, 76, 75, 54, 85, 73,
	74, 77, 26, 27, 78, 0, 421, 83, 0, 52,
	53, 84, 79, 80, 0, 27, 0, 0, 23, 24,
	323, 0, 86, 89, 0, 87, 0, 88, 25, 0,
	82, 31, 240, 55, 0, 0, 268, 0, 395, 26,
	207, 0, 0, 538, 56, 0, 0, 0, 0, 269,
	27, 26, 266, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 551, 0, 0, 0, 0, 0, 89, 461,
	462, 374, 465, 25, 0, 207, 0, 82, 0, 575,
	0, 0, 81, 0, 0, 468, 26, 76, 75, 0,
	85, 73, 74, 77, 0, 27, 78, 0, 0, 83,
	348, 0, 0, 84, 79, 80, 89, 0, 414, 613,
	0, 25, 190, 89, 86, 0, 0, 87, 25, 88,
	207, 273, 82, 613, 89, 0, 0, 477, 7, 25,
	51, 26, 30, 27, 480, 481, 0, 0, 81, 0,
	27, 0, 0, 76, 75, 54, 85, 73, 74, 77,
	0, 27, 78, 0, 0, 83, 0, 52, 53, 84,
	79, 80, 0, 0, 0, 207, 23, 24, 0, 26,
	86, 0, 0, 87, 0, 88, 26, 0, 82, 31,
	89, 55, 602, 0, 0, 25, 0, 26, 0, 0,
	0, 0, 56, 268, 81, 0, 0, 0, 0, 76,
	75, 0, 85, 73, 74, 77, 269, 27, 78, 0,
	0, 83, 0, 0, 0, 84, 79, 80, 0, 0,
	0, 0, 241, 0, 240, 0, 86, 0, 268, 87,
	271, 88, 207, 273, 82, 89, 0, 0, 0, 0,
	25, 269, 0, 26, 266, 267, 0, 286, 268, 81,
	0, 89, 0, 0, 76, 75, 25, 85, 73, 74,
	77, 269, 27, 78, 0, 0, 83, 208, 209, 82,
	84, 79, 80, 0, 0, 0, 239, 0, 27, 0,
	0, 86, 0, 0, 87, 89, 88, 207, 273, 82,
	25, 0, 0, 0, 0, 0, 0, 0, 26, 81,
	0, 0, 286, 207, 76, 75, 0, 85, 73, 74,
	77, 0, 27, 78, 26, 0, 83, 0, 0, 0,
	84, 79, 80, 0, 0, 0, 0, 89, 589, 590,
	591, 86, 25, 0, 87, 0, 88, 207, 0, 82,
	595, 81, 0, 0, 0, 0, 76, 75, 26, 85,
	73, 74, 77, 0, 27, 78, 0, 0, 83, 0,
	89, 0, 84, 79, 80, 25, 0, 0, 0, 0,
	0, 0, 0, 86, 81, 0, 87, 0, 88, 76,
	75, 82, 85, 0, 0, 77, 0, 27, 78, 0,
	26, 83, 348, 0, 0, 84, 79, 80, 0, 0,
	0, 0, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 273, 89, 0, 81, 0, 0, 25,
	0, 76, 75, 26, 85, 73, 74, 77, 0, 0,
	78, 0, 0, 83, 0, 0, 0, 84, 79, 80,
	0, 27, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 87, 0, 88, 0, 0, 82, 0, 328, 0,
	86, 0, 0, 0, 0, 0, 207, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26,
}
var yyPact = [...]int{

	66, -1000, 987, 550, 546, 839, -1000, 449, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 415, 449, 449, 449, 15, 449, 437, 356,
	449, 479, 433, 346, 431, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 474, 545, 544, 539, 538, 449, 425, 419, 416,
	412, 406, 401, 328, 324, 319, 396, 392, 387, 383,
	316, 312, -1000, 536, 530, 529, 528, 525, 520, 512,
	510, 501, 449, 499, 497, 496, 449, 494, 491, 460,
	374, 349, -1000, -1000, 255, -1000, -1000, 589, 254, 247,
	255, 186, 169, 135, 89, 422, -1000, 735, 57, 106,
	1114, -1000, 59, 73, -1000, -1000, -1000, -1000, -1000, -3,
	636, 1190, 760, 1098, 620, 620, -1000, 410, -1000, 1277,
	-1000, 32, 931, 1114, 1148, 1223, -1000, 851, -1000, 976,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -3,
	-1000, -1000, -1000, -3, -1000, -1000, 129, 460, -1000, -3,
	-1000, -1000, -1000, -1000, 471, -1000, 443, 448, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	802, -1000, -1000, 470, -1000, -1000, -1000, -1000, 969, -1000,
	468, -1000, -1000, -1000, -1000, -1000, -1000, 338, 1114, -1000,
	-1000, -1000, -1000, -1000, 1265, 1265, -1000, 449, 329, 320,
	332, 59, -1000, -1000, -1000, -1000, -1000, 307, 458, 70,
	-1000, -1000, -1000, -1000, 304, 304, 304, -1000, -17, 706,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 303, 453,
	460, 485, 331, 1190, -1000, -1000, -1000, -1000, -1000, 322,
	760, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 289, 300, 441, 36, 36,
	449, 449, -24, 449, 310, 1098, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 449, 299, 620, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 298, 294, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 291, 1277, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 196, 449, 56,
	-1000, -1000, -1000, -1000, -1000, 449, 449, 273, -1000, -1000,
	-1000, 30, 1265, -1000, -1000, -1000, -1000, 87, 483, 237,
	1114, -1000, -1000, -1000, -1000, -1000, 1265, 1265, -1000, 233,
	1148, -1000, -1000, -1000, -1000, -1000, -1000, 229, 1223, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 225, 851, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 482, 224, 976, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 219, -1000, -1000,
	-1000, -1000, 105, -1000, -1000, 100, -1000, -1000, 214, 1265,
	213, 255, -1000, -1000, -1000, -1000, -1000, 505, -1000, -1000,
	-1000, -1000, 1078, -1000, -1000, 129, -1000, -1000, -1000, -1000,
	-1000, -1000, 743, 129, 129, -1000, -1000, -1000, -1000, -1000,
	-1000, 589, 99, 95, -1000, -1000, 91, 86, -1000, -1000,
	79, 255, 45, 129, 129, -3, -1000, -1000, 255, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 886, -3, -1000, -1000,
	255, 255, -1000, -1000, -1000, 1098, -1000, -1000, -1000, 208,
	205, -1000, -1000, -1000, -1000, -1000, -1000, 129, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 201, 505, -1000, -1000,
	-1000, -1000, -1000, 36, 199, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 198, 743, -1000, 449,
	449, 449, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 192,
	441, 449, 36, 481, -1000, -1000, 372, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 194, 886, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1043, -1000,
	-1000, -1000, -1000, -1000, 71, -1000, -1000, -1000, -1000, 255,
	255, 255, -1000, 556, 68, 255, 129, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 85, -1000, -1000,
	-1000, -1000, -1000, -1000, 441, -1000, -1000, -1000, -1000, -1000,
	129, -1000,
}
var yyPgo = [...]int{

	0, 16, 4, 51, 668, 847, 844, 49, 147, 843,
	842, 840, 468, 839, 838, 835, 50, 237, 0, 834,
	833, 45, 832, 829, 826, 825, 70, 824, 822, 43,
	385, 808, 807, 46, 799, 785, 40, 39, 54, 778,
	777, 41, 38, 33, 30, 24, 23, 162, 21, 18,
	17, 37, 775, 771, 770, 766, 765, 35, 764, 763,
	762, 759, 12, 758, 756, 753, 36, 752, 749, 48,
	746, 741, 735, 13, 31, 7, 103, 170, 127, 102,
	74, 29, 733, 732, 731, 14, 143, 730, 729, 19,
	728, 727, 724, 572, 723, 5, 721, 719, 717, 15,
	10, 716, 712, 711, 32, 710, 11, 709, 687, 28,
	686, 684, 683, 9, 682, 678, 675, 673, 672, 671,
	8, 669, 664, 663, 662, 20, 661, 660, 655, 26,
	651, 646, 1, 641, 637, 633, 631, 630, 42, 64,
	57, 624, 622, 621, 25, 613, 607, 600, 22, 599,
	593, 586, 47, 585, 582, 581, 34, 578, 72, 577,
	576, 573, 75, 570, 27, 567, 562, 561, 2, 509,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 47, 87, 88, 88, 89, 89,
	89, 89, 90, 91, 86, 92, 93, 93, 94, 94,
	95, 95, 95, 95, 52, 52, 96, 97, 97, 98,
	98, 99, 99, 99, 99, 99, 99, 100, 48, 102,
	102, 102, 102, 102, 102, 102, 102, 101, 103, 103,
	104, 105, 39, 107, 108, 108, 109, 109, 109, 109,
	109, 109, 109, 3, 3, 76, 81, 81, 110, 111,
	111, 112, 112, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 113, 117, 17, 17, 17, 115, 116, 42,
	118, 119, 119, 106, 106, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 121, 122, 51, 123, 123, 124,
	124, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 126, 46, 46,
	127, 127, 128, 128, 129, 129, 129, 129, 129, 129,
	129, 129, 131, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 130, 130, 133, 134, 134, 23,
	135, 136, 136, 137, 137, 138, 138, 138, 138, 138,
	138, 138, 139, 140, 49, 141, 142, 142, 143, 143,
	144, 144, 144, 144, 144, 144, 144, 50, 145, 146,
	146, 147, 147, 148, 148, 148, 148, 148, 40, 149,
	150, 150, 151, 151, 152, 152, 152, 152, 41, 153,
	154, 155, 155, 79, 79, 80, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 158,
	158, 157, 75, 45, 45, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 159, 159, 43, 161, 162, 163,
	163, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 78, 4, 4, 2,
	2, 1, 1, 77, 44, 165, 114, 114, 166, 167,
	167, 168, 168, 168, 168, 168, 169, 16, 18, 14,
	15, 22, 74, 8, 8, 30, 7, 5, 5, 6,
	6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 3, 3, 3, 2, 2, 4, 1, 2,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 2, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 4, 2,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 3, 4, 2, 2, 4, 2, 1,
	2, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 1, 3, 0, 1, 1,
	2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -135, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -107, -149, -153,
	-118, -161, -165, -159, -126, -87, -101, -141, -145, -122,
	-96, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 7,
	4, 4, 9, -12, -4, 5, 10, 8, -4, -4,
	-4, 71, 72, 73, -4, 8, 10, 8, -4, 5,
	8, 10, 8, 8, 5, 4, 4, 4, 4, -4,
	8, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	10, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	4, 4, 4, 4, 4, 4, 4, 4, 4, -4,
	4, 4, 4, -4, 4, 4, -5, -6, -3, -4,
	6, 8, 8, -8, 55, 10, 8, -28, -29, -16,
	-17, -18, -30, 10, 10, -8, 10, 10, 10, 10,
	-32, -33, -21, 13, -16, -17, -18, -30, -35, -36,
	13, -16, -17, -18, -30, 10, 10, -136, -137, -138,
	-16, -17, -18, -86, -139, -140, -30, 59, 23, 24,
	-55, -56, -57, -58, -16, -17, -18, -59, 65, -65,
	-66, -16, -18, -67, -68, -70, -71, -30, 76, -108,
	-109, -81, -74, -16, -17, -18, -76, -30, -110, 68,
	16, 14, -150, -151, -152, -16, -17, -18, -26, -154,
	-155, -156, -16, -17, -18, -86, -93, -79, -80, -77,
	-78, -157, -75, -158, -26, -92, 36, 37, 20, 33,
	19, 22, 81, 60, -119, -106, -120, -16, -17, -18,
	-86, -93, -77, -78, -121, -26, 74, -162, -163, -164,
	-81, -16, -17, -18, -86, -47, -93, -74, -77, -158,
	-79, -80, -78, -76, -30, -162, -160, -16, -17, -18,
	-86, -47, -93, -77, -78, -30, -127, -128, -129, -16,
	-17, -18, -86, -93, -130, -51, -30, -131, 51, -88,
	-89, -16, -18, -90, -91, 86, 85, -102, -16, -17,
	-18, -103, -38, -86, -93, -104, -26, -105, 39, -142,
	-143, -144, -16, -17, -18, -86, -139, -140, -30, -146,
	-147, -148, -16, -17, -18, -86, -26, -123, -124, -125,
	-16, -17, -18, -86, -93, -41, -42, -43, -44, -45,
	-46, -48, -104, -49, -50, -30, -97, -98, -99, -16,
	-17, -18, -100, -86, -30, 57, -83, -84, -85, -16,
	-17, -18, -86, -30, -8, -3, 5, -7, 9, -29,
	-33, 9, 5, -36, 9, 5, 9, -138, -37, -38,
	-37, -4, 8, 8, 9, -57, 10, 8, 5, 9,
	-66, -69, 8, -69, -69, 77, 79, 80, 78, 9,
	-109, 10, 8, 5, -3, 4, 9, -152, 9, -156,
	10, 8, -2, 52, 6, 5, -2, -1, 47, 48,
	-1, -4, -4, 82, 83, -4, 9, -120, -4, 9,
	-164, 9, 9, 9, -129, 10, 8, -4, 9, -89,
	-4, -4, 9, -104, -26, 8, 4, 9, -144, -37,
	-37, 9, -148, 9, -125, 9, -99, 4, 9, -85,
	9, 10, 10, 9, 9, -8, -60, -61, -62, -16,
	-17, -18, -63, 66, -72, -73, -74, -47, -75, -76,
	-77, -78, -79, -80, -81, -8, -111, -112, -113, 17,
	63, 45, -114, -100, -115, -81, -116, -117, -30, -166,
	69, 67, 84, 18, -8, -8, -94, -95, -16, -17,
	-18, -30, 10, 10, 10, 10, 10, -8, 10, -8,
	-8, -8, -133, -134, -132, -16, -17, -18, -86, -76,
	-77, -78, -47, -79, -80, -30, -8, -8, -106, 9,
	9, -8, 9, -62, -1, 9, -73, 9, -113, -4,
	-4, -4, 10, 8, -2, -4, -1, 4, 9, -95,
	9, -132, 9, 10, -8, -8, -8, -167, -168, -16,
	-17, -18, -169, -30, 46, 10, -8, -8, 9, -168,
	-2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 427,
	0, 0, 1, 5, 0, 397, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	291, 71, 74, 0, 21, 30, 41, 290, 73, 95,
	0, 330, 0, 221, 0, 0, 363, 0, 258, 260,
	133, 0, 169, 306, 319, 237, 154, 157, 121, 124,
	183, 329, 339, 220, 377, 405, 374, 375, 257, 135,
	177, 305, 318, 235, 156, 123, 0, 428, 429, 193,
	194, 2, 3, 6, 0, 423, 0, 0, 24, 26,
	27, 28, 29, 419, 420, 417, 214, 215, 216, 418,
	0, 31, 34, 0, 36, 37, 38, 39, 0, 42,
	0, 45, 46, 47, 48, 33, 421, 0, 292, 293,
	295, 296, 297, 298, 51, 51, 301, 0, 0, 0,
	0, 75, 76, 78, 79, 80, 81, 0, 0, 0,
	96, 98, 99, 100, 0, 0, 0, 104, 0, 0,
	184, 186, 187, 188, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 331, 332, 334, 335, 336, 337, 0,
	340, 341, 346, 347, 348, 349, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 225, 226, 227,
	228, 229, 230, 231, 232, 233, 0, 0, 378, 379,
	381, 382, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 392, 393, 394, 395, 0, 0, 365, 366, 367,
	368, 369, 370, 371, 372, 373, 0, 261, 262, 264,
	265, 266, 267, 268, 269, 270, 271, 0, 0, 0,
	136, 138, 139, 140, 141, 0, 0, 0, 170, 171,
	172, 173, 174, 175, 176, 178, 69, 0, 0, 0,
	307, 308, 310, 311, 312, 313, 51, 51, 316, 0,
	320, 321, 323, 324, 325, 326, 327, 0, 238, 239,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 158, 159, 161,
	162, 163, 164, 165, 166, 0, 0, 125, 126, 128,
	129, 130, 131, 132, 426, 430, 398, 0, 23, 25,
	32, 40, 0, 43, 50, 0, 289, 294, 0, 52,
	0, 0, 302, 303, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 182,
	185, 196, 199, 0, 0, 198, 328, 333, 338, 342,
	146, 0, 0, 0, 399, 400, 0, 0, 401, 402,
	0, 0, 0, 0, 0, 145, 219, 224, 0, 376,
	380, 404, 364, 259, 263, 284, 0, 272, 134, 137,
	0, 0, 168, 179, 70, 0, 181, 304, 309, 0,
	0, 317, 322, 236, 240, 155, 160, 0, 122, 127,
	424, 35, 44, 299, 300, 144, 0, 86, 87, 89,
	90, 91, 92, 0, 0, 110, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 105, 0, 200, 201, 0,
	0, 0, 206, 207, 208, 209, 210, 211, 212, 0,
	0, 0, 0, 0, 422, 195, 0, 148, 150, 151,
	152, 153, 343, 344, 345, 403, 396, 361, 362, 359,
	360, 234, 0, 286, 287, 273, 274, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 142, 143, 0, 314,
	315, 167, 83, 88, 0, 109, 111, 197, 202, 0,
	0, 0, 406, 0, 0, 0, 0, 408, 147, 149,
	285, 288, 180, 93, 203, 204, 205, 0, 409, 411,
	412, 413, 414, 415, 0, 217, 218, 213, 407, 410,
	0, 416,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:173
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:198
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:221
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:230
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:233
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:248
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:261
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:278
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:283
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:303
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:306
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:336
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:339
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:344
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:366
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:369
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:396
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:405
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:410
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:438
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:447
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:456
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:465
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:474
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:497
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:500
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:506
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:529
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:532
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:556
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:584
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yylex.(*lexer).stack.pop()
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:596
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:613
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:618
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:642
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:654
		{
			yylex.(*lexer).stack.pop()
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:669
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:683
		{
			yylex.(*lexer).stack.pop()
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:688
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:697
		{
			yylex.(*lexer).stack.pop()
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:702
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:723
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:724
		{
			yyVAL.token = yyDollar[1].token
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:727
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:736
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:739
		{
			yylex.(*lexer).stack.pop()
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:767
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:774
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:790
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:804
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:813
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:822
		{
			yylex.(*lexer).stack.pop()
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:855
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:864
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:873
		{
			yylex.(*lexer).stack.pop()
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:903
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:912
		{
			yylex.(*lexer).stack.pop()
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:915
		{
			yylex.(*lexer).stack.pop()
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:937
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:960
		{
			yylex.(*lexer).stack.pop()
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:963
		{
			yylex.(*lexer).stack.pop()
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:975
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:980
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1000
		{
			yylex.(*lexer).stack.pop()
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yylex.(*lexer).stack.pop()
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1009
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1018
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1030
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1035
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1055
		{
			yylex.(*lexer).stack.pop()
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1058
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1067
		{
			yylex.(*lexer).stack.pop()
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1072
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1096
		{
			yylex.(*lexer).stack.pop()
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1101
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1123
		{
			yylex.(*lexer).stack.pop()
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1128
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1152
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1161
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1193
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1214
		{
			yylex.(*lexer).stack.pop()
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1217
		{
			yylex.(*lexer).stack.pop()
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1234
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1241
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1250
		{
			yylex.(*lexer).stack.pop()
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1291
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1300
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1308
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1316
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1327
		{
			yyVAL.boolean = true
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1328
		{
			yyVAL.boolean = false
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1331
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 404:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1343
		{
			yylex.(*lexer).stack.pop()
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1348
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 406:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1357
		{
			yylex.(*lexer).stack.pop()
		}
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1360
		{
			yylex.(*lexer).stack.pop()
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1365
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1384
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1393
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1402
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1411
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1420
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1429
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1438
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1447
		{
			yyVAL.ext = nil
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1450
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1461
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1467
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 427:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1480
		{
			yyVAL.args = []string{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1486
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1489
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
