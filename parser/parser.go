// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func setSecondaryExtensions(yylex yyLexer, on string, ext []*meta.Extension) bool {
	if ext == nil {
		return false
	}
	l := yylex.(*lexer)
	l.builder.SecondaryExtensions(l.stack.peek(), on, ext)
	return l.builder.LastErr != nil
}

//line parser.y:50
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     []*meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1269

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1093

var yyAct = [...]int{

	252, 400, 522, 13, 249, 484, 13, 472, 271, 404,
	455, 248, 447, 270, 347, 356, 135, 273, 321, 307,
	44, 193, 20, 192, 89, 20, 261, 342, 287, 329,
	312, 351, 260, 199, 227, 134, 220, 256, 16, 93,
	94, 95, 207, 99, 255, 178, 103, 375, 157, 41,
	187, 171, 43, 155, 42, 24, 258, 309, 251, 163,
	514, 12, 24, 40, 12, 39, 216, 529, 533, 376,
	243, 402, 45, 528, 38, 268, 517, 26, 37, 123,
	96, 97, 98, 244, 26, 24, 241, 242, 36, 35,
	165, 498, 164, 160, 405, 406, 520, 519, 480, 149,
	48, 176, 194, 182, 3, 518, 190, 26, 203, 194,
	479, 62, 155, 25, 212, 223, 230, 401, 264, 264,
	25, 279, 478, 290, 234, 301, 315, 324, 332, 233,
	350, 213, 359, 4, 224, 239, 257, 155, 205, 172,
	208, 155, 155, 25, 477, 476, 326, 318, 344, 317,
	155, 159, 306, 236, 469, 272, 272, 160, 284, 175,
	235, 181, 269, 269, 189, 283, 202, 266, 266, 362,
	281, 176, 211, 222, 229, 275, 263, 263, 182, 278,
	343, 289, 341, 300, 314, 323, 331, 190, 349, 209,
	358, 340, 361, 339, 303, 294, 468, 481, 470, 203,
	441, 508, 338, 507, 440, 365, 337, 212, 419, 172,
	418, 378, 399, 184, 398, 159, 336, 335, 274, 274,
	223, 168, 367, 370, 213, 253, 24, 230, 389, 175,
	388, 444, 382, 208, 243, 234, 181, 374, 167, 224,
	233, 377, 155, 155, 403, 189, 239, 244, 26, 387,
	24, 179, 391, 411, 407, 397, 394, 202, 24, 24,
	264, 396, 408, 409, 236, 211, 366, 166, 257, 195,
	196, 235, 26, 194, 246, 62, 155, 502, 222, 24,
	26, 26, 209, 250, 25, 229, 11, 290, 384, 11,
	383, 499, 413, 297, 165, 424, 164, 272, 296, 497,
	82, 26, 496, 443, 269, 194, 194, 246, 25, 266,
	442, 439, 315, 420, 437, 417, 25, 25, 263, 183,
	434, 324, 169, 423, 353, 432, 194, 162, 161, 332,
	422, 191, 24, 318, 217, 317, 216, 25, 155, 431,
	326, 231, 427, 265, 265, 289, 280, 350, 291, 344,
	304, 316, 325, 333, 26, 352, 359, 360, 433, 294,
	274, 435, 430, 426, 155, 428, 429, 155, 421, 416,
	314, 438, 155, 155, 415, 414, 158, 154, 131, 323,
	130, 343, 412, 341, 174, 450, 180, 331, 215, 188,
	25, 201, 340, 410, 339, 254, 423, 210, 221, 228,
	475, 262, 262, 338, 277, 349, 288, 337, 299, 313,
	322, 330, 191, 348, 358, 357, 462, 336, 335, 24,
	487, 460, 155, 129, 380, 128, 368, 395, 494, 24,
	173, 393, 29, 493, 381, 371, 495, 489, 24, 179,
	158, 26, 373, 449, 257, 69, 512, 450, 122, 24,
	121, 26, 231, 527, 174, 379, 153, 491, 474, 500,
	26, 180, 501, 152, 490, 503, 120, 509, 119, 492,
	188, 26, 475, 504, 505, 506, 127, 25, 486, 513,
	126, 462, 201, 510, 487, 265, 460, 25, 125, 515,
	210, 107, 494, 106, 124, 217, 25, 493, 456, 467,
	411, 489, 102, 221, 101, 449, 92, 25, 91, 525,
	228, 232, 291, 267, 267, 257, 282, 24, 292, 118,
	305, 491, 525, 334, 531, 24, 458, 117, 490, 532,
	474, 530, 116, 492, 24, 115, 114, 316, 353, 26,
	113, 105, 486, 262, 457, 100, 325, 26, 466, 90,
	465, 402, 364, 511, 333, 24, 26, 386, 90, 136,
	24, 390, 217, 6, 216, 385, 372, 524, 527, 88,
	288, 452, 352, 369, 69, 25, 516, 26, 363, 24,
	524, 360, 26, 25, 108, 104, 436, 243, 78, 425,
	392, 151, 25, 73, 72, 313, 81, 70, 71, 74,
	244, 26, 75, 150, 322, 79, 148, 147, 146, 80,
	76, 77, 330, 25, 145, 144, 215, 143, 25, 142,
	82, 141, 232, 83, 526, 84, 194, 246, 62, 140,
	348, 139, 24, 173, 138, 29, 137, 25, 69, 357,
	87, 112, 7, 24, 49, 488, 29, 111, 110, 109,
	86, 85, 78, 521, 26, 267, 464, 73, 72, 52,
	81, 70, 71, 74, 59, 26, 75, 259, 448, 79,
	58, 50, 51, 80, 76, 77, 276, 60, 237, 226,
	22, 23, 292, 473, 82, 225, 56, 83, 219, 84,
	25, 218, 62, 30, 55, 53, 320, 319, 65, 311,
	310, 25, 64, 485, 186, 185, 31, 483, 482, 488,
	295, 293, 286, 285, 69, 61, 328, 327, 7, 24,
	49, 66, 29, 247, 334, 57, 463, 461, 78, 459,
	448, 454, 453, 73, 72, 52, 81, 70, 71, 74,
	214, 26, 75, 206, 54, 79, 308, 50, 51, 80,
	76, 77, 302, 298, 63, 473, 22, 23, 346, 345,
	82, 67, 471, 83, 240, 84, 355, 485, 62, 30,
	354, 53, 68, 451, 446, 445, 204, 25, 200, 198,
	197, 32, 47, 46, 69, 34, 33, 177, 28, 24,
	170, 27, 523, 156, 21, 19, 245, 243, 78, 238,
	18, 17, 15, 73, 72, 523, 81, 70, 71, 74,
	244, 26, 75, 241, 242, 79, 14, 10, 9, 80,
	76, 77, 8, 5, 2, 1, 69, 133, 132, 0,
	82, 24, 0, 83, 0, 84, 194, 246, 62, 243,
	78, 0, 0, 0, 0, 73, 72, 25, 81, 70,
	71, 74, 244, 26, 75, 0, 0, 79, 0, 0,
	0, 80, 76, 77, 0, 0, 0, 0, 69, 0,
	0, 0, 82, 24, 0, 83, 0, 84, 194, 246,
	62, 0, 78, 0, 0, 0, 0, 73, 72, 25,
	81, 70, 71, 74, 0, 26, 75, 0, 0, 79,
	309, 0, 0, 80, 76, 77, 0, 0, 0, 0,
	69, 0, 0, 0, 82, 24, 0, 83, 0, 84,
	194, 246, 62, 0, 78, 0, 0, 0, 0, 73,
	72, 25, 81, 70, 71, 74, 0, 26, 75, 0,
	0, 79, 0, 0, 0, 80, 76, 77, 0, 0,
	0, 0, 69, 0, 0, 0, 82, 24, 0, 83,
	0, 84, 194, 0, 62, 0, 78, 0, 0, 0,
	0, 73, 72, 25, 81, 70, 71, 74, 0, 26,
	75, 0, 24, 79, 0, 0, 0, 80, 76, 77,
	0, 78, 0, 0, 0, 0, 73, 72, 82, 81,
	0, 83, 74, 84, 26, 75, 62, 0, 79, 309,
	0, 0, 80, 76, 77, 25, 0, 0, 69, 0,
	0, 0, 0, 24, 0, 217, 0, 216, 0, 194,
	246, 243, 0, 0, 0, 0, 0, 0, 69, 0,
	25, 0, 0, 0, 244, 26, 0, 241, 242, 0,
	0, 0, 78, 0, 0, 0, 0, 73, 72, 0,
	81, 70, 71, 74, 0, 0, 75, 0, 0, 79,
	194, 246, 62, 80, 76, 77, 0, 0, 0, 215,
	0, 25, 0, 0, 82, 0, 0, 83, 0, 84,
	0, 0, 62,
}
var yyPact = [...]int{

	79, -1000, 707, 647, 646, 631, -1000, 544, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 498, 544, 544, 544, 9, 544, 537, 494, 544,
	580, 533, 483, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 579,
	645, 644, 643, 637, 532, 528, 527, 524, 519, 511,
	458, 440, 544, 486, 480, 472, 468, 415, 370, 553,
	632, 630, 627, 625, 617, 615, 613, 611, 610, 604,
	603, 602, 544, 599, 587, 455, 448, -1000, -1000, 367,
	-1000, -1000, 513, 318, 317, 82, 257, 228, 211, 312,
	620, -1000, 238, 309, 203, 246, -1000, 73, -1000, -1000,
	-1000, -1000, -1000, 320, 945, 777, 819, 1011, 1011, -1000,
	214, -1000, 247, 283, 861, 246, 903, 970, -1000, 267,
	-1000, 43, 286, 553, -1000, -2, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -2,
	-1000, -1000, -1000, -1000, -1000, 573, 543, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 438, -1000, -1000, -1000, -1000,
	417, -1000, -1000, 568, -1000, -1000, -1000, 426, -1000, 561,
	-1000, -1000, -1000, -1000, -1000, 433, 246, -1000, -1000, -1000,
	-1000, -1000, 1031, 1031, 544, 447, 416, 425, 73, -1000,
	-1000, -1000, -1000, -1000, 280, 560, 548, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 220, 556, 553, 586, 422, 945,
	-1000, -1000, -1000, -1000, -1000, 418, 777, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 544, -1000,
	204, 65, 545, 47, 47, 544, 544, 384, 819, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 373, 1011,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 366, 365, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 360, 247, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 200, 544, -1000, 359, -1000,
	-1000, -1000, 18, 1031, -1000, -1000, -1000, -1000, 287, 585,
	354, 246, -1000, -1000, -1000, -1000, -1000, 1031, 1031, 353,
	903, -1000, -1000, -1000, -1000, -1000, -1000, 316, 970, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 311, 267, -1000, -1000, -1000,
	-1000, -1000, -1000, 582, 305, 43, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 302, -1000, -1000, 194,
	-1000, -1000, 190, -1000, -1000, 301, 1031, 294, 221, -1000,
	-1000, -1000, -1000, -1000, 505, -1000, -1000, -1000, -1000, 481,
	186, 144, -1000, -1000, -1000, -1000, -1000, 188, -1000, 513,
	135, 134, -1000, 112, 100, -1000, -1000, 88, 187, -2,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 50,
	-2, -1000, -1000, -1000, 819, -1000, -1000, -1000, 293, 290,
	-1000, -1000, -1000, -1000, -1000, -1000, 81, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 282, 505, -1000, -1000, -1000,
	-1000, -1000, 47, 268, 481, -1000, 544, 544, 544, -1000,
	-1000, -1000, -1000, -1000, 193, 545, 544, 549, -1000, -1000,
	-1000, 437, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 51, 50, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 567, -1000, -1000, -1000, -1000,
	-1000, 66, -1000, -1000, 95, 87, 86, -1000, 407, 63,
	57, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 522, -1000, -1000, -1000, -1000, -1000, 545, -1000, -1000,
	-1000, -1000, 58, -1000,
}
var yyPgo = [...]int{

	0, 9, 1, 35, 16, 828, 827, 59, 100, 825,
	824, 823, 563, 822, 818, 817, 283, 58, 0, 816,
	802, 38, 801, 800, 795, 19, 794, 793, 48, 791,
	790, 51, 788, 787, 45, 47, 69, 786, 785, 89,
	88, 78, 74, 65, 63, 49, 54, 52, 20, 72,
	783, 782, 781, 780, 779, 33, 778, 776, 775, 774,
	12, 773, 772, 770, 766, 15, 225, 764, 395, 762,
	7, 761, 759, 758, 14, 31, 754, 753, 752, 27,
	746, 11, 744, 743, 42, 26, 75, 17, 740, 732,
	731, 10, 729, 727, 726, 725, 723, 4, 44, 37,
	721, 717, 716, 29, 715, 713, 712, 28, 711, 710,
	5, 13, 8, 708, 707, 706, 705, 704, 50, 23,
	21, 702, 700, 699, 30, 698, 697, 696, 18, 694,
	691, 688, 36, 686, 685, 679, 34, 678, 677, 676,
	670, 56, 667, 32, 664, 656, 653, 2, 624,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	26, 13, 13, 27, 27, 28, 28, 28, 29, 30,
	30, 21, 31, 31, 31, 31, 31, 19, 32, 33,
	33, 34, 34, 34, 34, 20, 20, 35, 35, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 36, 36, 24, 24, 52,
	53, 53, 54, 54, 55, 55, 55, 55, 56, 56,
	57, 58, 58, 59, 59, 60, 60, 60, 60, 61,
	51, 51, 62, 63, 63, 64, 64, 65, 65, 65,
	65, 45, 66, 67, 68, 68, 69, 69, 70, 70,
	70, 50, 50, 71, 72, 72, 73, 73, 74, 74,
	74, 74, 74, 75, 46, 77, 77, 77, 77, 77,
	77, 77, 77, 76, 78, 78, 79, 80, 37, 82,
	83, 83, 84, 84, 84, 84, 84, 84, 3, 3,
	87, 85, 85, 88, 89, 89, 90, 90, 91, 91,
	91, 91, 91, 91, 91, 91, 17, 17, 17, 93,
	94, 40, 95, 96, 96, 81, 81, 97, 97, 97,
	97, 97, 97, 97, 97, 100, 49, 101, 101, 102,
	102, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 44, 44, 105,
	105, 106, 106, 107, 107, 107, 107, 107, 107, 107,
	109, 110, 110, 110, 110, 110, 110, 110, 110, 110,
	110, 108, 108, 113, 114, 114, 23, 115, 116, 116,
	117, 117, 118, 118, 118, 118, 118, 118, 119, 120,
	47, 121, 122, 122, 123, 123, 124, 124, 124, 124,
	124, 124, 48, 125, 126, 126, 127, 127, 128, 128,
	128, 128, 128, 38, 129, 130, 130, 131, 131, 132,
	132, 132, 132, 39, 133, 134, 135, 135, 111, 111,
	112, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 137, 43, 43, 139, 139, 139, 139,
	139, 139, 139, 139, 138, 138, 41, 140, 141, 142,
	142, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 99, 4, 4, 2, 1,
	1, 98, 42, 144, 92, 92, 145, 146, 146, 147,
	147, 147, 147, 148, 16, 18, 14, 15, 22, 86,
	7, 7, 8, 5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 1, 2, 1, 1, 1, 2, 1,
	2, 3, 1, 3, 1, 1, 1, 4, 2, 1,
	2, 3, 1, 1, 1, 2, 4, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	2, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 2, 2, 4, 1, 2, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 4, 2, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 4, 2, 0, 1, 1, 2, 3, 3,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 3, 3, 2, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 4, 2, 1, 1, 2, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 3, 4, 2, 2, 4, 2, 1, 2, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 3, 0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, 49, 50, 12, 70, 34, -29, -32, 15,
	62, -115, -52, -37, -38, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -8, 13,
	40, 41, 28, 64, -82, -129, -133, -95, -140, -144,
	-138, -104, 61, -76, -121, -125, -100, -71, -62, 7,
	30, 31, 27, 26, 32, 35, 43, 44, 21, 38,
	42, 29, 53, 56, 58, 4, 4, 9, -12, -4,
	5, 10, 8, -4, -4, -4, 71, 72, 73, -4,
	8, 10, 8, -4, 5, 8, 10, 8, 5, 4,
	4, 4, 4, 8, 8, 8, 8, 8, 8, 10,
	8, 10, 8, -4, 8, 8, 8, 8, 10, 8,
	10, 8, -5, -6, -3, -4, 6, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, -4,
	4, 4, 8, 8, 10, 55, -27, -28, -16, -17,
	-18, 10, 10, -7, 10, 8, 10, 10, 10, 10,
	-30, -31, -21, 13, -16, -17, -18, -33, -34, 13,
	-16, -17, -18, 10, 10, -116, -117, -118, -16, -17,
	-18, -66, -119, -120, 59, 23, 24, -53, -54, -55,
	-56, -16, -17, -18, -57, 65, -83, -84, -85, -86,
	-16, -17, -18, -87, -88, 68, 16, 14, -130, -131,
	-132, -16, -17, -18, -25, -134, -135, -136, -16, -17,
	-18, -66, -68, -111, -112, -98, -99, -137, 22, -25,
	-67, 36, 37, 20, 33, 19, 60, -96, -81, -97,
	-16, -17, -18, -66, -68, -98, -99, -25, -141, -142,
	-143, -85, -16, -17, -18, -66, -45, -68, -86, -98,
	-111, -112, -99, -87, -8, -141, -139, -16, -17, -18,
	-66, -45, -68, -98, -99, -105, -106, -107, -16, -17,
	-18, -66, -68, -108, -49, -109, 51, 10, -77, -16,
	-17, -18, -78, -36, -66, -68, -79, -25, -80, 39,
	-122, -123, -124, -16, -17, -18, -66, -119, -120, -126,
	-127, -128, -16, -17, -18, -66, -25, -101, -102, -103,
	-16, -17, -18, -66, -68, -39, -40, -41, -42, -43,
	-44, -46, -79, -47, -48, -72, -73, -74, -16, -17,
	-18, -75, -66, 57, -63, -64, -65, -16, -17, -18,
	-66, -7, -3, 5, 9, -28, -8, -31, 9, 5,
	-34, 9, 5, 9, -118, -35, -36, -35, -4, 8,
	8, 9, -55, 10, 8, 5, 9, -84, 10, 8,
	5, -3, 4, 9, -132, 9, -136, -4, 10, 8,
	-2, 52, 6, -2, -1, 47, 48, -1, -4, -4,
	9, -97, 9, -143, 9, 9, 9, -107, 10, 8,
	-4, 9, -79, -25, 8, 4, 9, -124, -35, -35,
	9, -128, 9, -103, 9, -74, 4, 9, -65, 9,
	10, 10, 9, 9, 10, -58, -59, -60, -16, -17,
	-18, -61, 66, -89, -90, -91, 17, 63, 45, -92,
	-75, -93, -85, -94, -145, 69, 67, 18, 10, 10,
	10, -69, -70, -16, -17, -18, 10, 10, 10, 10,
	10, 10, -113, -114, -110, -16, -17, -18, -66, -87,
	-98, -99, -45, -111, -112, -81, 9, 9, 10, 9,
	-60, -1, 9, -91, -4, -4, -4, 10, 8, -2,
	-4, 4, 9, -70, 9, -110, 9, 10, 10, 10,
	10, -146, -147, -16, -17, -18, -148, 46, 10, 10,
	9, -147, -2, 10,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 363,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1, 5, 0,
	336, 21, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 238, 67, 70, 20, 28,
	38, 237, 69, 0, 275, 0, 173, 0, 0, 304,
	0, 207, 209, 0, 125, 252, 264, 187, 111, 114,
	90, 93, 0, 364, 365, 148, 149, 139, 274, 284,
	172, 317, 343, 314, 315, 206, 133, 251, 263, 185,
	113, 92, 2, 3, 6, 0, 0, 23, 25, 26,
	27, 356, 357, 354, 360, 0, 166, 167, 168, 355,
	0, 29, 32, 0, 34, 35, 36, 0, 39, 0,
	42, 43, 44, 31, 358, 0, 239, 240, 242, 243,
	244, 245, 47, 47, 0, 0, 0, 0, 71, 72,
	74, 75, 76, 77, 0, 0, 0, 140, 142, 143,
	144, 145, 146, 147, 0, 0, 0, 0, 0, 276,
	277, 279, 280, 281, 282, 0, 285, 286, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 175,
	177, 178, 179, 180, 181, 182, 183, 184, 0, 318,
	319, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 0, 0, 306, 307, 308,
	309, 310, 311, 312, 313, 0, 210, 211, 213, 214,
	215, 216, 217, 218, 219, 0, 0, 101, 0, 126,
	127, 128, 129, 130, 131, 132, 134, 65, 0, 0,
	0, 253, 254, 256, 257, 258, 259, 47, 47, 0,
	265, 266, 268, 269, 270, 271, 272, 0, 188, 189,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 0, 115, 116, 118, 119,
	120, 121, 122, 0, 0, 94, 95, 97, 98, 99,
	100, 362, 366, 337, 22, 24, 0, 30, 37, 0,
	40, 46, 0, 236, 241, 0, 48, 0, 0, 248,
	249, 68, 73, 78, 81, 80, 138, 141, 151, 154,
	0, 0, 153, 273, 278, 283, 287, 0, 104, 0,
	0, 0, 338, 0, 0, 339, 340, 0, 0, 103,
	171, 176, 316, 320, 342, 305, 208, 212, 231, 0,
	220, 124, 135, 66, 0, 137, 250, 255, 0, 0,
	262, 267, 186, 190, 112, 117, 0, 91, 96, 361,
	33, 41, 246, 247, 102, 0, 82, 83, 85, 86,
	87, 88, 0, 0, 155, 156, 0, 0, 0, 161,
	162, 163, 164, 165, 0, 0, 0, 0, 359, 150,
	301, 0, 106, 108, 109, 110, 288, 289, 290, 341,
	335, 303, 0, 233, 234, 221, 222, 223, 224, 225,
	226, 227, 228, 229, 230, 0, 260, 261, 123, 79,
	84, 0, 152, 157, 0, 0, 0, 344, 0, 0,
	0, 346, 105, 107, 232, 235, 136, 89, 158, 159,
	160, 0, 347, 349, 350, 351, 352, 0, 169, 170,
	345, 348, 0, 353,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:150
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:175
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:197
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:206
		{
			yylex.(*lexer).stack.pop()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:209
		{
			yylex.(*lexer).stack.pop()
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:223
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:236
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:252
		{
			yylex.(*lexer).stack.pop()
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:257
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:276
		{
			yylex.(*lexer).stack.pop()
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:279
		{
			yylex.(*lexer).stack.pop()
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:303
		{
			l := yylex.(*lexer)
			l.builder.Extensions(l.stack.peek(), yyDollar[1].ext)
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:312
		{
			yylex.(*lexer).stack.pop()
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:315
		{
			yylex.(*lexer).stack.pop()
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:320
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:342
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:345
		{
			yylex.(*lexer).stack.pop()
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:350
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:372
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:381
		{
			yylex.(*lexer).stack.pop()
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:384
		{
			yylex.(*lexer).stack.pop()
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:389
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:411
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:420
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:429
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:438
		{
			yylex.(*lexer).stack.pop()
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:441
		{
			yylex.(*lexer).stack.pop()
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:454
		{
			yylex.(*lexer).stack.pop()
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:457
		{
			yylex.(*lexer).stack.pop()
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:462
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:497
		{
			yylex.(*lexer).stack.pop()
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:512
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:526
		{
			yylex.(*lexer).stack.pop()
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:531
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:540
		{
			yylex.(*lexer).stack.pop()
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:545
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:565
		{
			yyVAL.token = yyDollar[1].token
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:566
		{
			yyVAL.token = yyDollar[1].token
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:578
		{
			yylex.(*lexer).stack.pop()
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:581
		{
			yylex.(*lexer).stack.pop()
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:602
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:609
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:616
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:635
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:644
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:653
		{
			yylex.(*lexer).stack.pop()
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:658
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:695
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:733
		{
			yylex.(*lexer).stack.pop()
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:736
		{
			yylex.(*lexer).stack.pop()
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:757
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			yylex.(*lexer).stack.pop()
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:782
		{
			yylex.(*lexer).stack.pop()
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:794
		{
			yylex.(*lexer).stack.pop()
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:799
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:819
		{
			yylex.(*lexer).stack.pop()
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:822
		{
			yylex.(*lexer).stack.pop()
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:836
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:848
		{
			yylex.(*lexer).stack.pop()
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:853
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:873
		{
			yylex.(*lexer).stack.pop()
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:876
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:884
		{
			yylex.(*lexer).stack.pop()
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:889
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:913
		{
			yylex.(*lexer).stack.pop()
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:918
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:940
		{
			yylex.(*lexer).stack.pop()
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:945
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:962
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:969
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:978
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1001
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1010
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1013
		{
			yylex.(*lexer).stack.pop()
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1029
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1036
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1045
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1080
		{
			l := yylex.(*lexer)
			l.builder.Extensions(l.stack.peek(), yyDollar[1].ext)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1086
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1095
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1098
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1103
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1113
		{
			yyVAL.boolean = true
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1114
		{
			yyVAL.boolean = false
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1117
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1129
		{
			yylex.(*lexer).stack.pop()
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1134
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1143
		{
			yylex.(*lexer).stack.pop()
		}
	case 345:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1146
		{
			yylex.(*lexer).stack.pop()
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1151
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1178
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			if setSecondaryExtensions(yylex, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1190
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1226
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1235
		{
			yyVAL.ext = nil
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1238
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1243
		{
			l := yylex.(*lexer)
			x := l.builder.Extension(l.stack.peek(), yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			if yyDollar[3].ext != nil {
				yyVAL.ext = append(yyDollar[3].ext, x)
			} else {
				yyVAL.ext = []*meta.Extension{x}
			}
		}
	case 363:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1257
		{
			yyVAL.args = []string{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1263
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1266
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
