// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1558

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1621

var yyAct = [...]int16{
	287, 638, 580, 13, 630, 337, 13, 338, 463, 540,
	284, 563, 283, 400, 270, 527, 520, 406, 351, 427,
	396, 468, 369, 377, 48, 347, 47, 359, 298, 326,
	252, 46, 297, 44, 307, 43, 42, 238, 305, 259,
	206, 227, 219, 309, 441, 212, 191, 41, 195, 185,
	172, 648, 285, 168, 146, 11, 474, 475, 11, 445,
	448, 446, 447, 49, 75, 40, 211, 469, 470, 45,
	3, 249, 295, 39, 556, 558, 308, 75, 75, 439,
	31, 26, 26, 26, 103, 104, 105, 655, 645, 311,
	75, 291, 419, 75, 624, 26, 187, 26, 31, 4,
	175, 572, 542, 28, 28, 28, 571, 170, 190, 169,
	199, 570, 569, 209, 403, 223, 229, 28, 568, 28,
	555, 513, 512, 16, 557, 243, 255, 262, 553, 301,
	301, 511, 317, 289, 329, 525, 340, 350, 362, 372,
	380, 27, 399, 554, 409, 170, 559, 169, 235, 235,
	225, 167, 173, 239, 168, 27, 200, 27, 390, 290,
	188, 271, 197, 240, 392, 207, 391, 221, 228, 203,
	266, 389, 175, 388, 193, 387, 386, 241, 253, 260,
	574, 299, 299, 365, 315, 190, 327, 385, 339, 348,
	360, 370, 378, 182, 397, 199, 407, 333, 303, 303,
	413, 319, 313, 265, 364, 384, 209, 611, 202, 610,
	183, 178, 181, 383, 244, 609, 180, 608, 268, 223,
	310, 310, 417, 322, 173, 168, 607, 229, 606, 177,
	75, 186, 430, 647, 418, 26, 621, 188, 243, 603,
	236, 200, 487, 422, 486, 598, 426, 197, 462, 453,
	461, 452, 255, 168, 179, 168, 168, 28, 207, 262,
	264, 435, 304, 304, 596, 320, 239, 331, 440, 636,
	354, 221, 595, 382, 168, 451, 240, 443, 444, 228,
	516, 437, 458, 436, 467, 143, 267, 142, 306, 306,
	241, 321, 514, 271, 478, 27, 412, 301, 460, 471,
	510, 75, 266, 455, 253, 508, 26, 286, 186, 505,
	12, 260, 503, 12, 75, 501, 423, 497, 484, 26,
	196, 466, 465, 141, 617, 140, 329, 244, 28, 481,
	135, 133, 134, 132, 131, 265, 130, 75, 340, 619,
	483, 28, 26, 482, 114, 490, 113, 350, 480, 299,
	268, 109, 99, 108, 98, 485, 477, 459, 457, 362,
	449, 434, 628, 425, 28, 495, 303, 442, 464, 372,
	75, 618, 494, 433, 432, 26, 196, 380, 327, 27,
	166, 345, 344, 165, 499, 500, 498, 139, 310, 333,
	339, 502, 264, 138, 137, 390, 399, 28, 193, 348,
	504, 392, 27, 391, 365, 136, 409, 174, 389, 129,
	388, 360, 387, 386, 52, 189, 506, 198, 267, 128,
	208, 370, 222, 509, 385, 364, 75, 97, 652, 378,
	304, 26, 242, 254, 261, 27, 300, 300, 523, 316,
	127, 328, 384, 126, 349, 361, 371, 379, 397, 398,
	383, 408, 125, 28, 193, 124, 306, 530, 407, 331,
	75, 507, 649, 566, 116, 26, 115, 545, 75, 454,
	75, 536, 416, 26, 112, 26, 107, 466, 465, 174,
	354, 528, 547, 97, 148, 438, 535, 28, 583, 424,
	521, 27, 189, 421, 6, 28, 75, 28, 420, 636,
	95, 26, 198, 414, 123, 117, 111, 496, 594, 644,
	382, 75, 529, 208, 176, 564, 26, 456, 164, 534,
	523, 163, 192, 28, 201, 27, 222, 213, 161, 160,
	234, 590, 531, 27, 533, 27, 599, 159, 28, 245,
	581, 530, 602, 312, 312, 242, 323, 600, 334, 604,
	343, 644, 366, 545, 393, 536, 402, 588, 411, 254,
	157, 27, 612, 566, 589, 528, 261, 156, 547, 155,
	535, 154, 521, 153, 620, 152, 613, 585, 151, 587,
	583, 150, 622, 517, 149, 415, 176, 288, 121, 120,
	75, 345, 344, 119, 118, 26, 529, 537, 93, 192,
	92, 634, 532, 534, 300, 478, 560, 561, 340, 201,
	633, 629, 641, 627, 551, 564, 531, 28, 533, 642,
	213, 637, 552, 590, 573, 65, 575, 576, 340, 296,
	633, 577, 581, 328, 650, 490, 64, 314, 641, 653,
	403, 234, 214, 592, 593, 651, 66, 586, 269, 588,
	258, 257, 245, 654, 349, 27, 589, 62, 75, 597,
	339, 251, 631, 26, 639, 250, 361, 75, 61, 585,
	368, 587, 26, 187, 367, 31, 371, 71, 358, 357,
	339, 70, 631, 205, 379, 28, 532, 204, 33, 579,
	639, 75, 293, 489, 28, 22, 26, 578, 22, 335,
	210, 332, 325, 398, 324, 67, 376, 375, 72, 292,
	214, 312, 282, 408, 263, 63, 302, 302, 28, 318,
	626, 330, 550, 27, 353, 363, 373, 381, 548, 401,
	546, 410, 27, 544, 543, 147, 541, 539, 538, 586,
	334, 246, 237, 96, 60, 522, 355, 346, 69, 395,
	75, 193, 343, 394, 73, 26, 562, 625, 273, 248,
	100, 101, 102, 276, 106, 646, 342, 110, 341, 68,
	565, 345, 344, 366, 405, 404, 277, 28, 74, 274,
	275, 526, 75, 233, 232, 75, 231, 26, 230, 226,
	26, 393, 35, 210, 122, 582, 524, 519, 276, 518,
	224, 220, 214, 656, 85, 218, 657, 217, 34, 28,
	402, 277, 28, 51, 50, 27, 38, 37, 256, 272,
	411, 158, 428, 194, 30, 162, 336, 522, 89, 352,
	184, 374, 29, 171, 214, 281, 75, 214, 281, 85,
	23, 26, 36, 249, 21, 248, 263, 27, 601, 276,
	27, 20, 19, 249, 18, 248, 17, 15, 14, 276,
	10, 279, 277, 28, 75, 274, 275, 9, 549, 26,
	565, 8, 277, 5, 2, 274, 275, 567, 1, 145,
	215, 216, 144, 0, 302, 0, 0, 582, 214, 281,
	85, 28, 0, 0, 0, 0, 0, 0, 0, 247,
	85, 27, 591, 0, 429, 429, 0, 0, 0, 247,
	0, 0, 280, 330, 0, 75, 214, 632, 0, 640,
	26, 0, 249, 0, 248, 0, 0, 0, 0, 27,
	0, 0, 0, 0, 353, 0, 0, 632, 75, 0,
	493, 0, 28, 26, 256, 640, 363, 0, 0, 0,
	431, 272, 84, 0, 549, 0, 373, 79, 78, 0,
	88, 76, 77, 80, 381, 28, 81, 0, 0, 86,
	356, 0, 0, 87, 82, 83, 0, 567, 247, 0,
	27, 0, 0, 401, 89, 0, 0, 90, 0, 91,
	214, 281, 85, 410, 591, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 450, 472, 473, 26, 476, 249, 0,
	248, 0, 343, 0, 635, 0, 643, 0, 0, 0,
	479, 0, 0, 0, 0, 0, 0, 0, 28, 352,
	0, 0, 343, 0, 635, 0, 0, 0, 0, 0,
	0, 0, 643, 0, 0, 0, 0, 429, 429, 0,
	0, 374, 0, 75, 0, 94, 0, 7, 26, 53,
	0, 31, 488, 0, 247, 584, 27, 84, 0, 0,
	491, 492, 79, 78, 56, 88, 76, 77, 80, 0,
	28, 81, 0, 0, 86, 0, 54, 55, 87, 82,
	83, 0, 0, 0, 0, 24, 25, 0, 0, 89,
	0, 0, 90, 0, 91, 0, 0, 85, 32, 0,
	57, 515, 0, 0, 0, 0, 0, 0, 27, 0,
	0, 0, 0, 58, 0, 75, 0, 0, 0, 7,
	26, 53, 0, 31, 0, 0, 0, 0, 59, 84,
	0, 0, 0, 0, 79, 78, 56, 88, 76, 77,
	80, 0, 28, 81, 0, 0, 86, 584, 54, 55,
	87, 82, 83, 0, 0, 0, 0, 24, 25, 0,
	0, 89, 0, 0, 90, 0, 91, 0, 0, 85,
	32, 0, 57, 0, 0, 0, 0, 0, 0, 75,
	27, 0, 0, 0, 26, 58, 0, 0, 0, 0,
	0, 278, 276, 84, 279, 0, 0, 0, 79, 78,
	59, 88, 76, 77, 80, 277, 28, 81, 274, 275,
	86, 0, 0, 0, 87, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 90, 0,
	91, 214, 281, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 249, 0, 248, 0,
	0, 0, 276, 0, 279, 280, 0, 0, 605, 0,
	0, 75, 0, 623, 0, 277, 26, 0, 274, 275,
	0, 614, 615, 616, 276, 84, 0, 0, 0, 0,
	79, 78, 0, 88, 76, 77, 80, 277, 28, 81,
	0, 0, 86, 85, 0, 0, 87, 82, 83, 0,
	0, 0, 247, 0, 0, 0, 0, 89, 0, 0,
	90, 0, 91, 214, 281, 85, 0, 0, 75, 0,
	0, 0, 0, 26, 0, 0, 27, 0, 0, 0,
	294, 276, 84, 0, 0, 0, 0, 79, 78, 0,
	88, 76, 77, 80, 277, 28, 81, 0, 0, 86,
	0, 0, 0, 87, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 90, 0, 91,
	214, 281, 85, 0, 75, 0, 0, 0, 0, 26,
	0, 0, 0, 27, 0, 0, 0, 294, 84, 0,
	0, 0, 0, 79, 78, 0, 88, 76, 77, 80,
	0, 28, 81, 0, 0, 86, 356, 0, 0, 87,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 90, 75, 91, 214, 281, 85, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 27,
	0, 0, 0, 79, 78, 0, 88, 76, 77, 80,
	0, 28, 81, 0, 0, 86, 0, 0, 0, 87,
	82, 83, 0, 75, 0, 0, 0, 0, 26, 0,
	89, 0, 0, 90, 0, 91, 214, 84, 85, 0,
	0, 0, 79, 78, 0, 88, 76, 77, 80, 27,
	28, 81, 0, 0, 86, 0, 0, 0, 87, 82,
	83, 0, 75, 0, 0, 0, 0, 26, 0, 89,
	0, 0, 90, 0, 91, 0, 84, 85, 0, 0,
	0, 79, 78, 0, 88, 0, 0, 80, 27, 28,
	81, 0, 0, 86, 356, 0, 0, 87, 82, 83,
	0, 0, 0, 0, 0, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 214, 281, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 79, 78, 27, 88, 76,
	77, 80, 0, 0, 81, 0, 0, 86, 0, 0,
	0, 87, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 90, 0, 91, 0, 0,
	85,
}

var yyPact = [...]int16{
	45, -1000, 1128, 596, 594, 1056, -1000, 422, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 344, 422, 422, 422, 11, 422, 468,
	343, 422, 501, 466, 336, 458, 456, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 500, 590, 589, 585, 584, 422, 499,
	447, 444, 435, 432, 411, 401, 326, 323, 322, 397,
	386, 385, 379, 315, 277, 478, 580, 577, 574, 571,
	569, 567, 565, 563, 556, 422, 533, 525, 524, 422,
	517, 514, 375, 372, -1000, -1000, 99, -1000, -1000, 489,
	219, 201, 99, 206, 202, 183, 200, 660, -1000, 363,
	198, 159, 857, -1000, 85, 71, 65, -1000, -1000, -1000,
	-1000, -1000, -2, -1000, 908, 1476, 1192, 1331, 829, 829,
	-1000, 778, -1000, 775, -1000, 504, 1387, 857, 1437, 1515,
	-1000, 583, -1000, 651, 137, 478, -1000, -2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -2, -1000,
	-1000, -1000, -2, -1000, -1000, -1000, -1000, -1000, 498, -1000,
	86, 463, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 83, -1000, -1000, 493, -1000, -1000,
	-1000, -1000, -1000, 488, 307, -1000, 484, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 354, 857, -1000, -1000, -1000, -1000,
	-1000, 1559, 1559, -1000, 422, 366, 365, 352, 85, -1000,
	-1000, -1000, -1000, -1000, 273, 480, 70, -1000, -1000, -1000,
	-1000, 359, 359, 359, -1000, -20, 351, 1004, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 241, 464, 478, 513,
	349, 1476, -1000, -1000, -1000, -1000, -1000, 348, 1192, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 240, 316, 472, 20, 20, 422, 422,
	-28, 422, 347, 1331, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 422, 339, 829, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 334, 331, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 309, 775, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 234, 422, 684, -1000, -1000,
	-1000, -1000, -1000, -1000, 422, 422, 931, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 357, 503, 308, 857, -1000,
	-1000, -1000, -1000, -1000, 1559, 1559, -1000, 306, 1437, -1000,
	-1000, -1000, -1000, -1000, -1000, 303, 1515, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 300, 583, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 457, 296, 651, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 291, -1000, -1000, -1000, -1000,
	121, 112, -1000, -1000, 111, -1000, -1000, 283, 1559, -1000,
	271, 99, -1000, -1000, -1000, -1000, -1000, 69, -1000, -1000,
	-1000, -1000, 1252, -1000, -1000, 137, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 57, 137, 137, -1000, -1000, -1000, -1000,
	-1000, -1000, 489, 108, 102, -1000, -1000, 101, 96, -1000,
	-1000, 91, 99, 170, 137, 137, -2, -1000, -1000, 99,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 743, -2, -1000,
	-1000, 99, 99, -1000, -1000, 1331, -1000, -1000, -1000, 263,
	255, -1000, -1000, -1000, -1000, -1000, -1000, 137, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 236, 69,
	-1000, -1000, -1000, -1000, -1000, 20, 839, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 230, 57,
	-1000, -1000, 422, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	218, 207, 199, 472, 20, 422, 422, 422, 319, 367,
	-1000, -1000, 330, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 227, 743,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1274, -1000, -1000, -1000, -1000, -1000,
	84, -1000, -1000, -1000, -1000, 99, -1000, 294, -1000, 223,
	-1000, 461, 78, 137, -2, -2, -2, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 224, 504, -18, 453,
	-1000, -1000, -1000, -1000, -1000, -1000, 472, 419, -1000, -1000,
	-1000, -1000, -1000, -1000, 472, -1000, -1000, -1000, 77, -1000,
	-1000, 137, -1000, -1000, 137, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 21, 8, 54, 735, 882, 879, 414, 151, 878,
	874, 873, 494, 871, 867, 860, 52, 307, 0, 858,
	857, 123, 856, 854, 852, 851, 844, 692, 842, 840,
	833, 50, 832, 830, 49, 46, 824, 823, 48, 19,
	822, 817, 816, 73, 65, 47, 36, 35, 33, 69,
	31, 26, 24, 63, 814, 813, 808, 807, 805, 42,
	801, 800, 799, 797, 16, 796, 792, 789, 41, 788,
	786, 44, 784, 783, 781, 15, 38, 14, 89, 159,
	91, 76, 43, 28, 778, 775, 774, 17, 587, 769,
	5, 7, 768, 766, 758, 133, 756, 11, 754, 753,
	749, 20, 13, 748, 747, 25, 18, 746, 12, 744,
	742, 37, 741, 738, 737, 9, 736, 734, 733, 730,
	728, 722, 720, 715, 712, 10, 709, 708, 707, 706,
	23, 705, 704, 702, 29, 701, 699, 2, 697, 689,
	688, 687, 683, 40, 66, 45, 681, 679, 678, 27,
	677, 674, 670, 22, 668, 665, 661, 30, 657, 651,
	650, 39, 648, 34, 646, 637, 636, 72, 629, 32,
	625, 622, 621, 1, 619, 614, 611, 4, 601,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 103, 106, 107, 41, 109,
	110, 110, 111, 111, 111, 111, 111, 111, 111, 3,
	3, 78, 83, 83, 112, 113, 113, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	121, 121, 121, 122, 122, 120, 17, 17, 17, 119,
	44, 123, 124, 124, 108, 108, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 126, 127, 53, 128, 128,
	129, 129, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 131, 48,
	48, 132, 132, 133, 133, 134, 134, 134, 134, 134,
	134, 134, 134, 136, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 135, 135, 138, 139, 139,
	23, 140, 141, 141, 142, 142, 143, 143, 143, 143,
	143, 143, 143, 144, 145, 51, 146, 147, 147, 148,
	148, 149, 149, 149, 149, 149, 149, 149, 52, 150,
	151, 151, 152, 152, 153, 153, 153, 153, 153, 42,
	154, 155, 155, 156, 156, 157, 157, 157, 157, 43,
	158, 159, 160, 160, 81, 81, 82, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	163, 163, 162, 77, 47, 47, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 164, 164, 45, 166, 167,
	168, 168, 169, 169, 169, 169, 169, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 80, 4, 4,
	2, 2, 1, 1, 79, 46, 170, 118, 118, 171,
	172, 172, 173, 173, 173, 173, 173, 174, 117, 117,
	175, 176, 176, 177, 177, 177, 177, 177, 178, 16,
	18, 14, 15, 22, 76, 8, 8, 7, 5, 5,
	6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 2, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 2, 0, 1, 1, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 2, 2, 1, 3, 3, 3, 3, 3, 3,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 1, 1, 2,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	3, 3, 1, 2, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 3, 3, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 4,
	2, 1, 1, 2, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 2, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 3, 4, 2, 2, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 3, 2, 4,
	2, 1, 2, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 3, 0, 1,
	1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -140, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -7, 13, 40, 41, 28, 64, 77, 92,
	-109, -154, -158, -123, -166, -170, -164, -131, -89, -103,
	-146, -150, -127, -98, -84, 7, 30, 31, 27, 26,
	32, 35, 43, 44, 21, 61, 38, 42, 29, 53,
	56, 58, 4, 4, 9, -12, -4, 5, 10, 8,
	-4, -4, -4, 73, 74, 75, -4, 8, 10, 8,
	-4, 5, 8, 10, 8, 8, 8, 5, 4, 4,
	4, 4, -4, 5, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, 10, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -5, -6, -3, -4, 6, 4,
	4, 4, 4, 4, 4, 4, 4, 4, -4, 4,
	4, 4, -4, 4, 4, 8, 8, -8, 55, 10,
	8, -30, -31, -16, -17, -18, -7, 10, 10, -8,
	10, 10, 10, 10, -33, -34, -21, 13, -16, -17,
	-18, -35, -7, 91, -37, -38, 13, -16, -17, -18,
	-35, -7, 10, 10, -141, -142, -143, -16, -17, -18,
	-88, -144, -145, -7, 59, 23, 24, -57, -58, -59,
	-60, -16, -17, -18, -61, 65, -67, -68, -16, -18,
	-69, -70, -72, -73, -7, 78, -21, -110, -111, -83,
	-76, -16, -17, -18, -78, -7, -112, 70, 16, 14,
	-155, -156, -157, -16, -17, -18, -27, -159, -160, -161,
	-16, -17, -18, -88, -95, -81, -82, -79, -80, -162,
	-77, -163, -27, -94, 36, 37, 20, 33, 19, 22,
	83, 60, -124, -108, -125, -16, -17, -18, -88, -95,
	-79, -80, -126, -27, 76, -167, -168, -169, -83, -16,
	-17, -18, -88, -49, -95, -76, -79, -163, -81, -82,
	-80, -78, -7, -167, -165, -16, -17, -18, -88, -49,
	-95, -79, -80, -7, -132, -133, -134, -16, -17, -18,
	-88, -95, -135, -53, -7, -136, 51, -90, -91, -16,
	-18, -92, -93, -7, 88, 87, -104, -105, -16, -17,
	-18, -106, -27, -88, -95, -107, 39, -147, -148, -149,
	-16, -17, -18, -88, -144, -145, -7, -151, -152, -153,
	-16, -17, -18, -88, -27, -128, -129, -130, -16, -17,
	-18, -88, -95, -43, -44, -45, -46, -47, -48, -50,
	-106, -51, -52, -7, -99, -100, -101, -16, -17, -18,
	-102, -88, -7, 57, -85, -86, -87, -16, -17, -18,
	-88, -7, -8, -3, 5, -7, 9, -31, -34, 9,
	5, 5, -38, 9, 5, 9, -143, -39, -40, -27,
	-39, -4, 8, 8, 9, -59, 10, 8, 5, 9,
	-68, -71, 8, -71, -71, 79, 81, 82, 80, 9,
	9, -111, 10, 8, 5, -3, 4, 9, -157, 9,
	-161, 10, 8, -2, 52, 6, 5, -2, -1, 47,
	48, -1, -4, -4, 84, 85, -4, 9, -125, -4,
	9, -169, 9, 9, 9, -134, 10, 8, -4, 9,
	-91, -4, -4, 9, -105, 8, 4, 9, -149, -39,
	-39, 9, -153, 9, -130, 9, -101, 4, 9, -87,
	9, 10, 10, 10, 9, -27, 9, -8, -62, -63,
	-64, -16, -17, -18, -65, 66, -74, -75, -76, -49,
	-77, -78, -79, -80, -81, -82, -83, -8, -113, -114,
	-115, -116, 45, -117, -118, -102, -119, -83, -120, -7,
	-121, -175, -171, 71, 86, 63, 17, 67, 18, 89,
	-8, -8, -96, -97, -16, -17, -18, -7, 10, 10,
	10, 10, 10, -8, 10, -8, -8, -8, -138, -139,
	-137, -16, -17, -18, -88, -78, -79, -80, -49, -81,
	-82, -7, -8, -8, -108, 9, 9, -8, 9, -64,
	-1, 9, -75, 9, -115, -4, 10, 8, 10, 8,
	10, 8, -2, -1, -4, -4, -4, 5, 4, 9,
	-97, 9, -137, 9, 10, -8, -122, -90, 68, -176,
	-177, -16, -17, -18, -178, -7, 46, -172, -173, -16,
	-17, -18, -174, -7, 90, 10, -8, 9, 69, 9,
	-177, -2, 9, -173, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 448, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 5, 0, 408, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 302, 77, 80, 0, 0, 24, 33, 45,
	301, 79, 101, 22, 0, 341, 0, 232, 0, 0,
	374, 0, 269, 271, 139, 0, 0, 317, 330, 248,
	161, 164, 127, 130, 0, 449, 450, 199, 200, 189,
	340, 350, 231, 388, 416, 385, 386, 268, 141, 185,
	316, 329, 246, 163, 129, 2, 3, 6, 0, 445,
	0, 0, 27, 29, 30, 31, 32, 441, 442, 439,
	226, 227, 228, 440, 0, 34, 37, 0, 39, 40,
	41, 42, 43, 0, 0, 46, 0, 49, 50, 51,
	52, 53, 36, 443, 0, 303, 304, 306, 307, 308,
	309, 57, 57, 312, 0, 0, 0, 0, 81, 82,
	84, 85, 86, 87, 0, 0, 0, 102, 104, 105,
	106, 0, 0, 0, 110, 0, 0, 0, 190, 192,
	193, 194, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 342, 343, 345, 346, 347, 348, 0, 351, 352,
	357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 233, 234, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 389, 390, 392, 393,
	394, 395, 396, 397, 398, 399, 400, 401, 402, 403,
	404, 405, 406, 0, 0, 376, 377, 378, 379, 380,
	381, 382, 383, 384, 0, 272, 273, 275, 276, 277,
	278, 279, 280, 281, 282, 0, 0, 0, 142, 144,
	145, 146, 147, 148, 0, 0, 0, 176, 178, 179,
	180, 181, 182, 183, 184, 0, 0, 0, 318, 319,
	321, 322, 323, 324, 57, 57, 327, 0, 331, 332,
	334, 335, 336, 337, 338, 0, 249, 250, 252, 253,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 0, 165, 166, 168, 169, 170,
	171, 172, 173, 0, 0, 131, 132, 134, 135, 136,
	137, 138, 447, 451, 409, 0, 26, 28, 35, 44,
	0, 0, 47, 55, 0, 300, 305, 0, 58, 75,
	0, 0, 313, 314, 78, 83, 88, 91, 90, 100,
	103, 107, 0, 108, 109, 0, 112, 113, 114, 23,
	188, 191, 202, 205, 0, 0, 204, 339, 344, 349,
	353, 153, 0, 0, 0, 410, 411, 0, 0, 412,
	413, 0, 0, 0, 0, 0, 152, 230, 235, 0,
	387, 391, 415, 375, 270, 274, 295, 0, 283, 140,
	143, 0, 0, 175, 177, 0, 187, 315, 320, 0,
	0, 328, 333, 247, 251, 162, 167, 0, 128, 133,
	446, 38, 56, 48, 310, 76, 311, 151, 0, 92,
	93, 95, 96, 97, 98, 0, 0, 116, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 111, 0, 206,
	207, 209, 0, 211, 212, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 201, 0, 155, 157, 158, 159, 160, 354, 355,
	356, 414, 407, 372, 373, 370, 371, 245, 0, 297,
	298, 284, 285, 286, 287, 288, 289, 290, 291, 292,
	293, 294, 149, 150, 0, 325, 326, 174, 89, 94,
	0, 115, 117, 203, 208, 0, 218, 0, 428, 0,
	417, 0, 0, 0, 220, 221, 222, 430, 419, 154,
	156, 296, 299, 186, 99, 210, 0, 223, 0, 0,
	431, 433, 434, 435, 436, 437, 0, 0, 420, 422,
	423, 424, 425, 426, 0, 229, 225, 219, 0, 429,
	432, 0, 418, 421, 0, 224, 438, 427,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:204
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:229
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:238
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:243
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:252
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:255
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:270
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:283
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:301
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:306
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:327
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:330
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:335
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:366
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:369
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:396
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:399
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:426
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:435
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:440
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:468
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:477
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:486
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:495
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:504
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:536
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:559
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:562
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:586
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:595
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:605
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:626
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:640
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:643
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:672
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:681
		{
			yylex.(*lexer).stack.pop()
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:708
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:713
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:722
		{
			yylex.(*lexer).stack.pop()
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:748
		{
			yyVAL.token = yyDollar[1].token
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:749
		{
			yyVAL.token = yyDollar[1].token
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:761
		{
			yylex.(*lexer).stack.pop()
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:764
		{
			yylex.(*lexer).stack.pop()
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:769
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:802
		{
			yylex.(*lexer).stack.pop()
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:805
		{
			yylex.(*lexer).stack.pop()
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:810
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:817
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:824
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:834
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:840
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 230:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:863
		{
			yylex.(*lexer).stack.pop()
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:868
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:896
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:905
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:914
		{
			yylex.(*lexer).stack.pop()
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:944
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:953
		{
			yylex.(*lexer).stack.pop()
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:956
		{
			yylex.(*lexer).stack.pop()
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1001
		{
			yylex.(*lexer).stack.pop()
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1004
		{
			yylex.(*lexer).stack.pop()
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1016
		{
			yylex.(*lexer).stack.pop()
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1041
		{
			yylex.(*lexer).stack.pop()
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1044
		{
			yylex.(*lexer).stack.pop()
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 315:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1071
		{
			yylex.(*lexer).stack.pop()
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1076
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1096
		{
			yylex.(*lexer).stack.pop()
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			yylex.(*lexer).stack.pop()
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1108
		{
			yylex.(*lexer).stack.pop()
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1113
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 339:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1137
		{
			yylex.(*lexer).stack.pop()
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1142
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1164
		{
			yylex.(*lexer).stack.pop()
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1169
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1186
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1193
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1202
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1234
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1243
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			yylex.(*lexer).stack.pop()
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1258
		{
			yylex.(*lexer).stack.pop()
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1275
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1282
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1291
		{
			yylex.(*lexer).stack.pop()
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1296
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1332
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1341
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1344
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1349
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1357
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1368
		{
			yyVAL.boolean = true
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1369
		{
			yyVAL.boolean = false
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1372
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1384
		{
			yylex.(*lexer).stack.pop()
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1389
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1398
		{
			yylex.(*lexer).stack.pop()
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1401
		{
			yylex.(*lexer).stack.pop()
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1406
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1425
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1434
		{
			yylex.(*lexer).stack.pop()
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1437
		{
			yylex.(*lexer).stack.pop()
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1442
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1461
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1470
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1479
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1488
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1497
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1515
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1524
		{
			yyVAL.ext = nil
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1527
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1532
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 448:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1546
		{
			yyVAL.args = []string{}
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1552
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1555
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
