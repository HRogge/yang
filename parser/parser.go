// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

//line parser.y:53
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1402

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1376

var yyAct = [...]int{

	274, 581, 379, 13, 271, 385, 13, 439, 525, 540,
	488, 259, 495, 295, 508, 270, 375, 356, 348, 338,
	443, 46, 292, 405, 297, 276, 45, 44, 42, 284,
	312, 202, 41, 40, 248, 47, 201, 227, 39, 241,
	38, 37, 217, 196, 209, 186, 178, 165, 406, 369,
	155, 72, 16, 422, 425, 423, 424, 282, 25, 88,
	88, 416, 590, 88, 25, 25, 418, 161, 25, 100,
	101, 102, 237, 536, 3, 335, 264, 88, 444, 445,
	27, 160, 25, 588, 441, 294, 27, 27, 573, 265,
	27, 576, 262, 263, 192, 43, 163, 168, 162, 587,
	163, 285, 162, 4, 27, 183, 567, 190, 566, 534,
	199, 215, 213, 219, 88, 204, 26, 65, 161, 25,
	232, 244, 251, 26, 288, 288, 26, 303, 225, 315,
	440, 327, 341, 351, 359, 255, 378, 533, 388, 161,
	176, 27, 229, 161, 233, 272, 225, 253, 11, 291,
	291, 11, 306, 587, 317, 371, 331, 179, 171, 361,
	370, 368, 367, 344, 319, 168, 366, 365, 343, 532,
	333, 170, 364, 21, 363, 362, 21, 26, 183, 329,
	332, 172, 299, 531, 530, 161, 190, 460, 438, 459,
	437, 238, 278, 237, 482, 481, 199, 264, 429, 267,
	428, 193, 277, 161, 414, 392, 413, 254, 175, 213,
	265, 323, 396, 262, 263, 394, 161, 219, 174, 290,
	290, 228, 305, 137, 397, 136, 407, 232, 173, 561,
	179, 400, 135, 465, 134, 391, 556, 419, 65, 404,
	25, 244, 166, 554, 128, 236, 127, 553, 251, 229,
	181, 233, 188, 412, 126, 197, 125, 211, 218, 417,
	484, 255, 27, 483, 427, 230, 242, 249, 480, 286,
	286, 442, 301, 253, 313, 451, 325, 339, 349, 357,
	434, 376, 436, 386, 288, 111, 446, 110, 431, 420,
	421, 245, 260, 280, 493, 106, 410, 105, 26, 96,
	409, 95, 478, 353, 475, 473, 471, 467, 462, 291,
	166, 457, 315, 454, 257, 456, 296, 296, 455, 308,
	453, 450, 435, 181, 256, 433, 293, 293, 228, 307,
	411, 188, 403, 254, 159, 158, 133, 317, 341, 132,
	131, 197, 458, 130, 124, 123, 273, 319, 351, 12,
	122, 121, 12, 88, 211, 398, 359, 468, 25, 180,
	120, 30, 218, 119, 112, 88, 472, 469, 470, 344,
	25, 88, 230, 474, 343, 378, 25, 371, 463, 290,
	27, 361, 370, 368, 367, 388, 242, 109, 366, 365,
	479, 476, 27, 249, 364, 559, 363, 362, 27, 88,
	238, 401, 237, 104, 25, 187, 264, 88, 267, 94,
	157, 245, 441, 94, 6, 491, 26, 204, 260, 265,
	92, 430, 262, 263, 415, 402, 27, 399, 26, 286,
	393, 498, 513, 503, 26, 113, 108, 570, 50, 528,
	257, 280, 496, 167, 499, 477, 466, 65, 432, 152,
	256, 182, 151, 189, 236, 149, 198, 313, 212, 148,
	147, 543, 26, 146, 145, 144, 231, 243, 250, 143,
	287, 287, 142, 302, 550, 314, 296, 326, 340, 350,
	358, 552, 377, 339, 387, 545, 293, 141, 491, 88,
	485, 140, 139, 349, 25, 138, 117, 116, 557, 115,
	464, 357, 114, 90, 505, 502, 498, 560, 503, 89,
	513, 167, 522, 523, 558, 497, 27, 496, 353, 499,
	376, 504, 562, 585, 182, 528, 580, 568, 518, 535,
	386, 515, 189, 572, 537, 169, 62, 283, 61, 382,
	543, 204, 198, 184, 275, 191, 549, 300, 203, 574,
	63, 224, 26, 550, 258, 212, 548, 451, 234, 555,
	489, 247, 298, 298, 545, 309, 88, 320, 584, 246,
	345, 25, 372, 231, 381, 59, 390, 464, 240, 264,
	502, 584, 591, 239, 526, 58, 88, 243, 571, 347,
	497, 25, 265, 27, 250, 592, 504, 346, 68, 337,
	88, 336, 67, 169, 195, 194, 541, 238, 32, 515,
	509, 521, 501, 27, 539, 538, 184, 321, 204, 268,
	65, 318, 500, 311, 191, 549, 310, 64, 355, 26,
	287, 354, 69, 489, 203, 548, 280, 88, 511, 279,
	269, 60, 25, 516, 514, 577, 578, 579, 512, 26,
	382, 589, 507, 547, 200, 224, 510, 506, 314, 235,
	520, 226, 519, 546, 27, 234, 252, 57, 289, 289,
	526, 304, 334, 316, 593, 330, 342, 352, 360, 328,
	380, 322, 389, 85, 340, 541, 324, 501, 66, 204,
	268, 88, 374, 395, 350, 373, 25, 500, 70, 524,
	26, 261, 358, 384, 383, 71, 494, 223, 222, 88,
	221, 220, 216, 582, 25, 180, 34, 30, 27, 492,
	156, 377, 298, 280, 487, 486, 582, 214, 93, 210,
	208, 387, 547, 207, 33, 49, 27, 48, 88, 36,
	200, 35, 546, 25, 97, 98, 99, 185, 103, 29,
	320, 107, 81, 177, 26, 28, 164, 76, 75, 22,
	84, 490, 88, 77, 20, 27, 78, 25, 187, 82,
	335, 19, 26, 83, 79, 80, 345, 118, 18, 17,
	15, 14, 10, 9, 8, 527, 129, 5, 2, 27,
	204, 268, 252, 1, 372, 154, 153, 0, 0, 0,
	0, 26, 0, 0, 0, 0, 150, 542, 0, 88,
	0, 426, 0, 381, 25, 0, 238, 0, 237, 0,
	0, 0, 0, 390, 0, 26, 0, 88, 289, 575,
	88, 0, 25, 0, 490, 25, 27, 238, 0, 237,
	264, 81, 0, 0, 0, 0, 76, 75, 0, 84,
	73, 74, 77, 265, 27, 78, 316, 27, 82, 0,
	0, 0, 83, 79, 80, 0, 0, 0, 517, 0,
	236, 527, 26, 85, 0, 0, 86, 529, 87, 204,
	268, 65, 342, 0, 0, 0, 542, 0, 0, 0,
	26, 236, 352, 26, 281, 0, 0, 0, 0, 551,
	360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 88, 0, 91, 380,
	7, 25, 51, 0, 30, 408, 0, 583, 0, 389,
	81, 0, 0, 0, 0, 76, 75, 54, 84, 73,
	74, 77, 0, 27, 78, 0, 517, 82, 0, 52,
	53, 83, 79, 80, 0, 0, 0, 0, 23, 24,
	0, 0, 85, 529, 0, 86, 0, 87, 0, 0,
	65, 31, 0, 55, 0, 0, 0, 0, 551, 26,
	0, 0, 0, 0, 56, 0, 0, 447, 448, 449,
	88, 0, 0, 0, 7, 25, 51, 0, 30, 0,
	0, 0, 452, 0, 81, 544, 586, 0, 0, 76,
	75, 54, 84, 73, 74, 77, 0, 27, 78, 586,
	0, 82, 0, 52, 53, 83, 79, 80, 0, 0,
	0, 0, 23, 24, 0, 0, 85, 88, 0, 86,
	0, 87, 25, 461, 65, 31, 0, 55, 0, 0,
	264, 81, 0, 26, 0, 0, 76, 75, 56, 84,
	73, 74, 77, 265, 27, 78, 0, 0, 82, 0,
	0, 0, 83, 79, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 544, 0, 86, 0, 87, 204,
	268, 65, 0, 88, 0, 0, 0, 0, 25, 0,
	26, 0, 0, 0, 281, 266, 264, 81, 267, 0,
	0, 0, 76, 75, 0, 84, 73, 74, 77, 265,
	27, 78, 262, 263, 82, 0, 0, 0, 83, 79,
	80, 0, 0, 0, 0, 88, 0, 0, 0, 85,
	25, 0, 86, 0, 87, 204, 268, 65, 0, 81,
	0, 0, 0, 0, 76, 75, 26, 84, 73, 74,
	77, 0, 27, 78, 0, 0, 82, 335, 0, 0,
	83, 79, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 86, 0, 87, 204, 268, 65,
	0, 88, 0, 0, 0, 0, 25, 0, 26, 0,
	0, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	76, 75, 0, 84, 73, 74, 77, 0, 27, 78,
	0, 0, 82, 0, 0, 0, 83, 79, 80, 0,
	563, 564, 565, 88, 0, 0, 0, 85, 25, 0,
	86, 569, 87, 204, 0, 65, 88, 81, 0, 0,
	0, 25, 76, 75, 26, 84, 73, 74, 77, 0,
	27, 78, 205, 206, 82, 0, 0, 0, 83, 79,
	80, 0, 0, 27, 0, 0, 88, 0, 0, 85,
	0, 25, 86, 238, 87, 237, 0, 65, 0, 264,
	0, 0, 0, 0, 0, 0, 26, 0, 204, 0,
	0, 0, 265, 27, 0, 262, 263, 0, 0, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 204, 268,
	65, 0, 0, 0, 0, 81, 0, 236, 0, 26,
	76, 75, 0, 84, 73, 74, 77, 0, 0, 78,
	0, 0, 82, 0, 0, 0, 83, 79, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	86, 0, 87, 0, 0, 65,
}
var yyPact = [...]int{

	49, -1000, 983, 505, 499, 909, -1000, 408, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 291, 408, 408, 408, -2, 408, 395, 287,
	408, 431, 379, 277, 356, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 430, 498, 495, 493, 492, 408, 355, 352, 343,
	342, 337, 336, 246, 236, 408, 335, 332, 331, 328,
	224, 215, -1000, 491, 488, 487, 483, 468, 465, 461,
	460, 459, 456, 455, 451, 408, 448, 445, 404, 327,
	326, -1000, -1000, 88, -1000, -1000, 364, 161, 148, 88,
	218, 208, 198, 130, 702, -1000, 755, 84, 191, 1239,
	-1000, 46, 70, -1000, -1000, -1000, -1000, -1000, 12, 823,
	1226, 1086, 1030, 1269, 1269, -1000, 559, -1000, 630, 88,
	1128, 1239, 1184, 731, -1000, 482, -1000, 358, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	12, -1000, -1000, 92, 404, -1000, 12, -1000, -1000, -1000,
	-1000, 425, -1000, 400, 684, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 346, -1000, -1000,
	422, -1000, -1000, -1000, -1000, 392, -1000, 420, -1000, -1000,
	-1000, -1000, -1000, -1000, 323, 1239, -1000, -1000, -1000, -1000,
	-1000, 1314, 1314, -1000, 408, 292, 288, 321, 46, -1000,
	-1000, -1000, -1000, -1000, 196, 419, 52, -1000, -1000, -1000,
	-1000, 229, 229, 229, -1000, -24, 802, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 190, 416, 404, 444, 316,
	1226, -1000, -1000, -1000, -1000, -1000, 313, 1086, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 180, 78, 406, 31, 31, 408, 408, 408, 312,
	1030, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 408, 311, 1269, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 309,
	306, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	302, 630, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 179, 408, -1000, 299, -1000, -1000, -1000, 36, 1314,
	-1000, -1000, -1000, -1000, 225, 442, 298, 1239, -1000, -1000,
	-1000, -1000, -1000, 1314, 1314, -1000, 297, 1184, -1000, -1000,
	-1000, -1000, -1000, -1000, 296, 731, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 295, 482, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 441, 293, 358, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 259, -1000, -1000, -1000, -1000, 185,
	-1000, -1000, 184, -1000, -1000, 254, 1314, 251, 88, -1000,
	-1000, -1000, -1000, -1000, 228, -1000, -1000, -1000, -1000, 177,
	-1000, -1000, 92, -1000, -1000, -1000, -1000, -1000, -1000, 593,
	92, 92, -1000, -1000, -1000, -1000, -1000, -1000, 364, 174,
	173, -1000, 159, 127, -1000, -1000, 99, 88, 63, 12,
	-1000, -1000, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	56, 12, -1000, -1000, -1000, 1030, -1000, -1000, -1000, 238,
	234, -1000, -1000, -1000, -1000, -1000, -1000, 92, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 227, 228, -1000, -1000,
	-1000, -1000, -1000, 31, 386, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 220, 593, -1000, 408,
	408, 408, -1000, -1000, -1000, -1000, -1000, -1000, 98, 406,
	408, 433, -1000, -1000, 579, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 79, 56,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 820, -1000, -1000, -1000, -1000, -1000, 81, -1000,
	-1000, -1000, -1000, 88, 88, 88, -1000, 107, 73, 88,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	53, -1000, -1000, -1000, -1000, -1000, -1000, 406, -1000, -1000,
	-1000, -1000, 92, -1000,
}
var yyPgo = [...]int{

	0, 20, 7, 50, 720, 796, 795, 51, 81, 793,
	788, 787, 414, 784, 783, 782, 145, 346, 0, 781,
	780, 52, 779, 778, 771, 764, 170, 759, 756, 47,
	438, 755, 753, 46, 749, 747, 45, 23, 48, 741,
	739, 41, 40, 38, 33, 32, 28, 95, 27, 26,
	21, 35, 737, 735, 734, 733, 730, 44, 729, 727,
	725, 724, 10, 719, 716, 712, 42, 711, 710, 66,
	708, 707, 706, 12, 22, 11, 24, 202, 192, 85,
	13, 101, 705, 704, 703, 5, 544, 701, 25, 699,
	8, 698, 695, 692, 16, 2, 688, 686, 679, 49,
	672, 15, 667, 661, 37, 659, 657, 652, 14, 648,
	644, 643, 641, 640, 4, 639, 632, 631, 628, 17,
	627, 626, 623, 30, 621, 617, 9, 615, 614, 608,
	605, 604, 43, 36, 31, 602, 601, 599, 19, 598,
	597, 589, 18, 585, 583, 578, 39, 575, 569, 561,
	34, 554, 550, 547, 538, 57, 537, 29, 536, 528,
	526, 1, 523,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 86, 87, 88, 88, 89, 89,
	90, 90, 90, 90, 52, 52, 91, 92, 92, 93,
	93, 94, 94, 94, 94, 94, 94, 95, 48, 97,
	97, 97, 97, 97, 97, 97, 97, 96, 98, 98,
	99, 100, 39, 102, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 3, 3, 76, 81, 81, 105, 106,
	106, 107, 107, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 17, 17, 17, 110, 111, 42, 112, 113,
	113, 101, 101, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 116, 51, 117, 117, 118, 118, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 46, 46, 121, 121,
	122, 122, 123, 123, 123, 123, 123, 123, 123, 123,
	125, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 124, 124, 127, 128, 128, 23, 129, 130,
	130, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	133, 134, 49, 135, 136, 136, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 50, 139, 140, 140, 141,
	141, 142, 142, 142, 142, 142, 40, 143, 144, 144,
	145, 145, 146, 146, 146, 146, 41, 147, 148, 149,
	149, 79, 79, 80, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 151, 75, 45, 45,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 152,
	152, 43, 154, 155, 156, 156, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	78, 4, 4, 2, 1, 1, 77, 44, 158, 109,
	109, 159, 160, 160, 161, 161, 161, 161, 161, 162,
	16, 18, 14, 15, 22, 74, 8, 8, 30, 7,
	5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 4, 1, 2,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 4, 2, 1, 1,
	2, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 3, 4, 2, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 1, 3,
	0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -129, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -102, -143, -147,
	-112, -154, -158, -152, -120, 61, -96, -135, -139, -116,
	-91, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 38, 42, 29, 53, 56, 58, 7, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	71, 72, 73, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -4,
	8, 8, 8, 8, 10, 8, 10, 8, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, -5, -6, -3, -4, 6, 8, 8,
	-8, 55, 10, 8, -28, -29, -16, -17, -18, -30,
	10, 10, -8, 10, 10, 10, 10, -32, -33, -21,
	13, -16, -17, -18, -30, -35, -36, 13, -16, -17,
	-18, -30, 10, 10, -130, -131, -132, -16, -17, -18,
	-86, -133, -134, -30, 59, 23, 24, -55, -56, -57,
	-58, -16, -17, -18, -59, 65, -65, -66, -16, -18,
	-67, -68, -70, -71, -30, 76, -103, -104, -81, -74,
	-16, -17, -18, -76, -30, -105, 68, 16, 14, -144,
	-145, -146, -16, -17, -18, -26, -148, -149, -150, -16,
	-17, -18, -86, -88, -79, -80, -77, -78, -151, -75,
	-26, -87, 36, 37, 20, 33, 19, 22, 60, -113,
	-101, -114, -16, -17, -18, -86, -88, -77, -78, -115,
	-26, 74, -155, -156, -157, -81, -16, -17, -18, -86,
	-47, -88, -74, -77, -79, -80, -78, -76, -30, -155,
	-153, -16, -17, -18, -86, -47, -88, -77, -78, -30,
	-121, -122, -123, -16, -17, -18, -86, -88, -124, -51,
	-30, -125, 51, -8, -97, -16, -17, -18, -98, -38,
	-86, -88, -99, -26, -100, 39, -136, -137, -138, -16,
	-17, -18, -86, -133, -134, -30, -140, -141, -142, -16,
	-17, -18, -86, -26, -117, -118, -119, -16, -17, -18,
	-86, -88, -41, -42, -43, -44, -45, -46, -48, -99,
	-49, -50, -30, -92, -93, -94, -16, -17, -18, -95,
	-86, -30, 57, -83, -84, -85, -16, -17, -18, -86,
	-30, -8, -3, 5, -7, 9, -29, -33, 9, 5,
	-36, 9, 5, 9, -132, -37, -38, -37, -4, 8,
	8, 9, -57, 10, 8, 5, 9, -66, -69, 8,
	-69, -69, 77, 79, 80, 78, 9, -104, 10, 8,
	5, -3, 4, 9, -146, 9, -150, 10, 8, -2,
	52, 6, -2, -1, 47, 48, -1, -4, -4, -4,
	9, -114, -4, 9, -157, 9, 9, 9, -123, 10,
	8, -4, 9, -99, -26, 8, 4, 9, -138, -37,
	-37, 9, -142, 9, -119, 9, -94, 4, 9, -85,
	9, 10, 10, 9, 9, -8, -60, -61, -62, -16,
	-17, -18, -63, 66, -72, -73, -74, -47, -75, -76,
	-77, -78, -79, -80, -81, -8, -106, -107, -108, 17,
	63, 45, -109, -95, -110, -81, -111, -30, -159, 69,
	67, 18, -8, -8, -89, -90, -16, -17, -18, -30,
	10, 10, 10, 10, 10, -8, 10, -8, -127, -128,
	-126, -16, -17, -18, -86, -76, -77, -78, -47, -79,
	-80, -30, -101, 9, 9, -8, 9, -62, -1, 9,
	-73, 9, -108, -4, -4, -4, 10, 8, -2, -4,
	4, 9, -90, 9, -126, 9, 10, -8, -8, -8,
	-160, -161, -16, -17, -18, -162, -30, 46, 10, -8,
	9, -161, -2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 410, 0,
	0, 1, 5, 0, 381, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 279,
	71, 74, 0, 21, 30, 41, 278, 73, 95, 0,
	318, 0, 209, 0, 0, 348, 0, 246, 248, 0,
	159, 294, 307, 225, 144, 147, 121, 124, 173, 317,
	327, 208, 362, 388, 359, 360, 245, 167, 293, 306,
	223, 146, 123, 0, 411, 412, 183, 184, 2, 3,
	6, 0, 406, 0, 0, 24, 26, 27, 28, 29,
	402, 403, 400, 202, 203, 204, 401, 0, 31, 34,
	0, 36, 37, 38, 39, 0, 42, 0, 45, 46,
	47, 48, 33, 404, 0, 280, 281, 283, 284, 285,
	286, 51, 51, 289, 0, 0, 0, 0, 75, 76,
	78, 79, 80, 81, 0, 0, 0, 96, 98, 99,
	100, 0, 0, 0, 104, 0, 0, 174, 176, 177,
	178, 179, 180, 181, 182, 0, 0, 0, 0, 0,
	319, 320, 322, 323, 324, 325, 0, 328, 329, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 0, 0, 363, 364, 366, 367, 368, 369, 370,
	371, 372, 373, 374, 375, 376, 377, 378, 379, 0,
	0, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	0, 249, 250, 252, 253, 254, 255, 256, 257, 258,
	259, 0, 0, 133, 0, 160, 161, 162, 163, 164,
	165, 166, 168, 69, 0, 0, 0, 295, 296, 298,
	299, 300, 301, 51, 51, 304, 0, 308, 309, 311,
	312, 313, 314, 315, 0, 226, 227, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 148, 149, 151, 152, 153, 154,
	155, 156, 0, 0, 125, 126, 128, 129, 130, 131,
	132, 409, 413, 382, 0, 23, 25, 32, 40, 0,
	43, 50, 0, 277, 282, 0, 52, 0, 0, 290,
	291, 72, 77, 82, 85, 84, 94, 97, 101, 0,
	102, 103, 0, 106, 107, 108, 172, 175, 186, 189,
	0, 0, 188, 316, 321, 326, 330, 136, 0, 0,
	0, 383, 0, 0, 384, 385, 0, 0, 0, 135,
	207, 212, 0, 361, 365, 387, 349, 247, 251, 272,
	0, 260, 158, 169, 70, 0, 171, 292, 297, 0,
	0, 305, 310, 224, 228, 145, 150, 0, 122, 127,
	407, 35, 44, 287, 288, 134, 0, 86, 87, 89,
	90, 91, 92, 0, 0, 110, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 105, 0, 190, 191, 0,
	0, 0, 196, 197, 198, 199, 200, 201, 0, 0,
	0, 0, 405, 185, 0, 138, 140, 141, 142, 143,
	331, 332, 333, 386, 380, 346, 347, 222, 0, 274,
	275, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	270, 271, 0, 302, 303, 157, 83, 88, 0, 109,
	111, 187, 192, 0, 0, 0, 389, 0, 0, 0,
	391, 137, 139, 273, 276, 170, 93, 193, 194, 195,
	0, 392, 394, 395, 396, 397, 398, 0, 205, 206,
	390, 393, 0, 399,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:160
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:168
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:185
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:208
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:217
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:220
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:235
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:248
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:265
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:270
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:290
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:293
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:323
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:326
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:331
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:353
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:356
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:361
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:383
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:392
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:397
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:425
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:443
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:452
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:461
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:484
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:487
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:493
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:516
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "must", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:525
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:534
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:543
		{
			yylex.(*lexer).stack.pop()
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:546
		{
			yylex.(*lexer).stack.pop()
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:560
		{
			yylex.(*lexer).stack.pop()
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:563
		{
			yylex.(*lexer).stack.pop()
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:568
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:592
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:604
		{
			yylex.(*lexer).stack.pop()
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:619
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:633
		{
			yylex.(*lexer).stack.pop()
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:638
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:647
		{
			yylex.(*lexer).stack.pop()
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:652
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:673
		{
			yyVAL.token = yyDollar[1].token
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:674
		{
			yyVAL.token = yyDollar[1].token
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:677
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:686
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:710
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:717
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:724
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:744
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:753
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:762
		{
			yylex.(*lexer).stack.pop()
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:767
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:795
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:804
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:813
		{
			yylex.(*lexer).stack.pop()
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:843
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:852
		{
			yylex.(*lexer).stack.pop()
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:855
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:877
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:900
		{
			yylex.(*lexer).stack.pop()
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:903
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:915
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:920
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:940
		{
			yylex.(*lexer).stack.pop()
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:943
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:949
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:958
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:970
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:975
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:995
		{
			yylex.(*lexer).stack.pop()
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:998
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1007
		{
			yylex.(*lexer).stack.pop()
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1012
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1063
		{
			yylex.(*lexer).stack.pop()
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1068
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1085
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1092
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1124
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1136
		{
			yylex.(*lexer).stack.pop()
		}
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1139
		{
			yylex.(*lexer).stack.pop()
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1156
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1163
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1172
		{
			yylex.(*lexer).stack.pop()
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1210
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1219
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 382:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1227
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1237
		{
			yyVAL.boolean = true
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1238
		{
			yyVAL.boolean = false
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1241
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1253
		{
			yylex.(*lexer).stack.pop()
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1258
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1267
		{
			yylex.(*lexer).stack.pop()
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1270
		{
			yylex.(*lexer).stack.pop()
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1275
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1303
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1312
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1321
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1330
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1339
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1348
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1357
		{
			yyVAL.ext = nil
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1360
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1371
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1377
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1390
		{
			yyVAL.args = []string{}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
