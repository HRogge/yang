// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1532

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1584

var yyAct = [...]int16{
	278, 618, 626, 13, 391, 452, 13, 329, 328, 568,
	528, 551, 508, 457, 515, 261, 387, 368, 275, 397,
	274, 342, 289, 350, 296, 204, 46, 338, 280, 203,
	360, 45, 317, 243, 44, 47, 288, 42, 229, 41,
	250, 219, 40, 431, 417, 302, 282, 39, 211, 198,
	167, 38, 141, 298, 636, 37, 562, 284, 188, 180,
	21, 163, 286, 21, 165, 72, 164, 72, 635, 478,
	25, 643, 25, 463, 464, 633, 16, 435, 438, 436,
	437, 100, 101, 102, 458, 459, 612, 560, 72, 3,
	429, 609, 27, 25, 27, 194, 165, 170, 164, 559,
	599, 163, 598, 276, 178, 185, 11, 192, 558, 11,
	201, 72, 215, 221, 72, 27, 25, 591, 4, 25,
	234, 246, 253, 557, 292, 292, 616, 308, 556, 320,
	43, 331, 341, 353, 363, 371, 501, 390, 27, 400,
	163, 27, 230, 163, 231, 336, 335, 336, 335, 163,
	255, 173, 295, 295, 500, 311, 381, 322, 356, 227,
	345, 383, 355, 373, 324, 235, 382, 170, 259, 380,
	301, 301, 379, 313, 378, 262, 26, 377, 247, 263,
	185, 181, 376, 195, 177, 227, 375, 304, 192, 343,
	374, 365, 25, 404, 632, 597, 163, 596, 201, 300,
	168, 176, 595, 172, 594, 476, 175, 475, 183, 586,
	190, 215, 584, 199, 27, 213, 220, 408, 451, 221,
	450, 583, 504, 232, 244, 251, 502, 290, 290, 234,
	306, 442, 318, 441, 330, 339, 351, 361, 369, 409,
	388, 299, 398, 246, 162, 217, 412, 416, 163, 420,
	253, 230, 26, 231, 294, 294, 181, 310, 72, 425,
	430, 419, 419, 25, 182, 25, 30, 440, 433, 434,
	168, 427, 456, 426, 235, 72, 447, 640, 255, 499,
	25, 72, 460, 183, 281, 27, 25, 27, 292, 497,
	449, 190, 444, 467, 455, 454, 259, 494, 72, 492,
	247, 199, 27, 262, 72, 490, 439, 263, 27, 25,
	138, 240, 137, 239, 213, 486, 295, 320, 136, 513,
	135, 257, 220, 26, 470, 26, 473, 472, 72, 331,
	607, 27, 232, 25, 301, 130, 479, 129, 341, 471,
	26, 453, 469, 466, 174, 322, 244, 448, 446, 474,
	353, 424, 324, 251, 128, 27, 127, 415, 632, 72,
	363, 336, 335, 256, 25, 483, 345, 238, 371, 26,
	126, 484, 125, 487, 111, 356, 110, 277, 432, 355,
	12, 423, 422, 12, 403, 493, 27, 390, 161, 381,
	491, 290, 160, 26, 383, 343, 373, 400, 624, 382,
	488, 489, 380, 495, 134, 379, 258, 378, 297, 297,
	377, 312, 133, 419, 419, 376, 498, 365, 294, 375,
	318, 132, 131, 374, 26, 106, 124, 105, 511, 72,
	605, 72, 330, 410, 25, 123, 25, 182, 96, 30,
	95, 339, 122, 121, 120, 207, 208, 533, 518, 257,
	119, 112, 554, 351, 109, 524, 27, 516, 27, 104,
	279, 455, 454, 361, 94, 535, 6, 443, 72, 428,
	637, 369, 92, 25, 169, 414, 503, 571, 519, 521,
	411, 206, 184, 405, 191, 94, 143, 200, 113, 214,
	388, 256, 108, 606, 26, 27, 26, 233, 245, 252,
	398, 291, 291, 496, 307, 582, 319, 624, 511, 340,
	352, 362, 370, 72, 389, 413, 399, 485, 25, 189,
	587, 72, 573, 575, 50, 445, 25, 588, 159, 590,
	518, 509, 533, 26, 258, 158, 156, 524, 592, 516,
	27, 155, 154, 152, 169, 151, 150, 600, 27, 149,
	535, 554, 148, 147, 146, 552, 601, 184, 145, 144,
	519, 521, 608, 517, 117, 191, 116, 115, 571, 114,
	202, 394, 297, 206, 90, 200, 72, 610, 26, 89,
	569, 25, 254, 622, 293, 293, 26, 309, 214, 321,
	617, 539, 344, 354, 364, 372, 331, 392, 621, 401,
	629, 467, 630, 27, 615, 625, 233, 576, 540, 62,
	287, 509, 61, 573, 575, 305, 331, 63, 621, 638,
	245, 171, 260, 479, 249, 248, 629, 252, 641, 186,
	639, 193, 523, 59, 205, 72, 242, 226, 642, 241,
	25, 26, 58, 359, 236, 517, 358, 68, 303, 303,
	349, 314, 348, 325, 552, 334, 67, 357, 202, 384,
	197, 393, 27, 402, 196, 291, 505, 32, 72, 567,
	566, 569, 326, 25, 522, 240, 578, 239, 323, 316,
	525, 315, 64, 367, 366, 69, 283, 206, 548, 549,
	406, 171, 273, 60, 319, 27, 614, 538, 576, 330,
	26, 619, 536, 627, 186, 534, 561, 532, 563, 564,
	254, 531, 193, 565, 523, 340, 529, 520, 577, 330,
	527, 619, 205, 526, 237, 580, 581, 352, 228, 627,
	57, 238, 346, 26, 142, 337, 66, 362, 386, 385,
	72, 585, 93, 226, 70, 370, 550, 240, 293, 72,
	544, 546, 264, 236, 25, 333, 522, 332, 97, 98,
	99, 574, 103, 65, 389, 107, 396, 578, 395, 71,
	72, 514, 407, 225, 399, 25, 27, 321, 530, 72,
	224, 223, 222, 218, 25, 189, 34, 512, 507, 506,
	394, 118, 216, 327, 212, 86, 543, 27, 344, 520,
	545, 206, 272, 210, 541, 510, 27, 209, 33, 577,
	354, 49, 303, 48, 26, 36, 35, 153, 418, 542,
	364, 157, 547, 187, 29, 179, 28, 166, 372, 553,
	22, 20, 19, 18, 17, 26, 15, 14, 613, 10,
	9, 325, 8, 5, 26, 72, 634, 392, 2, 1,
	25, 140, 574, 334, 570, 139, 0, 401, 267, 81,
	0, 0, 0, 0, 76, 75, 0, 85, 73, 74,
	77, 268, 27, 78, 357, 0, 83, 0, 0, 0,
	84, 79, 80, 0, 644, 510, 0, 645, 0, 0,
	72, 86, 384, 0, 87, 25, 88, 206, 272, 82,
	0, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	26, 393, 0, 0, 285, 0, 268, 27, 0, 0,
	0, 402, 0, 0, 0, 0, 0, 0, 553, 0,
	0, 0, 0, 0, 72, 0, 0, 572, 0, 25,
	0, 421, 206, 272, 82, 570, 269, 267, 81, 270,
	0, 0, 0, 76, 75, 26, 85, 73, 74, 77,
	268, 27, 78, 265, 266, 83, 0, 537, 0, 84,
	79, 80, 0, 0, 0, 620, 555, 628, 0, 0,
	86, 0, 0, 87, 0, 88, 206, 272, 82, 72,
	0, 0, 0, 0, 25, 620, 0, 0, 239, 26,
	0, 579, 267, 628, 461, 462, 0, 465, 0, 0,
	271, 0, 0, 0, 0, 268, 27, 0, 265, 266,
	468, 0, 0, 0, 0, 0, 0, 0, 572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 537, 0, 26, 0, 0, 0, 0, 0,
	72, 0, 477, 0, 7, 25, 51, 0, 30, 0,
	480, 481, 0, 0, 81, 555, 0, 0, 0, 76,
	75, 54, 85, 73, 74, 77, 0, 27, 78, 0,
	0, 83, 579, 52, 53, 84, 79, 80, 0, 0,
	0, 0, 23, 24, 0, 0, 86, 0, 0, 87,
	0, 88, 0, 0, 82, 31, 0, 55, 0, 0,
	334, 0, 623, 0, 631, 26, 0, 0, 0, 0,
	56, 0, 0, 72, 0, 91, 0, 7, 25, 51,
	334, 30, 623, 0, 0, 0, 0, 81, 0, 0,
	631, 0, 76, 75, 54, 85, 73, 74, 77, 0,
	27, 78, 0, 0, 83, 0, 52, 53, 84, 79,
	80, 0, 0, 0, 0, 23, 24, 0, 0, 86,
	0, 0, 87, 0, 88, 0, 0, 82, 31, 0,
	55, 72, 0, 611, 0, 0, 25, 0, 26, 0,
	0, 0, 0, 56, 267, 81, 0, 0, 0, 0,
	76, 75, 0, 85, 73, 74, 77, 268, 27, 78,
	0, 0, 83, 0, 0, 589, 84, 79, 80, 0,
	240, 0, 239, 0, 0, 0, 267, 86, 270, 0,
	87, 72, 88, 206, 272, 82, 25, 0, 240, 268,
	239, 0, 265, 266, 267, 0, 26, 0, 0, 0,
	285, 0, 0, 0, 0, 593, 0, 268, 27, 0,
	265, 266, 0, 0, 0, 0, 0, 82, 602, 603,
	604, 0, 0, 0, 0, 0, 238, 0, 0, 0,
	0, 0, 0, 206, 272, 82, 72, 0, 482, 0,
	0, 25, 0, 0, 238, 0, 26, 0, 0, 0,
	81, 0, 0, 0, 0, 76, 75, 271, 85, 73,
	74, 77, 0, 27, 78, 0, 0, 83, 347, 0,
	0, 84, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 87, 72, 88, 206, 272,
	82, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 26, 0, 0, 0, 76, 75, 0, 85, 73,
	74, 77, 0, 27, 78, 0, 0, 83, 347, 0,
	0, 84, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 87, 72, 88, 206, 272,
	82, 25, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 26, 0, 0, 0, 76, 75, 0, 85, 73,
	74, 77, 0, 27, 78, 0, 0, 83, 0, 0,
	0, 84, 79, 80, 0, 72, 0, 0, 0, 0,
	25, 0, 86, 0, 0, 87, 0, 88, 206, 81,
	82, 0, 0, 0, 76, 75, 0, 85, 73, 74,
	77, 26, 27, 78, 0, 0, 83, 0, 0, 0,
	84, 79, 80, 0, 72, 0, 0, 0, 0, 25,
	0, 86, 0, 0, 87, 0, 88, 0, 81, 82,
	0, 0, 0, 76, 75, 0, 85, 0, 0, 77,
	26, 27, 78, 0, 0, 83, 347, 0, 0, 84,
	79, 80, 240, 0, 239, 0, 0, 0, 267, 0,
	270, 0, 0, 0, 0, 0, 206, 272, 0, 72,
	0, 268, 0, 0, 265, 266, 0, 0, 0, 26,
	0, 0, 0, 81, 0, 0, 0, 0, 76, 75,
	0, 85, 73, 74, 77, 0, 0, 78, 0, 82,
	83, 0, 0, 0, 84, 79, 80, 0, 238, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 87, 0,
	88, 0, 0, 82,
}

var yyPact = [...]int16{
	64, -1000, 1053, 575, 570, 1126, -1000, 459, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 430, 459, 459, 459, 8, 459, 451, 417,
	459, 487, 446, 366, 443, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 483, 565, 563, 562, 560, 459, 442, 436, 435,
	434, 427, 418, 362, 346, 327, 414, 413, 404, 396,
	310, 302, 480, 555, 554, 550, 549, 548, 545, 542,
	541, 539, 459, 538, 537, 532, 459, 531, 524, 384,
	380, -1000, -1000, 88, -1000, -1000, 569, 193, 141, 88,
	196, 191, 174, 94, 251, -1000, 772, 85, 173, 422,
	-1000, 180, 107, -1000, -1000, -1000, -1000, -1000, 6, 661,
	1428, 927, 838, 1234, 1234, -1000, 883, -1000, 742, -1000,
	274, 1339, 422, 1389, 1467, -1000, 514, -1000, 628, 56,
	480, -1000, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 6, -1000, -1000, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, 478, -1000, 291, 763, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 424,
	-1000, -1000, 475, -1000, -1000, -1000, -1000, 506, -1000, 470,
	-1000, -1000, -1000, -1000, -1000, -1000, 348, 422, -1000, -1000,
	-1000, -1000, -1000, 1522, 1522, -1000, 459, 374, 373, 342,
	180, -1000, -1000, -1000, -1000, -1000, 263, 464, 81, -1000,
	-1000, -1000, -1000, 370, 370, 370, -1000, -2, 297, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 223, 462, 480,
	521, 339, 1428, -1000, -1000, -1000, -1000, -1000, 338, 927,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 210, 289, 456, 37, 37, 459,
	459, -11, 459, 334, 838, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 459, 333, 1234, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 330, 318, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 317, 742, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 197, 459, 60, -1000,
	-1000, -1000, -1000, -1000, -1000, 459, 459, 1289, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 363, 513, 306, 422,
	-1000, -1000, -1000, -1000, -1000, 1522, 1522, -1000, 296, 1389,
	-1000, -1000, -1000, -1000, -1000, -1000, 290, 1467, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, 514, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 499, 280, 628, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 270, -1000, -1000, -1000,
	-1000, 144, -1000, -1000, 126, -1000, -1000, 217, 1522, -1000,
	213, 88, -1000, -1000, -1000, -1000, -1000, 253, -1000, -1000,
	-1000, -1000, 1498, -1000, -1000, 56, -1000, -1000, -1000, -1000,
	-1000, -1000, 733, 56, 56, -1000, -1000, -1000, -1000, -1000,
	-1000, 569, 118, 113, -1000, -1000, 98, 89, -1000, -1000,
	77, 88, 46, 56, 56, 6, -1000, -1000, 88, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 982, 6, -1000, -1000,
	88, 88, -1000, -1000, 838, -1000, -1000, -1000, 212, 203,
	-1000, -1000, -1000, -1000, -1000, -1000, 56, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 200, 253, -1000, -1000,
	-1000, -1000, -1000, 37, 1216, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 108, 733, -1000, -1000,
	459, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 194, 187,
	92, 456, 37, 459, 459, 459, 425, 489, -1000, -1000,
	321, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 82, 982, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1184, -1000, -1000, -1000, -1000, -1000, 76, -1000,
	-1000, -1000, -1000, 88, -1000, 58, -1000, 352, -1000, 104,
	65, 56, 6, 6, 6, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 59, 274, -15, 461, -1000, -1000,
	-1000, -1000, -1000, -1000, 456, 268, -1000, -1000, -1000, -1000,
	-1000, -1000, 456, -1000, -1000, -1000, 61, -1000, -1000, 56,
	-1000, -1000, 56, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 13, 5, 52, 734, 855, 851, 524, 244, 849,
	848, 843, 466, 842, 840, 839, 103, 377, 0, 837,
	836, 76, 834, 833, 832, 831, 57, 830, 827, 50,
	826, 825, 59, 824, 823, 58, 44, 818, 816, 815,
	55, 51, 47, 42, 39, 37, 130, 34, 31, 26,
	35, 813, 811, 808, 807, 803, 48, 794, 792, 789,
	788, 12, 787, 786, 783, 41, 782, 781, 43, 780,
	773, 771, 14, 24, 15, 45, 284, 46, 241, 199,
	22, 769, 768, 766, 19, 460, 763, 8, 7, 757,
	755, 752, 28, 746, 11, 744, 739, 738, 16, 4,
	736, 735, 27, 21, 732, 20, 730, 728, 38, 724,
	723, 720, 10, 716, 711, 707, 705, 702, 697, 696,
	693, 692, 18, 686, 685, 684, 683, 17, 682, 681,
	679, 32, 678, 672, 9, 670, 669, 667, 664, 660,
	49, 29, 25, 656, 652, 650, 23, 647, 646, 643,
	30, 642, 639, 636, 33, 633, 625, 624, 40, 622,
	53, 617, 615, 612, 62, 610, 36, 609, 608, 605,
	2, 602, 591, 590, 1, 583,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	30, 31, 31, 21, 32, 32, 32, 32, 32, 32,
	19, 33, 34, 34, 35, 35, 35, 35, 35, 20,
	20, 36, 36, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 37,
	37, 24, 24, 53, 54, 54, 55, 55, 56, 56,
	56, 56, 57, 57, 58, 59, 59, 60, 60, 61,
	61, 61, 61, 62, 25, 63, 64, 64, 65, 65,
	65, 65, 65, 65, 65, 66, 67, 69, 70, 68,
	71, 71, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 52, 52, 81, 82, 82, 83, 83, 84, 84,
	84, 84, 84, 46, 46, 86, 87, 87, 88, 88,
	88, 88, 88, 89, 90, 85, 91, 92, 92, 93,
	93, 94, 94, 94, 94, 51, 51, 95, 96, 96,
	97, 97, 98, 98, 98, 98, 98, 98, 99, 47,
	101, 101, 102, 102, 102, 102, 102, 102, 102, 100,
	103, 104, 38, 106, 107, 107, 108, 108, 108, 108,
	108, 108, 108, 3, 3, 75, 80, 80, 109, 110,
	110, 111, 111, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 113, 113, 118, 118, 118, 119, 119, 117,
	17, 17, 17, 116, 41, 120, 121, 121, 105, 105,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 123,
	124, 50, 125, 125, 126, 126, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 45, 45, 129, 129, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 133, 134, 134,
	134, 134, 134, 134, 134, 134, 134, 134, 134, 132,
	132, 135, 136, 136, 23, 137, 138, 138, 139, 139,
	140, 140, 140, 140, 140, 140, 140, 141, 142, 48,
	143, 144, 144, 145, 145, 146, 146, 146, 146, 146,
	146, 146, 49, 147, 148, 148, 149, 149, 150, 150,
	150, 150, 150, 39, 151, 152, 152, 153, 153, 154,
	154, 154, 154, 40, 155, 156, 157, 157, 78, 78,
	79, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 160, 160, 159, 74, 44, 44,
	162, 162, 162, 162, 162, 162, 162, 162, 162, 161,
	161, 42, 163, 164, 165, 165, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 77, 4, 4, 2, 2, 1, 1, 76, 43,
	167, 115, 115, 168, 169, 169, 170, 170, 170, 170,
	170, 171, 114, 114, 172, 173, 173, 174, 174, 174,
	174, 174, 175, 16, 18, 14, 15, 22, 73, 8,
	8, 7, 5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 2, 2, 4, 1,
	2, 1, 1, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 4,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 2, 1, 3, 3,
	3, 3, 3, 3, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 1, 1, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 2, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 4, 2, 1, 1, 2, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 1, 3, 4,
	2, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 3, 2, 4, 2, 1, 2, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 1,
	3, 3, 0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 72, 34, -30, -33,
	15, 62, -137, -53, -63, -38, -39, -40, -41, -42,
	-43, -44, -45, -46, -47, -48, -49, -50, -51, -52,
	-7, 13, 40, 41, 28, 64, 77, -106, -151, -155,
	-120, -163, -167, -161, -128, -86, -100, -143, -147, -124,
	-95, -81, 7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	73, 74, 75, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, 10,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -5,
	-6, -3, -4, 6, 4, 4, 4, 4, 4, 4,
	4, 4, 4, -4, 4, 4, 4, -4, 4, 4,
	8, 8, -8, 55, 10, 8, -28, -29, -16, -17,
	-18, -7, 10, 10, -8, 10, 10, 10, 10, -31,
	-32, -21, 13, -16, -17, -18, -7, -34, -35, 13,
	-16, -17, -18, -7, 10, 10, -138, -139, -140, -16,
	-17, -18, -85, -141, -142, -7, 59, 23, 24, -54,
	-55, -56, -57, -16, -17, -18, -58, 65, -64, -65,
	-16, -18, -66, -67, -69, -70, -7, 78, -107, -108,
	-80, -73, -16, -17, -18, -75, -7, -109, 70, 16,
	14, -152, -153, -154, -16, -17, -18, -26, -156, -157,
	-158, -16, -17, -18, -85, -92, -78, -79, -76, -77,
	-159, -74, -160, -26, -91, 36, 37, 20, 33, 19,
	22, 83, 60, -121, -105, -122, -16, -17, -18, -85,
	-92, -76, -77, -123, -26, 76, -164, -165, -166, -80,
	-16, -17, -18, -85, -46, -92, -73, -76, -160, -78,
	-79, -77, -75, -7, -164, -162, -16, -17, -18, -85,
	-46, -92, -76, -77, -7, -129, -130, -131, -16, -17,
	-18, -85, -92, -132, -50, -7, -133, 51, -87, -88,
	-16, -18, -89, -90, -7, 88, 87, -101, -102, -16,
	-17, -18, -103, -26, -85, -92, -104, 39, -144, -145,
	-146, -16, -17, -18, -85, -141, -142, -7, -148, -149,
	-150, -16, -17, -18, -85, -26, -125, -126, -127, -16,
	-17, -18, -85, -92, -40, -41, -42, -43, -44, -45,
	-47, -103, -48, -49, -7, -96, -97, -98, -16, -17,
	-18, -99, -85, -7, 57, -82, -83, -84, -16, -17,
	-18, -85, -7, -8, -3, 5, -7, 9, -29, -32,
	9, 5, -35, 9, 5, 9, -140, -36, -37, -26,
	-36, -4, 8, 8, 9, -56, 10, 8, 5, 9,
	-65, -68, 8, -68, -68, 79, 81, 82, 80, 9,
	-108, 10, 8, 5, -3, 4, 9, -154, 9, -158,
	10, 8, -2, 52, 6, 5, -2, -1, 47, 48,
	-1, -4, -4, 84, 85, -4, 9, -122, -4, 9,
	-166, 9, 9, 9, -131, 10, 8, -4, 9, -88,
	-4, -4, 9, -102, 8, 4, 9, -146, -36, -36,
	9, -150, 9, -127, 9, -98, 4, 9, -84, 9,
	10, 10, 9, -26, 9, -8, -59, -60, -61, -16,
	-17, -18, -62, 66, -71, -72, -73, -46, -74, -75,
	-76, -77, -78, -79, -80, -8, -110, -111, -112, -113,
	45, -114, -115, -99, -116, -80, -117, -7, -118, -172,
	-168, 71, 86, 63, 17, 67, 18, 89, -8, -8,
	-93, -94, -16, -17, -18, -7, 10, 10, 10, 10,
	10, -8, 10, -8, -8, -8, -135, -136, -134, -16,
	-17, -18, -85, -75, -76, -77, -46, -78, -79, -7,
	-8, -8, -105, 9, 9, -8, 9, -61, -1, 9,
	-72, 9, -112, -4, 10, 8, 10, 8, 10, 8,
	-2, -1, -4, -4, -4, 5, 4, 9, -94, 9,
	-134, 9, 10, -8, -119, -87, 68, -173, -174, -16,
	-17, -18, -175, -7, 46, -169, -170, -16, -17, -18,
	-171, -7, 90, 10, -8, 9, 69, 9, -174, -2,
	9, -170, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 5, 0, 402, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 296,
	71, 74, 0, 21, 30, 41, 295, 73, 95, 0,
	335, 0, 226, 0, 0, 368, 0, 263, 265, 133,
	0, 0, 311, 324, 242, 155, 158, 121, 124, 0,
	443, 444, 193, 194, 183, 334, 344, 225, 382, 410,
	379, 380, 262, 135, 179, 310, 323, 240, 157, 123,
	2, 3, 6, 0, 439, 0, 0, 24, 26, 27,
	28, 29, 435, 436, 433, 220, 221, 222, 434, 0,
	31, 34, 0, 36, 37, 38, 39, 0, 42, 0,
	45, 46, 47, 48, 33, 437, 0, 297, 298, 300,
	301, 302, 303, 51, 51, 306, 0, 0, 0, 0,
	75, 76, 78, 79, 80, 81, 0, 0, 0, 96,
	98, 99, 100, 0, 0, 0, 104, 0, 0, 184,
	186, 187, 188, 189, 190, 191, 192, 0, 0, 0,
	0, 0, 336, 337, 339, 340, 341, 342, 0, 345,
	346, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 230, 231, 232, 233,
	234, 235, 236, 237, 238, 0, 0, 383, 384, 386,
	387, 388, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 0, 0, 370, 371, 372, 373,
	374, 375, 376, 377, 378, 0, 266, 267, 269, 270,
	271, 272, 273, 274, 275, 276, 0, 0, 0, 136,
	138, 139, 140, 141, 142, 0, 0, 0, 170, 172,
	173, 174, 175, 176, 177, 178, 0, 0, 0, 312,
	313, 315, 316, 317, 318, 51, 51, 321, 0, 325,
	326, 328, 329, 330, 331, 332, 0, 243, 244, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 0, 159, 160, 162, 163,
	164, 165, 166, 167, 0, 0, 125, 126, 128, 129,
	130, 131, 132, 441, 445, 403, 0, 23, 25, 32,
	40, 0, 43, 50, 0, 294, 299, 0, 52, 69,
	0, 0, 307, 308, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 182,
	185, 196, 199, 0, 0, 198, 333, 338, 343, 347,
	147, 0, 0, 0, 404, 405, 0, 0, 406, 407,
	0, 0, 0, 0, 0, 146, 224, 229, 0, 381,
	385, 409, 369, 264, 268, 289, 0, 277, 134, 137,
	0, 0, 169, 171, 0, 181, 309, 314, 0, 0,
	322, 327, 241, 245, 156, 161, 0, 122, 127, 440,
	35, 44, 304, 70, 305, 145, 0, 86, 87, 89,
	90, 91, 92, 0, 0, 110, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 105, 0, 200, 201, 203,
	0, 205, 206, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 438, 195,
	0, 149, 151, 152, 153, 154, 348, 349, 350, 408,
	401, 366, 367, 364, 365, 239, 0, 291, 292, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	143, 144, 0, 319, 320, 168, 83, 88, 0, 109,
	111, 197, 202, 0, 212, 0, 422, 0, 411, 0,
	0, 0, 214, 215, 216, 424, 413, 148, 150, 290,
	293, 180, 93, 204, 0, 217, 0, 0, 425, 427,
	428, 429, 430, 431, 0, 0, 414, 416, 417, 418,
	419, 420, 0, 223, 219, 213, 0, 423, 426, 0,
	412, 415, 0, 218, 432, 421,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:185
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:202
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:225
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:234
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:237
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:252
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:265
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:282
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:287
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:307
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:310
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:340
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:343
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:348
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:370
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:373
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:378
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:400
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:409
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:414
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:442
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:451
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:460
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:469
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:478
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:501
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:504
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:533
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:536
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:541
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:560
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:579
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:588
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			yylex.(*lexer).stack.pop()
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:600
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:617
		{
			yylex.(*lexer).stack.pop()
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:646
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:655
		{
			yylex.(*lexer).stack.pop()
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:673
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:682
		{
			yylex.(*lexer).stack.pop()
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:687
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:696
		{
			yylex.(*lexer).stack.pop()
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:701
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:722
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:723
		{
			yyVAL.token = yyDollar[1].token
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:726
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:735
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:738
		{
			yylex.(*lexer).stack.pop()
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:743
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:760
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yylex.(*lexer).stack.pop()
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:779
		{
			yylex.(*lexer).stack.pop()
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:784
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:791
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:798
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:808
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:814
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:828
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:837
		{
			yylex.(*lexer).stack.pop()
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:842
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:870
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:888
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:918
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:927
		{
			yylex.(*lexer).stack.pop()
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:930
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:952
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:975
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:978
		{
			yylex.(*lexer).stack.pop()
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:990
		{
			yylex.(*lexer).stack.pop()
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:995
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1015
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1018
		{
			yylex.(*lexer).stack.pop()
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1024
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1033
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1045
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1070
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1073
		{
			yylex.(*lexer).stack.pop()
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1082
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1087
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1111
		{
			yylex.(*lexer).stack.pop()
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1116
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1138
		{
			yylex.(*lexer).stack.pop()
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1143
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1160
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1167
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1176
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1201
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1229
		{
			yylex.(*lexer).stack.pop()
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1232
		{
			yylex.(*lexer).stack.pop()
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1249
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1256
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1265
		{
			yylex.(*lexer).stack.pop()
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1270
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1315
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1318
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1331
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1342
		{
			yyVAL.boolean = true
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1343
		{
			yyVAL.boolean = false
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1346
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1358
		{
			yylex.(*lexer).stack.pop()
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1363
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			yylex.(*lexer).stack.pop()
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1375
		{
			yylex.(*lexer).stack.pop()
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1380
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1399
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1408
		{
			yylex.(*lexer).stack.pop()
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1411
		{
			yylex.(*lexer).stack.pop()
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1416
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1444
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1489
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1498
		{
			yyVAL.ext = nil
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1501
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1520
		{
			yyVAL.args = []string{}
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1526
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1529
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
