// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426
const kywd_error_app_tag = 57427
const kywd_error_message = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1495

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1514

var yyAct = [...]int{

	279, 453, 611, 13, 330, 329, 13, 276, 297, 262,
	566, 458, 549, 509, 275, 392, 303, 516, 529, 361,
	301, 418, 369, 398, 351, 388, 339, 43, 318, 47,
	290, 343, 205, 289, 300, 283, 204, 251, 158, 46,
	212, 299, 45, 230, 199, 189, 281, 44, 16, 244,
	181, 168, 464, 465, 42, 72, 41, 560, 40, 39,
	287, 38, 89, 164, 37, 604, 25, 25, 432, 459,
	460, 220, 436, 439, 437, 438, 89, 618, 89, 589,
	430, 25, 282, 25, 101, 102, 103, 3, 27, 27,
	607, 166, 163, 165, 166, 595, 165, 594, 171, 195,
	558, 179, 164, 27, 557, 27, 186, 593, 193, 592,
	477, 202, 476, 216, 222, 617, 4, 174, 456, 455,
	514, 235, 247, 254, 26, 293, 293, 25, 309, 232,
	321, 228, 332, 342, 354, 364, 372, 236, 391, 26,
	401, 164, 277, 258, 164, 11, 164, 228, 11, 27,
	556, 231, 295, 295, 182, 311, 173, 257, 260, 325,
	302, 302, 164, 314, 263, 454, 357, 382, 171, 256,
	356, 296, 296, 555, 312, 384, 323, 554, 383, 346,
	218, 186, 374, 381, 502, 26, 305, 501, 196, 193,
	380, 178, 379, 175, 378, 377, 405, 376, 89, 202,
	375, 164, 177, 25, 183, 259, 30, 298, 298, 452,
	313, 451, 216, 443, 428, 442, 427, 176, 584, 409,
	222, 139, 407, 138, 137, 27, 136, 421, 582, 182,
	235, 410, 581, 131, 413, 130, 505, 129, 232, 128,
	169, 503, 500, 417, 247, 127, 236, 126, 184, 404,
	191, 254, 426, 200, 498, 214, 221, 112, 485, 111,
	231, 26, 495, 233, 245, 252, 493, 291, 291, 457,
	307, 258, 319, 441, 331, 340, 352, 362, 370, 445,
	389, 461, 399, 468, 278, 257, 260, 12, 450, 293,
	12, 431, 263, 448, 434, 435, 491, 256, 89, 487,
	620, 474, 107, 25, 106, 97, 433, 96, 473, 472,
	169, 470, 467, 449, 447, 425, 295, 416, 321, 424,
	423, 89, 471, 184, 302, 27, 25, 162, 161, 135,
	332, 191, 134, 259, 480, 296, 133, 208, 209, 342,
	89, 200, 602, 132, 125, 25, 475, 325, 27, 124,
	123, 354, 122, 121, 214, 120, 113, 110, 105, 456,
	455, 364, 221, 89, 323, 484, 95, 27, 6, 372,
	444, 298, 233, 207, 93, 488, 337, 336, 489, 490,
	492, 429, 170, 357, 26, 346, 245, 356, 391, 415,
	185, 494, 192, 252, 412, 201, 406, 215, 401, 89,
	382, 621, 114, 26, 25, 234, 246, 253, 384, 292,
	292, 383, 308, 496, 320, 374, 381, 341, 353, 363,
	371, 499, 390, 380, 400, 379, 27, 378, 377, 512,
	376, 291, 109, 375, 95, 160, 615, 601, 617, 89,
	497, 479, 517, 519, 25, 486, 446, 155, 154, 152,
	520, 151, 170, 552, 524, 610, 150, 148, 89, 533,
	319, 518, 26, 25, 525, 185, 27, 147, 523, 522,
	146, 145, 331, 192, 535, 144, 143, 142, 569, 141,
	140, 340, 118, 201, 117, 27, 116, 115, 91, 90,
	539, 62, 288, 352, 571, 61, 215, 306, 576, 63,
	580, 261, 250, 362, 249, 574, 59, 243, 395, 512,
	207, 370, 575, 573, 234, 506, 521, 337, 336, 242,
	58, 26, 585, 360, 517, 519, 586, 359, 246, 526,
	389, 68, 520, 588, 350, 253, 524, 546, 547, 349,
	399, 50, 596, 518, 533, 67, 525, 590, 198, 552,
	523, 522, 197, 597, 32, 559, 565, 561, 562, 535,
	572, 603, 563, 564, 89, 89, 569, 327, 324, 25,
	25, 510, 317, 292, 578, 579, 605, 316, 89, 64,
	414, 368, 571, 25, 190, 367, 576, 69, 468, 284,
	583, 27, 27, 574, 332, 550, 614, 274, 521, 609,
	575, 573, 320, 60, 538, 27, 536, 89, 534, 408,
	332, 614, 25, 622, 480, 532, 530, 207, 528, 623,
	567, 285, 527, 341, 21, 238, 229, 21, 26, 57,
	347, 338, 159, 66, 27, 353, 387, 386, 70, 172,
	94, 26, 337, 336, 548, 363, 265, 187, 572, 194,
	334, 510, 206, 371, 280, 227, 98, 99, 100, 333,
	104, 65, 237, 108, 397, 396, 304, 304, 71, 315,
	26, 326, 390, 335, 515, 358, 226, 385, 89, 394,
	440, 403, 400, 25, 608, 241, 225, 240, 224, 119,
	619, 550, 223, 219, 89, 34, 513, 508, 507, 25,
	217, 241, 213, 240, 211, 27, 210, 268, 567, 172,
	33, 49, 48, 511, 36, 149, 624, 35, 419, 153,
	269, 27, 187, 266, 267, 188, 29, 180, 28, 167,
	194, 22, 20, 19, 18, 17, 331, 551, 612, 239,
	206, 26, 15, 248, 264, 89, 207, 273, 82, 14,
	25, 190, 331, 612, 344, 239, 366, 26, 10, 89,
	9, 227, 568, 8, 5, 203, 241, 2, 272, 543,
	545, 237, 27, 1, 157, 156, 89, 255, 89, 294,
	294, 25, 310, 25, 322, 0, 0, 345, 355, 365,
	373, 89, 393, 511, 402, 0, 25, 531, 0, 0,
	0, 0, 0, 27, 268, 27, 0, 0, 26, 395,
	0, 0, 0, 0, 0, 542, 0, 269, 27, 544,
	328, 540, 86, 0, 0, 0, 420, 420, 207, 273,
	304, 0, 0, 551, 0, 0, 541, 0, 0, 26,
	422, 26, 0, 207, 273, 82, 0, 0, 0, 0,
	568, 0, 0, 203, 26, 0, 0, 0, 0, 326,
	0, 0, 0, 89, 0, 248, 0, 0, 25, 0,
	0, 335, 264, 0, 0, 0, 268, 81, 0, 0,
	613, 0, 76, 75, 0, 85, 73, 74, 77, 269,
	27, 78, 358, 0, 83, 613, 0, 0, 84, 79,
	80, 0, 0, 462, 463, 255, 466, 0, 0, 86,
	385, 0, 87, 89, 88, 207, 273, 82, 25, 469,
	0, 0, 0, 0, 0, 0, 26, 81, 0, 394,
	286, 0, 76, 75, 0, 85, 73, 74, 77, 403,
	27, 78, 0, 294, 83, 348, 89, 0, 84, 79,
	80, 25, 0, 241, 0, 240, 0, 0, 0, 86,
	344, 478, 87, 0, 88, 207, 273, 82, 0, 481,
	482, 0, 322, 27, 0, 0, 26, 0, 420, 420,
	0, 241, 366, 240, 0, 537, 0, 268, 0, 271,
	0, 0, 0, 345, 553, 0, 0, 0, 0, 0,
	269, 0, 0, 266, 267, 355, 89, 239, 411, 26,
	0, 25, 183, 0, 30, 365, 0, 0, 0, 577,
	0, 0, 0, 373, 0, 0, 0, 0, 82, 0,
	0, 89, 0, 27, 0, 239, 25, 0, 0, 0,
	0, 504, 393, 270, 268, 81, 271, 0, 0, 0,
	76, 75, 402, 85, 73, 74, 77, 269, 27, 78,
	266, 267, 83, 0, 0, 0, 84, 79, 80, 26,
	537, 0, 0, 89, 0, 606, 0, 86, 25, 0,
	87, 0, 88, 207, 273, 82, 268, 81, 0, 0,
	553, 0, 76, 75, 26, 85, 73, 74, 77, 269,
	27, 78, 0, 0, 83, 272, 0, 577, 84, 79,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 87, 0, 88, 207, 273, 82, 0, 0,
	0, 0, 570, 0, 0, 335, 26, 616, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 616, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 0, 0, 587, 0, 0,
	0, 0, 241, 0, 240, 598, 599, 600, 268, 89,
	271, 92, 0, 7, 25, 51, 0, 30, 0, 0,
	0, 269, 0, 81, 266, 267, 0, 0, 76, 75,
	54, 85, 73, 74, 77, 0, 27, 78, 0, 0,
	83, 0, 52, 53, 84, 79, 80, 0, 0, 82,
	570, 23, 24, 0, 0, 86, 239, 0, 87, 0,
	88, 0, 0, 82, 31, 89, 55, 0, 0, 7,
	25, 51, 26, 30, 0, 0, 0, 56, 0, 81,
	0, 0, 0, 0, 76, 75, 54, 85, 73, 74,
	77, 0, 27, 78, 0, 0, 83, 0, 52, 53,
	84, 79, 80, 0, 0, 0, 0, 23, 24, 0,
	0, 86, 0, 0, 87, 0, 88, 0, 0, 82,
	31, 89, 55, 483, 0, 0, 25, 0, 26, 0,
	0, 0, 0, 56, 0, 81, 0, 0, 0, 0,
	76, 75, 0, 85, 73, 74, 77, 0, 27, 78,
	0, 0, 83, 348, 0, 0, 84, 79, 80, 0,
	0, 0, 0, 89, 0, 0, 0, 86, 25, 0,
	87, 0, 88, 207, 273, 82, 0, 81, 0, 0,
	0, 0, 76, 75, 26, 85, 73, 74, 77, 0,
	27, 78, 0, 0, 83, 0, 0, 0, 84, 79,
	80, 0, 0, 0, 0, 89, 0, 0, 0, 86,
	25, 0, 87, 0, 88, 207, 0, 82, 0, 81,
	0, 0, 0, 0, 76, 75, 26, 85, 73, 74,
	77, 0, 27, 78, 0, 0, 83, 0, 89, 0,
	84, 79, 80, 25, 0, 0, 0, 0, 0, 0,
	0, 86, 81, 0, 87, 0, 88, 76, 75, 82,
	85, 0, 0, 77, 0, 27, 78, 89, 26, 83,
	348, 0, 25, 84, 79, 80, 240, 0, 0, 0,
	268, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	207, 273, 0, 269, 27, 0, 266, 267, 0, 0,
	0, 26, 0, 81, 0, 0, 0, 0, 76, 75,
	0, 85, 73, 74, 77, 0, 0, 78, 0, 207,
	83, 82, 0, 0, 84, 79, 80, 0, 0, 0,
	26, 0, 0, 0, 0, 86, 0, 0, 87, 0,
	88, 0, 0, 82,
}
var yyPact = [...]int{

	62, -1000, 1228, 485, 484, 1172, -1000, 361, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 297, 361, 361, 361, 13, 361, 350, 294,
	361, 427, 349, 249, 348, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 397, 483, 482, 480, 478, 361, 347, 345, 344,
	342, 341, 336, 237, 229, 225, 335, 328, 324, 321,
	216, 213, -1000, 476, 475, 473, 472, 471, 467, 466,
	463, 453, 361, 452, 447, 445, 361, 444, 443, 429,
	320, 319, -1000, -1000, 86, -1000, -1000, 771, 146, 107,
	86, 207, 192, 181, 91, 191, -1000, 738, 89, 178,
	314, -1000, 115, 55, -1000, -1000, -1000, -1000, -1000, 8,
	939, 1368, 1024, 856, 687, 687, -1000, 784, -1000, 769,
	-1000, 557, 906, 314, 1326, 1401, -1000, 451, -1000, 558,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 8,
	-1000, -1000, -1000, 8, -1000, -1000, 83, 429, -1000, 8,
	-1000, -1000, -1000, -1000, 391, -1000, 356, 600, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	999, -1000, -1000, 389, -1000, -1000, -1000, -1000, 571, -1000,
	384, -1000, -1000, -1000, -1000, -1000, -1000, 308, 314, -1000,
	-1000, -1000, -1000, -1000, 1452, 1452, -1000, 361, 312, 311,
	306, 115, -1000, -1000, -1000, -1000, -1000, 206, 376, 71,
	-1000, -1000, -1000, -1000, 298, 298, 298, -1000, -5, 671,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 205, 365,
	429, 442, 305, 1368, -1000, -1000, -1000, -1000, -1000, 304,
	1024, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 201, 113, 354, 22, 22,
	361, 361, -30, 361, 303, 856, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 361, 302, 687, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 300, 299, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 292, 769, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 102, 361, 432,
	-1000, -1000, -1000, -1000, -1000, -1000, 361, 361, 1284, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 250, 441, 290,
	314, -1000, -1000, -1000, -1000, -1000, 1452, 1452, -1000, 287,
	1326, -1000, -1000, -1000, -1000, -1000, -1000, 257, 1401, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 253, 451, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 436, 245, 558, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 233, -1000, -1000,
	-1000, -1000, 177, -1000, -1000, 174, -1000, -1000, 232, 1452,
	-1000, 227, 86, -1000, -1000, -1000, -1000, -1000, 54, -1000,
	-1000, -1000, -1000, 967, -1000, -1000, 83, -1000, -1000, -1000,
	-1000, -1000, -1000, 752, 83, 83, -1000, -1000, -1000, -1000,
	-1000, -1000, 771, 167, 163, -1000, -1000, 140, 94, -1000,
	-1000, 90, 86, 47, 83, 83, 8, -1000, -1000, 86,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1430, 8, -1000,
	-1000, 86, 86, -1000, -1000, 856, -1000, -1000, -1000, 223,
	219, -1000, -1000, -1000, -1000, -1000, -1000, 83, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 209, 54, -1000,
	-1000, -1000, -1000, -1000, 22, 1158, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 70, 752, -1000,
	-1000, 361, -1000, -1000, -1000, -1000, -1000, -1000, 99, 87,
	354, 22, 361, 361, 361, 433, -1000, -1000, 333, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 56, 1430, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1066, -1000, -1000, -1000, -1000, -1000, 80, -1000, -1000, -1000,
	-1000, 86, -1000, 557, -1000, 69, 67, 83, 8, 8,
	8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 291,
	392, -1000, -1000, -1000, -1000, -1000, -1000, 354, -1000, -1000,
	-1000, -1000, -1000, 83, -1000,
}
var yyPgo = [...]int{

	0, 11, 1, 38, 632, 775, 774, 55, 92, 773,
	767, 764, 368, 763, 760, 758, 142, 284, 0, 749,
	742, 48, 735, 734, 733, 732, 621, 731, 729, 51,
	541, 728, 727, 50, 726, 725, 45, 21, 718, 717,
	714, 64, 61, 59, 58, 56, 54, 27, 47, 42,
	39, 29, 712, 711, 710, 706, 704, 40, 702, 700,
	698, 697, 13, 696, 695, 693, 71, 692, 688, 68,
	686, 676, 674, 17, 8, 9, 16, 82, 35, 34,
	20, 30, 668, 665, 664, 23, 654, 661, 5, 4,
	659, 650, 646, 46, 644, 12, 638, 637, 636, 25,
	15, 633, 631, 26, 31, 630, 14, 629, 626, 43,
	625, 622, 618, 18, 616, 615, 608, 606, 604, 603,
	597, 7, 589, 587, 585, 581, 22, 579, 577, 572,
	28, 568, 567, 10, 563, 556, 554, 552, 548, 44,
	36, 32, 545, 539, 534, 24, 531, 527, 523, 19,
	520, 519, 507, 49, 506, 504, 502, 37, 501, 41,
	499, 497, 495, 60, 492, 33, 491, 490, 455, 2,
	436,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 47, 87, 88, 88, 89, 89,
	89, 89, 89, 90, 91, 86, 92, 93, 93, 94,
	94, 95, 95, 95, 95, 52, 52, 96, 97, 97,
	98, 98, 99, 99, 99, 99, 99, 99, 100, 48,
	102, 102, 103, 103, 103, 103, 103, 103, 103, 101,
	104, 105, 39, 107, 108, 108, 109, 109, 109, 109,
	109, 109, 109, 3, 3, 76, 81, 81, 110, 111,
	111, 112, 112, 113, 113, 113, 113, 113, 113, 113,
	113, 114, 114, 118, 118, 118, 117, 17, 17, 17,
	116, 42, 119, 120, 120, 106, 106, 121, 121, 121,
	121, 121, 121, 121, 121, 121, 122, 123, 51, 124,
	124, 125, 125, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 127,
	46, 46, 128, 128, 129, 129, 130, 130, 130, 130,
	130, 130, 130, 130, 132, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 131, 131, 134, 135,
	135, 23, 136, 137, 137, 138, 138, 139, 139, 139,
	139, 139, 139, 139, 140, 141, 49, 142, 143, 143,
	144, 144, 145, 145, 145, 145, 145, 145, 145, 50,
	146, 147, 147, 148, 148, 149, 149, 149, 149, 149,
	40, 150, 151, 151, 152, 152, 153, 153, 153, 153,
	41, 154, 155, 156, 156, 79, 79, 80, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 159, 159, 158, 75, 45, 45, 161, 161, 161,
	161, 161, 161, 161, 161, 161, 160, 160, 43, 162,
	163, 164, 164, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 78, 4,
	4, 2, 2, 1, 1, 77, 44, 166, 115, 115,
	167, 168, 168, 169, 169, 169, 169, 169, 170, 16,
	18, 14, 15, 22, 74, 8, 8, 30, 7, 5,
	5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 2, 2, 4, 1,
	2, 1, 1, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 3, 4,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 1, 3, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 2, 2, 3, 3, 3, 3,
	3, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 0, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	2, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 3, 3, 1, 2, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 3, 3, 1, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	4, 2, 0, 1, 1, 2, 1, 1, 1, 1,
	4, 2, 1, 1, 2, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 3, 4, 2, 2, 4,
	2, 1, 2, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 1, 3, 0,
	1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -136, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -107, -150, -154,
	-119, -162, -166, -160, -127, -87, -101, -142, -146, -123,
	-96, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 7,
	4, 4, 9, -12, -4, 5, 10, 8, -4, -4,
	-4, 71, 72, 73, -4, 8, 10, 8, -4, 5,
	8, 10, 8, 8, 5, 4, 4, 4, 4, -4,
	8, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	10, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	4, 4, 4, 4, 4, 4, 4, 4, 4, -4,
	4, 4, 4, -4, 4, 4, -5, -6, -3, -4,
	6, 8, 8, -8, 55, 10, 8, -28, -29, -16,
	-17, -18, -30, 10, 10, -8, 10, 10, 10, 10,
	-32, -33, -21, 13, -16, -17, -18, -30, -35, -36,
	13, -16, -17, -18, -30, 10, 10, -137, -138, -139,
	-16, -17, -18, -86, -140, -141, -30, 59, 23, 24,
	-55, -56, -57, -58, -16, -17, -18, -59, 65, -65,
	-66, -16, -18, -67, -68, -70, -71, -30, 76, -108,
	-109, -81, -74, -16, -17, -18, -76, -30, -110, 68,
	16, 14, -151, -152, -153, -16, -17, -18, -26, -155,
	-156, -157, -16, -17, -18, -86, -93, -79, -80, -77,
	-78, -158, -75, -159, -26, -92, 36, 37, 20, 33,
	19, 22, 81, 60, -120, -106, -121, -16, -17, -18,
	-86, -93, -77, -78, -122, -26, 74, -163, -164, -165,
	-81, -16, -17, -18, -86, -47, -93, -74, -77, -159,
	-79, -80, -78, -76, -30, -163, -161, -16, -17, -18,
	-86, -47, -93, -77, -78, -30, -128, -129, -130, -16,
	-17, -18, -86, -93, -131, -51, -30, -132, 51, -88,
	-89, -16, -18, -90, -91, -30, 86, 85, -102, -103,
	-16, -17, -18, -104, -26, -86, -93, -105, 39, -143,
	-144, -145, -16, -17, -18, -86, -140, -141, -30, -147,
	-148, -149, -16, -17, -18, -86, -26, -124, -125, -126,
	-16, -17, -18, -86, -93, -41, -42, -43, -44, -45,
	-46, -48, -104, -49, -50, -30, -97, -98, -99, -16,
	-17, -18, -100, -86, -30, 57, -83, -84, -85, -16,
	-17, -18, -86, -30, -8, -3, 5, -7, 9, -29,
	-33, 9, 5, -36, 9, 5, 9, -139, -37, -38,
	-26, -37, -4, 8, 8, 9, -57, 10, 8, 5,
	9, -66, -69, 8, -69, -69, 77, 79, 80, 78,
	9, -109, 10, 8, 5, -3, 4, 9, -153, 9,
	-157, 10, 8, -2, 52, 6, 5, -2, -1, 47,
	48, -1, -4, -4, 82, 83, -4, 9, -121, -4,
	9, -165, 9, 9, 9, -130, 10, 8, -4, 9,
	-89, -4, -4, 9, -103, 8, 4, 9, -145, -37,
	-37, 9, -149, 9, -126, 9, -99, 4, 9, -85,
	9, 10, 10, 9, -26, 9, -8, -60, -61, -62,
	-16, -17, -18, -63, 66, -72, -73, -74, -47, -75,
	-76, -77, -78, -79, -80, -81, -8, -111, -112, -113,
	-114, 45, -115, -100, -116, -81, -117, -30, -118, -167,
	69, 84, 63, 17, 67, 18, -8, -8, -94, -95,
	-16, -17, -18, -30, 10, 10, 10, 10, 10, -8,
	10, -8, -8, -8, -134, -135, -133, -16, -17, -18,
	-86, -76, -77, -78, -47, -79, -80, -30, -8, -8,
	-106, 9, 9, -8, 9, -62, -1, 9, -73, 9,
	-113, -4, 10, 8, 10, 8, -2, -1, -4, -4,
	-4, 4, 9, -95, 9, -133, 9, 10, -8, -88,
	-168, -169, -16, -17, -18, -170, -30, 46, 10, -8,
	9, 9, -169, -2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 429,
	0, 0, 1, 5, 0, 399, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	293, 71, 74, 0, 21, 30, 41, 292, 73, 95,
	0, 332, 0, 223, 0, 0, 365, 0, 260, 262,
	133, 0, 0, 308, 321, 239, 155, 158, 121, 124,
	183, 331, 341, 222, 379, 407, 376, 377, 259, 135,
	179, 307, 320, 237, 157, 123, 0, 430, 431, 193,
	194, 2, 3, 6, 0, 425, 0, 0, 24, 26,
	27, 28, 29, 421, 422, 419, 217, 218, 219, 420,
	0, 31, 34, 0, 36, 37, 38, 39, 0, 42,
	0, 45, 46, 47, 48, 33, 423, 0, 294, 295,
	297, 298, 299, 300, 51, 51, 303, 0, 0, 0,
	0, 75, 76, 78, 79, 80, 81, 0, 0, 0,
	96, 98, 99, 100, 0, 0, 0, 104, 0, 0,
	184, 186, 187, 188, 189, 190, 191, 192, 0, 0,
	0, 0, 0, 333, 334, 336, 337, 338, 339, 0,
	342, 343, 348, 349, 350, 351, 352, 353, 354, 355,
	356, 357, 358, 359, 360, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 0, 0, 380, 381,
	383, 384, 385, 386, 387, 388, 389, 390, 391, 392,
	393, 394, 395, 396, 397, 0, 0, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 0, 263, 264, 266,
	267, 268, 269, 270, 271, 272, 273, 0, 0, 0,
	136, 138, 139, 140, 141, 142, 0, 0, 0, 170,
	172, 173, 174, 175, 176, 177, 178, 0, 0, 0,
	309, 310, 312, 313, 314, 315, 51, 51, 318, 0,
	322, 323, 325, 326, 327, 328, 329, 0, 240, 241,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 257, 258, 0, 159, 160, 162,
	163, 164, 165, 166, 167, 0, 0, 125, 126, 128,
	129, 130, 131, 132, 428, 432, 400, 0, 23, 25,
	32, 40, 0, 43, 50, 0, 291, 296, 0, 52,
	69, 0, 0, 304, 305, 72, 77, 82, 85, 84,
	94, 97, 101, 0, 102, 103, 0, 106, 107, 108,
	182, 185, 196, 199, 0, 0, 198, 330, 335, 340,
	344, 147, 0, 0, 0, 401, 402, 0, 0, 403,
	404, 0, 0, 0, 0, 0, 146, 221, 226, 0,
	378, 382, 406, 366, 261, 265, 286, 0, 274, 134,
	137, 0, 0, 169, 171, 0, 181, 306, 311, 0,
	0, 319, 324, 238, 242, 156, 161, 0, 122, 127,
	426, 35, 44, 301, 70, 302, 145, 0, 86, 87,
	89, 90, 91, 92, 0, 0, 110, 112, 113, 114,
	115, 116, 117, 118, 119, 120, 105, 0, 200, 201,
	203, 0, 205, 206, 207, 208, 209, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 195, 0, 149,
	151, 152, 153, 154, 345, 346, 347, 405, 398, 363,
	364, 361, 362, 236, 0, 288, 289, 275, 276, 277,
	278, 279, 280, 281, 282, 283, 284, 285, 143, 144,
	0, 316, 317, 168, 83, 88, 0, 109, 111, 197,
	202, 0, 211, 0, 408, 0, 0, 0, 213, 214,
	215, 410, 148, 150, 287, 290, 180, 93, 204, 0,
	0, 411, 413, 414, 415, 416, 417, 0, 220, 216,
	212, 409, 412, 0, 418,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:173
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:198
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:221
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:230
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:233
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:248
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:261
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:278
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:283
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:303
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:306
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:336
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:339
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:344
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:366
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:369
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:396
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:405
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:410
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:438
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:447
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:456
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:465
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:474
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:497
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:500
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:506
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:529
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:532
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:556
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:584
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yylex.(*lexer).stack.pop()
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:596
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:613
		{
			yylex.(*lexer).stack.pop()
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:618
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:642
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:669
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:678
		{
			yylex.(*lexer).stack.pop()
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:692
		{
			yylex.(*lexer).stack.pop()
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:697
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:718
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyVAL.token = yyDollar[1].token
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:722
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:731
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:734
		{
			yylex.(*lexer).stack.pop()
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:739
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:756
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yylex.(*lexer).stack.pop()
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:786
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:793
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:802
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:816
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:825
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:830
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:858
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:867
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:876
		{
			yylex.(*lexer).stack.pop()
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:906
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:915
		{
			yylex.(*lexer).stack.pop()
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:918
		{
			yylex.(*lexer).stack.pop()
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:940
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
			yylex.(*lexer).stack.pop()
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:966
		{
			yylex.(*lexer).stack.pop()
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:978
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:983
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1003
		{
			yylex.(*lexer).stack.pop()
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1006
		{
			yylex.(*lexer).stack.pop()
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1012
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1033
		{
			yylex.(*lexer).stack.pop()
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1038
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1058
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 319:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1070
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1075
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1099
		{
			yylex.(*lexer).stack.pop()
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1104
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1126
		{
			yylex.(*lexer).stack.pop()
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1131
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1148
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1155
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1164
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1189
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1205
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1217
		{
			yylex.(*lexer).stack.pop()
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1220
		{
			yylex.(*lexer).stack.pop()
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1244
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1253
		{
			yylex.(*lexer).stack.pop()
		}
	case 379:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1258
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1294
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1306
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1311
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1319
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1330
		{
			yyVAL.boolean = true
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1331
		{
			yyVAL.boolean = false
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1334
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1346
		{
			yylex.(*lexer).stack.pop()
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1351
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1360
		{
			yylex.(*lexer).stack.pop()
		}
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1363
		{
			yylex.(*lexer).stack.pop()
		}
	case 410:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1368
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1387
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1396
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1405
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1414
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1423
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1432
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1441
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1450
		{
			yyVAL.ext = nil
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1464
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1470
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 429:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1483
		{
			yyVAL.args = []string{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1489
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1492
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
