// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

//line parser.y:53
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1299

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1279

var yyAct = [...]int{

	258, 414, 541, 13, 502, 255, 13, 488, 269, 254,
	281, 363, 418, 359, 462, 470, 369, 44, 332, 317,
	389, 340, 20, 262, 322, 20, 353, 296, 233, 268,
	212, 261, 197, 204, 43, 181, 41, 279, 191, 226,
	278, 196, 45, 150, 173, 390, 160, 42, 69, 40,
	276, 39, 156, 38, 266, 486, 187, 37, 85, 3,
	550, 319, 16, 24, 155, 97, 98, 99, 257, 36,
	158, 12, 157, 171, 12, 527, 35, 526, 85, 548,
	385, 439, 536, 24, 182, 26, 85, 497, 4, 419,
	420, 24, 496, 434, 163, 433, 413, 547, 412, 166,
	156, 156, 178, 495, 185, 26, 403, 194, 402, 208,
	398, 494, 397, 26, 493, 217, 229, 236, 156, 272,
	272, 25, 287, 213, 299, 218, 311, 325, 335, 343,
	306, 362, 82, 372, 165, 230, 245, 264, 199, 252,
	242, 25, 280, 280, 156, 292, 355, 337, 241, 25,
	277, 277, 316, 291, 240, 274, 274, 239, 289, 328,
	163, 167, 162, 354, 174, 214, 303, 158, 327, 157,
	177, 313, 184, 178, 283, 193, 352, 207, 351, 156,
	350, 185, 349, 216, 228, 235, 348, 271, 271, 307,
	286, 194, 298, 376, 310, 324, 334, 342, 347, 361,
	416, 371, 456, 455, 208, 346, 380, 378, 132, 130,
	131, 129, 217, 375, 156, 188, 384, 381, 391, 123,
	213, 122, 218, 121, 170, 120, 229, 169, 162, 388,
	108, 168, 107, 236, 103, 174, 102, 396, 93, 394,
	92, 177, 401, 533, 521, 230, 415, 518, 516, 184,
	417, 256, 245, 515, 11, 458, 242, 11, 457, 193,
	425, 410, 214, 421, 241, 408, 405, 454, 272, 452,
	240, 85, 207, 239, 264, 85, 24, 175, 85, 29,
	216, 449, 223, 24, 85, 471, 483, 447, 445, 24,
	182, 280, 441, 436, 228, 431, 299, 428, 26, 277,
	430, 235, 85, 429, 274, 26, 427, 24, 424, 409,
	407, 26, 395, 473, 387, 393, 154, 153, 128, 48,
	127, 126, 325, 432, 125, 366, 119, 118, 366, 26,
	199, 472, 335, 438, 25, 482, 271, 481, 303, 437,
	343, 25, 117, 116, 115, 161, 442, 25, 443, 444,
	446, 337, 114, 176, 328, 183, 106, 355, 192, 362,
	206, 448, 101, 327, 298, 25, 215, 227, 234, 372,
	270, 270, 450, 285, 354, 297, 85, 309, 323, 333,
	341, 416, 360, 91, 370, 453, 6, 352, 404, 351,
	324, 350, 89, 349, 91, 152, 530, 348, 399, 465,
	334, 85, 85, 24, 531, 386, 24, 24, 342, 347,
	438, 161, 477, 164, 491, 475, 346, 200, 201, 383,
	377, 179, 109, 186, 176, 26, 198, 361, 26, 26,
	105, 451, 183, 440, 219, 505, 406, 371, 282, 282,
	147, 293, 192, 304, 146, 507, 329, 144, 356, 514,
	365, 24, 374, 199, 143, 206, 210, 459, 509, 264,
	142, 25, 465, 215, 25, 25, 508, 464, 141, 484,
	485, 510, 512, 26, 140, 511, 519, 227, 477, 164,
	520, 475, 490, 528, 234, 522, 139, 498, 491, 138,
	137, 499, 179, 136, 135, 532, 134, 133, 113, 151,
	186, 112, 505, 504, 259, 467, 534, 90, 111, 25,
	198, 110, 507, 85, 87, 86, 517, 545, 24, 270,
	425, 540, 94, 95, 96, 509, 100, 260, 544, 104,
	464, 219, 85, 508, 264, 480, 59, 24, 510, 512,
	26, 544, 511, 551, 267, 85, 78, 297, 58, 552,
	24, 73, 72, 284, 81, 60, 490, 74, 249, 26,
	75, 243, 124, 79, 319, 199, 232, 80, 76, 77,
	504, 250, 26, 323, 231, 85, 25, 56, 225, 224,
	24, 55, 145, 333, 199, 252, 331, 282, 537, 538,
	539, 341, 330, 65, 549, 25, 543, 199, 252, 62,
	321, 320, 26, 64, 190, 189, 31, 501, 25, 543,
	360, 195, 500, 305, 547, 304, 302, 553, 295, 294,
	370, 237, 61, 273, 273, 339, 288, 338, 300, 66,
	314, 326, 336, 344, 263, 364, 253, 373, 25, 57,
	478, 329, 476, 474, 238, 469, 275, 275, 468, 290,
	463, 301, 85, 315, 379, 85, 345, 24, 220, 356,
	24, 211, 223, 54, 222, 489, 318, 85, 249, 312,
	308, 63, 24, 358, 357, 67, 222, 487, 365, 26,
	249, 250, 26, 246, 247, 248, 503, 368, 374, 367,
	68, 466, 461, 250, 26, 195, 247, 248, 85, 392,
	382, 460, 209, 24, 175, 85, 29, 199, 252, 62,
	24, 205, 223, 463, 222, 25, 221, 203, 25, 199,
	202, 62, 32, 479, 47, 26, 46, 34, 33, 180,
	25, 28, 26, 492, 172, 27, 159, 237, 21, 489,
	85, 19, 400, 18, 411, 24, 17, 223, 15, 222,
	14, 422, 423, 503, 513, 10, 9, 8, 5, 2,
	238, 25, 85, 1, 149, 426, 221, 26, 25, 148,
	0, 0, 273, 0, 0, 0, 78, 0, 0, 542,
	0, 73, 72, 0, 81, 70, 71, 74, 0, 479,
	75, 0, 542, 79, 0, 275, 0, 80, 76, 77,
	300, 221, 0, 25, 0, 0, 435, 492, 82, 0,
	0, 83, 0, 84, 0, 0, 62, 0, 0, 0,
	0, 513, 0, 301, 0, 0, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 0,
	0, 0, 0, 0, 344, 0, 0, 546, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 0, 0, 364, 85, 0, 88, 345, 7, 24,
	49, 0, 29, 373, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 73, 72, 52, 81, 70, 71, 74,
	0, 26, 75, 0, 0, 79, 0, 50, 51, 80,
	76, 77, 0, 0, 0, 0, 22, 23, 0, 0,
	82, 0, 0, 83, 0, 84, 0, 0, 62, 30,
	0, 53, 0, 0, 0, 0, 0, 25, 0, 0,
	0, 0, 85, 0, 535, 0, 0, 24, 0, 506,
	0, 0, 0, 0, 0, 249, 78, 0, 0, 0,
	0, 73, 72, 0, 81, 70, 71, 74, 250, 26,
	75, 0, 0, 79, 0, 0, 0, 80, 76, 77,
	0, 523, 524, 525, 0, 0, 0, 0, 82, 0,
	0, 83, 529, 84, 199, 252, 62, 0, 85, 0,
	0, 0, 7, 24, 49, 25, 29, 0, 0, 265,
	0, 0, 78, 0, 0, 0, 506, 73, 72, 52,
	81, 70, 71, 74, 0, 26, 75, 0, 0, 79,
	0, 50, 51, 80, 76, 77, 0, 0, 0, 0,
	22, 23, 0, 85, 82, 0, 0, 83, 24, 84,
	0, 0, 62, 30, 0, 53, 249, 78, 0, 0,
	0, 25, 73, 72, 0, 81, 70, 71, 74, 250,
	26, 75, 0, 0, 79, 0, 0, 0, 80, 76,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 83, 0, 84, 199, 252, 62, 0, 85,
	0, 0, 0, 0, 24, 0, 25, 0, 0, 0,
	265, 251, 249, 78, 244, 0, 0, 0, 73, 72,
	0, 81, 70, 71, 74, 250, 26, 75, 247, 248,
	79, 0, 0, 0, 80, 76, 77, 0, 0, 0,
	0, 85, 0, 0, 0, 82, 24, 0, 83, 0,
	84, 199, 252, 62, 0, 78, 0, 0, 0, 0,
	73, 72, 25, 81, 70, 71, 74, 0, 26, 75,
	0, 0, 79, 319, 0, 0, 80, 76, 77, 0,
	0, 0, 0, 85, 0, 0, 0, 82, 24, 0,
	83, 0, 84, 199, 252, 62, 0, 78, 0, 0,
	0, 0, 73, 72, 25, 81, 70, 71, 74, 0,
	26, 75, 0, 0, 79, 0, 0, 0, 80, 76,
	77, 0, 0, 0, 0, 85, 0, 0, 0, 82,
	24, 0, 83, 0, 84, 199, 0, 62, 0, 78,
	0, 0, 0, 0, 73, 72, 25, 81, 70, 71,
	74, 0, 26, 75, 0, 0, 79, 0, 0, 0,
	80, 76, 77, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 83, 0, 84, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 25,
}
var yyPact = [...]int{

	34, -1000, 981, 511, 510, 857, -1000, 378, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 230, 378, 378, 378, -6, 378, 354, 226, 378,
	425, 348, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 417,
	507, 504, 497, 494, 344, 336, 335, 334, 319, 318,
	215, 211, 378, 316, 313, 312, 310, 201, 200, -1000,
	493, 492, 490, 489, 486, 485, 482, 470, 464, 456,
	450, 443, 378, 440, 436, 389, 309, 308, -1000, -1000,
	159, -1000, -1000, 295, 124, 89, 159, 221, 217, 214,
	63, 264, -1000, 277, 46, 205, 394, -1000, 391, -1000,
	-1000, -1000, -1000, -1000, 698, 1208, 1082, 1026, 648, 648,
	-1000, 538, -1000, 79, 159, 1124, 394, 1166, 525, -1000,
	271, -1000, 506, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -3, -1000, -1000, 62, 389,
	-1000, -3, -1000, -1000, -1000, -1000, 415, -1000, 369, 645,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 691, -1000, -1000, 414, -1000, -1000, -1000, -1000,
	71, -1000, 400, -1000, -1000, -1000, -1000, -1000, -1000, 305,
	394, -1000, -1000, -1000, -1000, -1000, 755, 755, -1000, 378,
	307, 231, 303, 391, -1000, -1000, -1000, -1000, -1000, 102,
	393, 733, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	98, 383, 389, 432, 301, 1208, -1000, -1000, -1000, -1000,
	-1000, 300, 1082, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 378, -1000, 88, 194, 375, 42,
	42, 378, 378, 299, 1026, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, 297, 648, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 294, 291, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 286, 79, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 85, 378, -1000, 284, -1000,
	-1000, -1000, 22, 755, -1000, -1000, -1000, -1000, 73, 429,
	283, 394, -1000, -1000, -1000, -1000, -1000, 755, 755, -1000,
	279, 1166, -1000, -1000, -1000, -1000, -1000, -1000, 278, 525,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 272, 271, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 427, 260, 506, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 258, -1000,
	-1000, -1000, -1000, 193, -1000, -1000, 192, -1000, -1000, 249,
	755, 246, 159, -1000, -1000, -1000, -1000, -1000, 439, -1000,
	-1000, -1000, -1000, 268, 62, 62, -1000, -1000, -1000, -1000,
	-1000, 45, -1000, 295, 104, 101, -1000, 93, 82, -1000,
	-1000, 77, 159, -3, -1000, -1000, 159, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 660, -3, -1000, -1000, -1000, 1026,
	-1000, -1000, -1000, 244, 239, -1000, -1000, -1000, -1000, -1000,
	-1000, 62, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	238, 439, -1000, -1000, -1000, -1000, -1000, 42, 235, 268,
	-1000, 378, 378, 378, -1000, -1000, -1000, -1000, -1000, -1000,
	67, 375, 378, 392, -1000, -1000, -1000, 395, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	234, 660, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 925, -1000, -1000, -1000, -1000, -1000,
	72, -1000, -1000, 159, 159, 159, -1000, 568, 69, 159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	51, -1000, -1000, -1000, -1000, -1000, -1000, 375, -1000, -1000,
	-1000, -1000, 62, -1000,
}
var yyPgo = [...]int{

	0, 12, 1, 43, 499, 769, 764, 48, 64, 763,
	759, 758, 386, 757, 756, 755, 251, 68, 0, 750,
	748, 62, 746, 743, 741, 19, 738, 736, 46, 319,
	735, 734, 44, 731, 729, 35, 20, 45, 728, 727,
	76, 69, 57, 53, 51, 49, 36, 47, 34, 17,
	42, 726, 724, 722, 720, 717, 33, 711, 702, 701,
	692, 14, 691, 690, 689, 687, 16, 504, 683, 527,
	677, 7, 675, 674, 673, 13, 11, 671, 670, 669,
	26, 666, 9, 663, 661, 30, 8, 50, 10, 658,
	648, 645, 15, 643, 642, 640, 639, 636, 5, 31,
	23, 634, 629, 627, 625, 21, 622, 619, 618, 27,
	616, 613, 4, 40, 37, 612, 607, 606, 605, 604,
	38, 41, 32, 603, 601, 600, 24, 593, 592, 586,
	18, 581, 579, 578, 39, 577, 574, 566, 28, 561,
	555, 553, 548, 54, 544, 29, 536, 535, 521, 2,
	517,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	26, 13, 13, 27, 27, 28, 28, 28, 28, 30,
	31, 31, 21, 32, 32, 32, 32, 32, 32, 19,
	33, 34, 34, 35, 35, 35, 35, 35, 20, 20,
	36, 36, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 37, 37,
	24, 24, 53, 54, 54, 55, 55, 56, 56, 56,
	56, 57, 57, 58, 59, 59, 60, 60, 61, 61,
	61, 61, 62, 52, 52, 63, 64, 64, 65, 65,
	66, 66, 66, 66, 66, 46, 67, 68, 69, 69,
	70, 70, 71, 71, 71, 71, 51, 51, 72, 73,
	73, 74, 74, 75, 75, 75, 75, 75, 75, 76,
	47, 78, 78, 78, 78, 78, 78, 78, 78, 77,
	79, 79, 80, 81, 38, 83, 84, 84, 85, 85,
	85, 85, 85, 85, 85, 3, 3, 88, 86, 86,
	89, 90, 90, 91, 91, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 17, 17, 17, 94, 95, 41,
	96, 97, 97, 82, 82, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 101, 102, 50, 103, 103, 104,
	104, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 106, 45, 45,
	107, 107, 108, 108, 109, 109, 109, 109, 109, 109,
	109, 109, 111, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 110, 110, 115, 116, 116, 23,
	117, 118, 118, 119, 119, 120, 120, 120, 120, 120,
	120, 120, 121, 122, 48, 123, 124, 124, 125, 125,
	126, 126, 126, 126, 126, 126, 126, 49, 127, 128,
	128, 129, 129, 130, 130, 130, 130, 130, 39, 131,
	132, 132, 133, 133, 134, 134, 134, 134, 40, 135,
	136, 137, 137, 113, 113, 114, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 139, 44,
	44, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	140, 140, 42, 142, 143, 144, 144, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 100, 4, 4, 2, 1, 1, 99, 43, 146,
	93, 93, 147, 148, 148, 149, 149, 149, 149, 149,
	150, 16, 18, 14, 15, 22, 87, 8, 8, 29,
	7, 5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 3, 1, 3, 1, 1, 1, 1, 4,
	2, 1, 2, 3, 1, 1, 1, 1, 2, 4,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 4,
	1, 2, 1, 1, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 4, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	2, 0, 1, 1, 2, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 2, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 4, 2,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 3, 4, 2,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 1,
	3, 0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, 49, 50, 12, 70, 34, -30, -33, 15,
	62, -117, -53, -38, -39, -40, -41, -42, -43, -44,
	-45, -46, -47, -48, -49, -50, -51, -52, -29, 13,
	40, 41, 28, 64, -83, -131, -135, -96, -142, -146,
	-140, -106, 61, -77, -123, -127, -102, -72, -63, -7,
	30, 31, 27, 26, 32, 35, 43, 44, 21, 38,
	42, 29, 53, 56, 58, 7, 4, 4, 9, -12,
	-4, 5, 10, 8, -4, -4, -4, 71, 72, 73,
	-4, 8, 10, 8, -4, 5, 8, 10, 8, 5,
	4, 4, 4, 4, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -4, 8, 8, 8, 8, 10,
	8, 10, 8, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, -4, 4, 4, -5, -6,
	-3, -4, 6, 8, 8, -8, 55, 10, 8, -27,
	-28, -16, -17, -18, -29, 10, 10, -8, 10, 10,
	10, 10, -31, -32, -21, 13, -16, -17, -18, -29,
	-34, -35, 13, -16, -17, -18, -29, 10, 10, -118,
	-119, -120, -16, -17, -18, -67, -121, -122, -29, 59,
	23, 24, -54, -55, -56, -57, -16, -17, -18, -58,
	65, -84, -85, -86, -87, -16, -17, -18, -88, -29,
	-89, 68, 16, 14, -132, -133, -134, -16, -17, -18,
	-25, -136, -137, -138, -16, -17, -18, -67, -69, -113,
	-114, -99, -100, -139, 22, -25, -68, 36, 37, 20,
	33, 19, 60, -97, -82, -98, -16, -17, -18, -67,
	-69, -99, -100, -101, -25, 74, -143, -144, -145, -86,
	-16, -17, -18, -67, -46, -69, -87, -99, -113, -114,
	-100, -88, -29, -143, -141, -16, -17, -18, -67, -46,
	-69, -99, -100, -29, -107, -108, -109, -16, -17, -18,
	-67, -69, -110, -50, -29, -111, 51, -8, -78, -16,
	-17, -18, -79, -37, -67, -69, -80, -25, -81, 39,
	-124, -125, -126, -16, -17, -18, -67, -121, -122, -29,
	-128, -129, -130, -16, -17, -18, -67, -25, -103, -104,
	-105, -16, -17, -18, -67, -69, -40, -41, -42, -43,
	-44, -45, -47, -80, -48, -49, -29, -73, -74, -75,
	-16, -17, -18, -76, -67, -29, 57, -64, -65, -66,
	-16, -17, -18, -67, -29, -8, -3, 5, -7, 9,
	-28, -32, 9, 5, -35, 9, 5, 9, -120, -36,
	-37, -36, -4, 8, 8, 9, -56, 10, 8, 5,
	9, -85, 10, 8, 5, -3, 4, 9, -134, 9,
	-138, -4, 10, 8, -2, 52, 6, -2, -1, 47,
	48, -1, -4, -4, 9, -98, -4, 9, -145, 9,
	9, 9, -109, 10, 8, -4, 9, -80, -25, 8,
	4, 9, -126, -36, -36, 9, -130, 9, -105, 9,
	-75, 4, 9, -66, 9, 10, 10, 9, 9, -8,
	-59, -60, -61, -16, -17, -18, -62, 66, -90, -91,
	-92, 17, 63, 45, -93, -76, -94, -86, -95, -29,
	-147, 69, 67, 18, -8, -8, 10, -70, -71, -16,
	-17, -18, -29, 10, 10, 10, 10, 10, -8, -8,
	-115, -116, -112, -16, -17, -18, -67, -88, -99, -100,
	-46, -113, -114, -29, -82, 9, 9, -8, 9, -61,
	-1, 9, -92, -4, -4, -4, 10, 8, -2, -4,
	4, 9, -71, 9, -112, 9, 10, -8, -8, -8,
	-148, -149, -16, -17, -18, -150, -29, 46, 10, -8,
	9, -149, -2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 379,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 381, 0, 0, 1, 5,
	0, 352, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 251, 70, 73, 20,
	29, 40, 250, 72, 0, 290, 0, 181, 0, 0,
	319, 0, 218, 220, 0, 131, 266, 279, 197, 116,
	119, 93, 96, 145, 289, 299, 180, 333, 359, 330,
	331, 217, 139, 265, 278, 195, 118, 95, 0, 382,
	383, 155, 156, 2, 3, 6, 0, 377, 0, 0,
	23, 25, 26, 27, 28, 373, 374, 371, 174, 175,
	176, 372, 0, 30, 33, 0, 35, 36, 37, 38,
	0, 41, 0, 44, 45, 46, 47, 32, 375, 0,
	252, 253, 255, 256, 257, 258, 50, 50, 261, 0,
	0, 0, 0, 74, 75, 77, 78, 79, 80, 0,
	0, 0, 146, 148, 149, 150, 151, 152, 153, 154,
	0, 0, 0, 0, 0, 291, 292, 294, 295, 296,
	297, 0, 300, 301, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 0, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 0, 0, 334, 335, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 349, 350, 0, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 329, 0, 221, 222, 224, 225, 226,
	227, 228, 229, 230, 231, 0, 0, 105, 0, 132,
	133, 134, 135, 136, 137, 138, 140, 68, 0, 0,
	0, 267, 268, 270, 271, 272, 273, 50, 50, 276,
	0, 280, 281, 283, 284, 285, 286, 287, 0, 198,
	199, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 0, 120, 121,
	123, 124, 125, 126, 127, 128, 0, 0, 97, 98,
	100, 101, 102, 103, 104, 380, 384, 353, 0, 22,
	24, 31, 39, 0, 42, 49, 0, 249, 254, 0,
	51, 0, 0, 262, 263, 71, 76, 81, 84, 83,
	144, 147, 158, 161, 0, 0, 160, 288, 293, 298,
	302, 0, 108, 0, 0, 0, 354, 0, 0, 355,
	356, 0, 0, 107, 179, 184, 0, 332, 336, 358,
	320, 219, 223, 244, 0, 232, 130, 141, 69, 0,
	143, 264, 269, 0, 0, 277, 282, 196, 200, 117,
	122, 0, 94, 99, 378, 34, 43, 259, 260, 106,
	0, 85, 86, 88, 89, 90, 91, 0, 0, 162,
	163, 0, 0, 0, 168, 169, 170, 171, 172, 173,
	0, 0, 0, 0, 376, 157, 316, 0, 110, 112,
	113, 114, 115, 303, 304, 305, 357, 351, 318, 194,
	0, 246, 247, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 0, 274, 275, 129, 82, 87,
	0, 159, 164, 0, 0, 0, 360, 0, 0, 0,
	362, 109, 111, 245, 248, 142, 92, 165, 166, 167,
	0, 363, 365, 366, 367, 368, 369, 0, 177, 178,
	361, 364, 0, 370,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:154
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:162
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:201
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:210
		{
			yylex.(*lexer).stack.pop()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:213
		{
			yylex.(*lexer).stack.pop()
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:228
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:241
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:258
		{
			yylex.(*lexer).stack.pop()
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:263
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:283
		{
			yylex.(*lexer).stack.pop()
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:286
		{
			yylex.(*lexer).stack.pop()
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:316
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:319
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:324
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:346
		{
			yylex.(*lexer).stack.pop()
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:349
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:354
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:376
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:385
		{
			yylex.(*lexer).stack.pop()
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:388
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:393
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:416
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "must", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:425
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:446
		{
			yylex.(*lexer).stack.pop()
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:460
		{
			yylex.(*lexer).stack.pop()
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:463
		{
			yylex.(*lexer).stack.pop()
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:468
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:492
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:504
		{
			yylex.(*lexer).stack.pop()
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:519
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:533
		{
			yylex.(*lexer).stack.pop()
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:538
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:547
		{
			yylex.(*lexer).stack.pop()
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:552
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:573
		{
			yyVAL.token = yyDollar[1].token
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:574
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:577
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:586
		{
			yylex.(*lexer).stack.pop()
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:589
		{
			yylex.(*lexer).stack.pop()
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:610
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:617
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:624
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:644
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:653
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:662
		{
			yylex.(*lexer).stack.pop()
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:667
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:695
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:704
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:713
		{
			yylex.(*lexer).stack.pop()
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:743
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			yylex.(*lexer).stack.pop()
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:755
		{
			yylex.(*lexer).stack.pop()
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:777
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:800
		{
			yylex.(*lexer).stack.pop()
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:803
		{
			yylex.(*lexer).stack.pop()
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:815
		{
			yylex.(*lexer).stack.pop()
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:820
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:840
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:843
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:849
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:858
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:870
		{
			yylex.(*lexer).stack.pop()
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:875
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:895
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:898
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:907
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:912
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:936
		{
			yylex.(*lexer).stack.pop()
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:941
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:963
		{
			yylex.(*lexer).stack.pop()
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:968
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:985
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:992
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1001
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1024
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1033
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 330:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1053
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1069
		{
			yylex.(*lexer).stack.pop()
		}
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1074
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1107
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1116
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1124
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1134
		{
			yyVAL.boolean = true
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1135
		{
			yyVAL.boolean = false
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1138
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1150
		{
			yylex.(*lexer).stack.pop()
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1155
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1164
		{
			yylex.(*lexer).stack.pop()
		}
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1167
		{
			yylex.(*lexer).stack.pop()
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1172
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1191
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1200
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1218
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1227
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1236
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1245
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1254
		{
			yyVAL.ext = nil
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1257
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1268
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1274
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1287
		{
			yyVAL.args = []string{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1293
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 384:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1296
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
