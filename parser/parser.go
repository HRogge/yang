// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426
const kywd_error_app_tag = 57427
const kywd_error_message = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1487

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1479

var yyAct = [...]int{

	279, 564, 608, 13, 391, 452, 13, 276, 547, 528,
	508, 457, 262, 515, 275, 387, 397, 342, 297, 360,
	338, 46, 45, 368, 330, 44, 417, 318, 42, 230,
	289, 41, 199, 40, 350, 39, 301, 283, 189, 251,
	38, 244, 220, 300, 47, 158, 37, 299, 212, 168,
	463, 464, 282, 181, 101, 102, 103, 205, 558, 204,
	287, 72, 280, 303, 195, 431, 16, 179, 25, 478,
	164, 3, 25, 435, 438, 436, 437, 166, 615, 165,
	89, 603, 429, 484, 174, 25, 173, 166, 281, 165,
	27, 89, 556, 598, 27, 555, 25, 43, 171, 554,
	4, 455, 454, 164, 553, 552, 186, 27, 193, 164,
	89, 202, 164, 216, 222, 25, 290, 501, 27, 458,
	459, 235, 247, 254, 164, 293, 293, 500, 309, 164,
	321, 164, 332, 341, 353, 363, 371, 27, 390, 232,
	400, 336, 335, 196, 277, 336, 335, 11, 453, 228,
	11, 178, 177, 381, 26, 176, 600, 383, 382, 258,
	260, 380, 302, 302, 379, 314, 257, 378, 171, 377,
	263, 376, 182, 203, 325, 259, 375, 298, 298, 228,
	313, 186, 374, 25, 236, 255, 305, 294, 294, 193,
	310, 356, 322, 355, 587, 344, 354, 364, 372, 202,
	392, 582, 401, 404, 593, 27, 592, 476, 451, 475,
	450, 256, 216, 296, 296, 580, 312, 408, 323, 579,
	222, 345, 295, 295, 373, 311, 504, 412, 406, 502,
	235, 416, 420, 442, 409, 441, 218, 231, 427, 432,
	426, 26, 169, 139, 247, 138, 499, 182, 232, 497,
	184, 254, 191, 494, 137, 200, 136, 214, 221, 440,
	425, 203, 430, 492, 490, 233, 245, 252, 163, 291,
	291, 486, 307, 456, 319, 473, 331, 339, 351, 361,
	369, 460, 388, 467, 398, 447, 444, 258, 260, 293,
	449, 433, 434, 236, 257, 131, 423, 130, 263, 89,
	89, 89, 89, 259, 413, 25, 241, 25, 190, 529,
	543, 472, 169, 255, 471, 89, 208, 209, 321, 470,
	25, 183, 129, 30, 128, 184, 302, 27, 469, 27,
	332, 466, 127, 191, 126, 448, 446, 531, 341, 256,
	424, 298, 27, 200, 415, 474, 231, 422, 89, 394,
	353, 294, 207, 25, 479, 530, 214, 162, 483, 541,
	363, 540, 325, 26, 221, 26, 161, 278, 371, 175,
	12, 135, 134, 12, 233, 27, 542, 296, 26, 491,
	322, 133, 488, 489, 487, 381, 295, 390, 245, 383,
	382, 493, 112, 380, 111, 252, 379, 400, 132, 378,
	344, 377, 495, 376, 125, 89, 323, 356, 375, 355,
	25, 26, 354, 498, 374, 107, 89, 106, 618, 124,
	123, 25, 364, 122, 121, 403, 345, 97, 511, 96,
	372, 120, 27, 291, 113, 110, 105, 455, 454, 95,
	160, 95, 6, 27, 614, 518, 443, 533, 93, 392,
	428, 516, 550, 414, 597, 614, 373, 411, 405, 401,
	114, 25, 319, 109, 496, 170, 485, 445, 26, 523,
	521, 155, 154, 185, 331, 192, 522, 567, 201, 26,
	215, 152, 339, 27, 151, 520, 150, 148, 234, 246,
	253, 147, 292, 292, 351, 308, 519, 320, 146, 578,
	340, 352, 362, 370, 361, 389, 145, 399, 511, 144,
	143, 50, 369, 574, 571, 513, 142, 89, 583, 26,
	573, 141, 25, 140, 118, 584, 117, 518, 586, 570,
	517, 388, 533, 516, 116, 170, 115, 588, 91, 568,
	569, 398, 90, 612, 27, 607, 594, 550, 185, 524,
	539, 523, 521, 62, 596, 599, 192, 288, 522, 535,
	61, 328, 306, 86, 567, 601, 201, 520, 63, 207,
	273, 89, 509, 261, 572, 250, 25, 249, 519, 215,
	26, 59, 243, 242, 58, 359, 467, 358, 68, 349,
	348, 67, 198, 197, 611, 32, 548, 234, 27, 563,
	574, 571, 562, 327, 324, 317, 316, 573, 611, 172,
	619, 246, 517, 64, 367, 366, 570, 187, 253, 194,
	620, 565, 206, 207, 69, 227, 568, 569, 284, 274,
	60, 524, 237, 537, 26, 536, 304, 304, 534, 315,
	285, 326, 532, 21, 535, 357, 21, 384, 89, 393,
	439, 402, 509, 25, 527, 241, 292, 240, 526, 238,
	89, 572, 410, 229, 57, 25, 183, 346, 30, 585,
	337, 66, 386, 385, 241, 27, 240, 70, 546, 172,
	268, 265, 271, 334, 333, 320, 329, 27, 65, 396,
	505, 548, 187, 269, 159, 395, 266, 267, 71, 514,
	194, 226, 94, 225, 525, 340, 224, 223, 565, 239,
	206, 26, 544, 545, 219, 34, 512, 352, 98, 99,
	100, 82, 104, 26, 507, 108, 506, 362, 239, 217,
	557, 227, 559, 560, 89, 370, 213, 561, 609, 25,
	211, 237, 210, 33, 49, 48, 36, 268, 35, 576,
	577, 119, 609, 418, 389, 188, 29, 180, 28, 167,
	269, 27, 248, 264, 399, 581, 22, 20, 19, 18,
	17, 15, 14, 343, 10, 365, 9, 149, 8, 89,
	5, 153, 2, 1, 25, 89, 207, 273, 82, 157,
	25, 270, 268, 81, 271, 510, 156, 26, 76, 75,
	304, 85, 73, 74, 77, 269, 27, 78, 266, 267,
	83, 0, 27, 89, 84, 79, 80, 0, 25, 549,
	241, 0, 240, 0, 0, 86, 0, 0, 87, 326,
	88, 207, 273, 82, 0, 394, 89, 207, 407, 0,
	27, 25, 26, 0, 566, 419, 419, 0, 26, 0,
	89, 0, 0, 272, 0, 25, 190, 0, 604, 605,
	606, 357, 0, 27, 616, 617, 0, 0, 0, 0,
	0, 0, 0, 0, 239, 510, 26, 27, 0, 384,
	0, 0, 0, 0, 248, 0, 0, 0, 0, 621,
	0, 264, 0, 0, 0, 0, 0, 0, 393, 26,
	0, 89, 421, 92, 0, 7, 25, 51, 402, 30,
	0, 0, 0, 26, 549, 81, 0, 0, 0, 0,
	76, 75, 54, 85, 73, 74, 77, 0, 27, 78,
	0, 566, 83, 0, 52, 53, 84, 79, 80, 0,
	0, 0, 0, 23, 24, 0, 0, 86, 0, 0,
	87, 241, 88, 240, 538, 82, 31, 268, 55, 271,
	0, 610, 0, 551, 26, 461, 462, 0, 465, 56,
	269, 0, 0, 266, 267, 610, 0, 0, 343, 0,
	0, 468, 0, 0, 0, 0, 0, 0, 575, 89,
	0, 0, 0, 0, 25, 0, 419, 419, 82, 0,
	365, 0, 0, 81, 0, 239, 0, 0, 76, 75,
	0, 85, 0, 0, 77, 0, 27, 78, 0, 0,
	83, 347, 0, 477, 84, 79, 80, 0, 0, 0,
	480, 481, 0, 0, 0, 0, 0, 0, 0, 538,
	0, 207, 273, 89, 0, 0, 0, 7, 25, 51,
	0, 30, 26, 0, 0, 0, 0, 81, 551, 503,
	0, 0, 76, 75, 54, 85, 73, 74, 77, 0,
	27, 78, 0, 0, 83, 575, 52, 53, 84, 79,
	80, 0, 0, 0, 0, 23, 24, 0, 0, 86,
	0, 0, 87, 0, 88, 0, 0, 82, 31, 0,
	55, 0, 89, 0, 602, 613, 26, 25, 0, 0,
	0, 56, 0, 0, 0, 268, 81, 0, 0, 613,
	0, 76, 75, 0, 85, 73, 74, 77, 269, 27,
	78, 0, 0, 83, 0, 0, 0, 84, 79, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 87, 0, 88, 207, 273, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 26, 89, 0, 0, 286,
	0, 25, 0, 0, 0, 0, 0, 0, 0, 268,
	81, 0, 0, 0, 0, 76, 75, 0, 85, 73,
	74, 77, 269, 27, 78, 0, 0, 83, 0, 0,
	0, 84, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 87, 0, 88, 207, 273,
	82, 0, 0, 0, 589, 590, 591, 89, 0, 26,
	89, 0, 25, 286, 0, 25, 595, 241, 0, 240,
	0, 81, 0, 268, 0, 0, 76, 75, 0, 85,
	73, 74, 77, 0, 27, 78, 269, 27, 83, 266,
	267, 0, 84, 79, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 89, 87, 482, 88, 207,
	25, 82, 207, 273, 82, 0, 0, 0, 0, 81,
	26, 239, 0, 26, 76, 75, 0, 85, 73, 74,
	77, 0, 27, 78, 272, 0, 83, 347, 0, 0,
	84, 79, 80, 0, 0, 0, 0, 89, 0, 0,
	0, 86, 25, 0, 87, 0, 88, 207, 273, 82,
	0, 81, 0, 0, 0, 0, 76, 75, 26, 85,
	73, 74, 77, 0, 27, 78, 0, 0, 83, 347,
	0, 0, 84, 79, 80, 0, 0, 0, 0, 89,
	0, 0, 0, 86, 25, 0, 87, 0, 88, 207,
	273, 82, 0, 81, 0, 0, 0, 0, 76, 75,
	26, 85, 73, 74, 77, 0, 27, 78, 89, 0,
	83, 0, 0, 25, 84, 79, 80, 240, 0, 0,
	0, 268, 0, 0, 0, 86, 0, 0, 87, 0,
	88, 0, 0, 82, 269, 27, 0, 266, 267, 0,
	0, 0, 26, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	207, 0, 82, 76, 75, 0, 85, 73, 74, 77,
	0, 26, 78, 0, 0, 83, 0, 0, 0, 84,
	79, 80, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 87, 0, 88, 0, 0, 82,
}
var yyPact = [...]int{

	46, -1000, 1036, 538, 534, 894, -1000, 436, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 419, 436, 436, 436, -17, 436, 428, 407,
	436, 458, 427, 384, 426, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 455, 532, 530, 522, 520, 436, 423, 416, 415,
	412, 411, 396, 324, 314, 287, 390, 373, 364, 363,
	246, 235, -1000, 519, 517, 512, 506, 505, 502, 494,
	487, 483, 436, 482, 480, 477, 436, 468, 467, 434,
	358, 349, -1000, -1000, 69, -1000, -1000, 341, 76, 74,
	69, 145, 142, 141, 57, 308, -1000, 843, 54, 133,
	293, -1000, 171, 103, -1000, -1000, -1000, -1000, -1000, 15,
	806, 1352, 772, 1159, 1223, 1223, -1000, 727, -1000, 510,
	-1000, 56, 1310, 293, 1220, 982, -1000, 778, -1000, 564,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15,
	-1000, -1000, -1000, 15, -1000, -1000, 79, 434, -1000, 15,
	-1000, -1000, -1000, -1000, 453, -1000, 294, 829, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	653, -1000, -1000, 452, -1000, -1000, -1000, -1000, 295, -1000,
	448, -1000, -1000, -1000, -1000, -1000, -1000, 335, 293, -1000,
	-1000, -1000, -1000, -1000, 1417, 1417, -1000, 436, 339, 288,
	331, 171, -1000, -1000, -1000, -1000, -1000, 230, 445, 73,
	-1000, -1000, -1000, -1000, 231, 231, 231, -1000, -4, 641,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 225, 441,
	434, 463, 327, 1352, -1000, -1000, -1000, -1000, -1000, 326,
	772, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 200, 96, 432, 72, 72,
	436, 436, -32, 436, 322, 1159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 436, 319, 1223, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 305, 302, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 266, 510, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 199, 436, 60,
	-1000, -1000, -1000, -1000, -1000, 436, 436, 1268, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 75, 462, 262, 293,
	-1000, -1000, -1000, -1000, -1000, 1417, 1417, -1000, 255, 1220,
	-1000, -1000, -1000, -1000, -1000, -1000, 254, 982, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 244, 778, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 460, 240, 564, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 237, -1000, -1000, -1000,
	-1000, 117, -1000, -1000, 107, -1000, -1000, 220, 1417, -1000,
	217, 69, -1000, -1000, -1000, -1000, -1000, 449, -1000, -1000,
	-1000, -1000, 937, -1000, -1000, 79, -1000, -1000, -1000, -1000,
	-1000, -1000, 292, 79, 79, -1000, -1000, -1000, -1000, -1000,
	-1000, 341, 95, 94, -1000, -1000, 89, 85, -1000, -1000,
	82, 69, 48, 79, 79, 15, -1000, -1000, 69, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1381, 15, -1000, -1000,
	69, 69, -1000, -1000, 1159, -1000, -1000, -1000, 210, 206,
	-1000, -1000, -1000, -1000, -1000, -1000, 79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 192, 449, -1000, -1000,
	-1000, -1000, -1000, 72, 660, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 185, 292, -1000, 436,
	436, 436, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 196,
	432, 436, 72, 450, -1000, -1000, 84, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 147, 1381, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1095, -1000,
	-1000, -1000, -1000, -1000, 71, -1000, -1000, -1000, -1000, 69,
	69, 69, -1000, 398, 68, 69, 79, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 409, -1000, -1000,
	-1000, -1000, -1000, -1000, 432, -1000, -1000, -1000, -1000, -1000,
	79, -1000,
}
var yyPgo = [...]int{

	0, 11, 5, 45, 694, 796, 789, 61, 268, 783,
	782, 780, 442, 778, 776, 774, 144, 367, 0, 772,
	771, 66, 770, 769, 768, 767, 640, 766, 759, 49,
	511, 758, 757, 53, 756, 755, 38, 26, 753, 748,
	746, 46, 40, 35, 33, 31, 28, 97, 25, 22,
	21, 44, 745, 744, 743, 742, 740, 48, 736, 729,
	726, 724, 10, 716, 715, 714, 42, 707, 706, 65,
	703, 701, 699, 13, 18, 12, 63, 52, 37, 43,
	36, 116, 698, 695, 689, 16, 62, 688, 686, 24,
	684, 683, 681, 88, 678, 8, 677, 673, 672, 15,
	4, 671, 670, 20, 17, 667, 14, 664, 663, 29,
	659, 658, 654, 9, 642, 638, 635, 633, 630, 629,
	7, 628, 624, 615, 614, 23, 613, 606, 605, 27,
	604, 603, 1, 602, 599, 595, 593, 592, 32, 59,
	57, 591, 590, 589, 34, 588, 587, 585, 19, 584,
	583, 582, 41, 581, 577, 575, 39, 573, 47, 568,
	562, 560, 60, 557, 30, 553, 550, 545, 2, 543,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 47, 87, 88, 88, 89, 89,
	89, 89, 90, 91, 86, 92, 93, 93, 94, 94,
	95, 95, 95, 95, 52, 52, 96, 97, 97, 98,
	98, 99, 99, 99, 99, 99, 99, 100, 48, 102,
	102, 103, 103, 103, 103, 103, 103, 103, 101, 104,
	105, 39, 107, 108, 108, 109, 109, 109, 109, 109,
	109, 109, 3, 3, 76, 81, 81, 110, 111, 111,
	112, 112, 113, 113, 113, 113, 113, 113, 113, 113,
	113, 113, 117, 17, 17, 17, 115, 116, 42, 118,
	119, 119, 106, 106, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 121, 122, 51, 123, 123, 124, 124,
	125, 125, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 126, 46, 46, 127,
	127, 128, 128, 129, 129, 129, 129, 129, 129, 129,
	129, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 130, 130, 133, 134, 134, 23, 135,
	136, 136, 137, 137, 138, 138, 138, 138, 138, 138,
	138, 139, 140, 49, 141, 142, 142, 143, 143, 144,
	144, 144, 144, 144, 144, 144, 50, 145, 146, 146,
	147, 147, 148, 148, 148, 148, 148, 40, 149, 150,
	150, 151, 151, 152, 152, 152, 152, 41, 153, 154,
	155, 155, 79, 79, 80, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 158, 158,
	157, 75, 45, 45, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 159, 159, 43, 161, 162, 163, 163,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 78, 4, 4, 2, 2,
	1, 1, 77, 44, 165, 114, 114, 166, 167, 167,
	168, 168, 168, 168, 168, 169, 16, 18, 14, 15,
	22, 74, 8, 8, 30, 7, 5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 3, 3, 3, 2, 2, 4, 1, 2,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 4, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 0, 1,
	1, 2, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 3, 3,
	1, 2, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 3, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 4, 2, 1,
	1, 2, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 2, 1, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 3, 4, 2, 2, 4, 2, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -135, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -107, -149, -153,
	-118, -161, -165, -159, -126, -87, -101, -141, -145, -122,
	-96, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 7,
	4, 4, 9, -12, -4, 5, 10, 8, -4, -4,
	-4, 71, 72, 73, -4, 8, 10, 8, -4, 5,
	8, 10, 8, 8, 5, 4, 4, 4, 4, -4,
	8, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	10, 8, 8, 8, 8, 8, 10, 8, 10, 8,
	4, 4, 4, 4, 4, 4, 4, 4, 4, -4,
	4, 4, 4, -4, 4, 4, -5, -6, -3, -4,
	6, 8, 8, -8, 55, 10, 8, -28, -29, -16,
	-17, -18, -30, 10, 10, -8, 10, 10, 10, 10,
	-32, -33, -21, 13, -16, -17, -18, -30, -35, -36,
	13, -16, -17, -18, -30, 10, 10, -136, -137, -138,
	-16, -17, -18, -86, -139, -140, -30, 59, 23, 24,
	-55, -56, -57, -58, -16, -17, -18, -59, 65, -65,
	-66, -16, -18, -67, -68, -70, -71, -30, 76, -108,
	-109, -81, -74, -16, -17, -18, -76, -30, -110, 68,
	16, 14, -150, -151, -152, -16, -17, -18, -26, -154,
	-155, -156, -16, -17, -18, -86, -93, -79, -80, -77,
	-78, -157, -75, -158, -26, -92, 36, 37, 20, 33,
	19, 22, 81, 60, -119, -106, -120, -16, -17, -18,
	-86, -93, -77, -78, -121, -26, 74, -162, -163, -164,
	-81, -16, -17, -18, -86, -47, -93, -74, -77, -158,
	-79, -80, -78, -76, -30, -162, -160, -16, -17, -18,
	-86, -47, -93, -77, -78, -30, -127, -128, -129, -16,
	-17, -18, -86, -93, -130, -51, -30, -131, 51, -88,
	-89, -16, -18, -90, -91, 86, 85, -102, -103, -16,
	-17, -18, -104, -26, -86, -93, -105, 39, -142, -143,
	-144, -16, -17, -18, -86, -139, -140, -30, -146, -147,
	-148, -16, -17, -18, -86, -26, -123, -124, -125, -16,
	-17, -18, -86, -93, -41, -42, -43, -44, -45, -46,
	-48, -104, -49, -50, -30, -97, -98, -99, -16, -17,
	-18, -100, -86, -30, 57, -83, -84, -85, -16, -17,
	-18, -86, -30, -8, -3, 5, -7, 9, -29, -33,
	9, 5, -36, 9, 5, 9, -138, -37, -38, -26,
	-37, -4, 8, 8, 9, -57, 10, 8, 5, 9,
	-66, -69, 8, -69, -69, 77, 79, 80, 78, 9,
	-109, 10, 8, 5, -3, 4, 9, -152, 9, -156,
	10, 8, -2, 52, 6, 5, -2, -1, 47, 48,
	-1, -4, -4, 82, 83, -4, 9, -120, -4, 9,
	-164, 9, 9, 9, -129, 10, 8, -4, 9, -89,
	-4, -4, 9, -103, 8, 4, 9, -144, -37, -37,
	9, -148, 9, -125, 9, -99, 4, 9, -85, 9,
	10, 10, 9, -26, 9, -8, -60, -61, -62, -16,
	-17, -18, -63, 66, -72, -73, -74, -47, -75, -76,
	-77, -78, -79, -80, -81, -8, -111, -112, -113, 17,
	63, 45, -114, -100, -115, -81, -116, -117, -30, -166,
	69, 67, 84, 18, -8, -8, -94, -95, -16, -17,
	-18, -30, 10, 10, 10, 10, 10, -8, 10, -8,
	-8, -8, -133, -134, -132, -16, -17, -18, -86, -76,
	-77, -78, -47, -79, -80, -30, -8, -8, -106, 9,
	9, -8, 9, -62, -1, 9, -73, 9, -113, -4,
	-4, -4, 10, 8, -2, -4, -1, 4, 9, -95,
	9, -132, 9, 10, -8, -8, -8, -167, -168, -16,
	-17, -18, -169, -30, 46, 10, -8, -8, 9, -168,
	-2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 426,
	0, 0, 1, 5, 0, 396, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	290, 71, 74, 0, 21, 30, 41, 289, 73, 95,
	0, 329, 0, 220, 0, 0, 362, 0, 257, 259,
	133, 0, 0, 305, 318, 236, 154, 157, 121, 124,
	182, 328, 338, 219, 376, 404, 373, 374, 256, 135,
	178, 304, 317, 234, 156, 123, 0, 427, 428, 192,
	193, 2, 3, 6, 0, 422, 0, 0, 24, 26,
	27, 28, 29, 418, 419, 416, 213, 214, 215, 417,
	0, 31, 34, 0, 36, 37, 38, 39, 0, 42,
	0, 45, 46, 47, 48, 33, 420, 0, 291, 292,
	294, 295, 296, 297, 51, 51, 300, 0, 0, 0,
	0, 75, 76, 78, 79, 80, 81, 0, 0, 0,
	96, 98, 99, 100, 0, 0, 0, 104, 0, 0,
	183, 185, 186, 187, 188, 189, 190, 191, 0, 0,
	0, 0, 0, 330, 331, 333, 334, 335, 336, 0,
	339, 340, 345, 346, 347, 348, 349, 350, 351, 352,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 224, 225, 226,
	227, 228, 229, 230, 231, 232, 0, 0, 377, 378,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 0, 0, 364, 365, 366,
	367, 368, 369, 370, 371, 372, 0, 260, 261, 263,
	264, 265, 266, 267, 268, 269, 270, 0, 0, 0,
	136, 138, 139, 140, 141, 0, 0, 0, 169, 171,
	172, 173, 174, 175, 176, 177, 0, 0, 0, 306,
	307, 309, 310, 311, 312, 51, 51, 315, 0, 319,
	320, 322, 323, 324, 325, 326, 0, 237, 238, 240,
	241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 0, 158, 159, 161, 162,
	163, 164, 165, 166, 0, 0, 125, 126, 128, 129,
	130, 131, 132, 425, 429, 397, 0, 23, 25, 32,
	40, 0, 43, 50, 0, 288, 293, 0, 52, 69,
	0, 0, 301, 302, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 181,
	184, 195, 198, 0, 0, 197, 327, 332, 337, 341,
	146, 0, 0, 0, 398, 399, 0, 0, 400, 401,
	0, 0, 0, 0, 0, 145, 218, 223, 0, 375,
	379, 403, 363, 258, 262, 283, 0, 271, 134, 137,
	0, 0, 168, 170, 0, 180, 303, 308, 0, 0,
	316, 321, 235, 239, 155, 160, 0, 122, 127, 423,
	35, 44, 298, 70, 299, 144, 0, 86, 87, 89,
	90, 91, 92, 0, 0, 110, 112, 113, 114, 115,
	116, 117, 118, 119, 120, 105, 0, 199, 200, 0,
	0, 0, 205, 206, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 0, 421, 194, 0, 148, 150, 151,
	152, 153, 342, 343, 344, 402, 395, 360, 361, 358,
	359, 233, 0, 285, 286, 272, 273, 274, 275, 276,
	277, 278, 279, 280, 281, 282, 142, 143, 0, 313,
	314, 167, 83, 88, 0, 109, 111, 196, 201, 0,
	0, 0, 405, 0, 0, 0, 0, 407, 147, 149,
	284, 287, 179, 93, 202, 203, 204, 0, 408, 410,
	411, 412, 413, 414, 0, 216, 217, 212, 406, 409,
	0, 415,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:173
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:198
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:221
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:230
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:233
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:248
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:261
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:278
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:283
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:303
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:306
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:336
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:339
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:344
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:366
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:369
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:396
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:405
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:410
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:438
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:447
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:456
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:465
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:474
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:497
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:500
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:506
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:529
		{
			yylex.(*lexer).stack.pop()
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:532
		{
			yylex.(*lexer).stack.pop()
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:556
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:565
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:584
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			yylex.(*lexer).stack.pop()
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:596
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:610
		{
			yylex.(*lexer).stack.pop()
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:613
		{
			yylex.(*lexer).stack.pop()
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:618
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:642
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:669
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:678
		{
			yylex.(*lexer).stack.pop()
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:683
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:692
		{
			yylex.(*lexer).stack.pop()
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:697
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:718
		{
			yyVAL.token = yyDollar[1].token
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:719
		{
			yyVAL.token = yyDollar[1].token
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:722
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:731
		{
			yylex.(*lexer).stack.pop()
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:734
		{
			yylex.(*lexer).stack.pop()
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:739
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:755
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:769
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:785
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:799
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:808
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:817
		{
			yylex.(*lexer).stack.pop()
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:822
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:850
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:859
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:868
		{
			yylex.(*lexer).stack.pop()
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:898
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:907
		{
			yylex.(*lexer).stack.pop()
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:910
		{
			yylex.(*lexer).stack.pop()
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:932
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:955
		{
			yylex.(*lexer).stack.pop()
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:958
		{
			yylex.(*lexer).stack.pop()
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:970
		{
			yylex.(*lexer).stack.pop()
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:975
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 298:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:995
		{
			yylex.(*lexer).stack.pop()
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:998
		{
			yylex.(*lexer).stack.pop()
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1004
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1013
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1025
		{
			yylex.(*lexer).stack.pop()
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1030
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1050
		{
			yylex.(*lexer).stack.pop()
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1053
		{
			yylex.(*lexer).stack.pop()
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1062
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1067
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1091
		{
			yylex.(*lexer).stack.pop()
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1118
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1123
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1140
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1147
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1156
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1181
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1188
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 360:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1197
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1209
		{
			yylex.(*lexer).stack.pop()
		}
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1212
		{
			yylex.(*lexer).stack.pop()
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1229
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1236
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1245
		{
			yylex.(*lexer).stack.pop()
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1250
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1286
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1295
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1298
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1303
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1311
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1322
		{
			yyVAL.boolean = true
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1323
		{
			yyVAL.boolean = false
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1326
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 403:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1338
		{
			yylex.(*lexer).stack.pop()
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1343
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1352
		{
			yylex.(*lexer).stack.pop()
		}
	case 406:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1355
		{
			yylex.(*lexer).stack.pop()
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1360
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1379
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1388
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1397
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1406
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1415
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1424
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1433
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1442
		{
			yyVAL.ext = nil
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1445
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1456
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1475
		{
			yyVAL.args = []string{}
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1481
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1484
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
