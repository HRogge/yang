// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

//line parser.y:53
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1426

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1418

var yyAct = [...]int{

	276, 588, 493, 13, 442, 530, 13, 547, 273, 500,
	272, 388, 378, 513, 46, 45, 44, 42, 41, 351,
	446, 408, 202, 40, 39, 38, 37, 359, 382, 315,
	201, 341, 47, 372, 421, 286, 248, 196, 227, 217,
	186, 296, 241, 178, 259, 409, 280, 161, 165, 300,
	279, 16, 72, 160, 284, 155, 452, 453, 209, 425,
	428, 426, 427, 447, 448, 88, 88, 338, 419, 444,
	25, 25, 88, 580, 294, 3, 595, 25, 100, 101,
	102, 336, 583, 163, 21, 162, 574, 21, 573, 539,
	298, 287, 27, 27, 538, 43, 163, 168, 162, 27,
	537, 541, 192, 88, 4, 183, 568, 190, 25, 325,
	199, 85, 213, 219, 536, 443, 297, 204, 270, 535,
	232, 244, 251, 487, 290, 290, 486, 306, 26, 318,
	27, 330, 344, 354, 362, 225, 381, 176, 391, 274,
	171, 225, 11, 161, 170, 11, 161, 161, 374, 373,
	371, 370, 369, 172, 347, 204, 179, 368, 367, 366,
	365, 322, 346, 260, 335, 168, 26, 193, 257, 233,
	299, 299, 256, 311, 295, 295, 332, 310, 183, 302,
	175, 174, 161, 326, 25, 161, 190, 173, 465, 161,
	464, 441, 470, 440, 229, 432, 199, 431, 417, 137,
	416, 136, 245, 261, 282, 563, 27, 394, 561, 213,
	395, 228, 255, 399, 356, 560, 397, 219, 489, 292,
	292, 400, 308, 135, 410, 134, 403, 232, 128, 179,
	127, 488, 126, 407, 125, 485, 166, 215, 254, 483,
	480, 244, 26, 111, 181, 110, 188, 478, 251, 197,
	476, 211, 218, 106, 156, 105, 420, 423, 424, 230,
	242, 249, 93, 288, 288, 430, 304, 415, 316, 445,
	328, 342, 352, 360, 472, 379, 233, 389, 97, 98,
	99, 456, 103, 437, 439, 107, 290, 449, 25, 260,
	467, 462, 88, 434, 257, 461, 460, 25, 256, 458,
	96, 229, 95, 455, 166, 438, 436, 414, 406, 422,
	27, 118, 413, 412, 159, 318, 158, 181, 228, 27,
	129, 459, 245, 133, 275, 188, 132, 12, 131, 261,
	12, 594, 299, 130, 88, 197, 295, 124, 255, 25,
	150, 344, 498, 123, 463, 122, 26, 322, 211, 121,
	120, 354, 88, 88, 282, 26, 218, 25, 180, 362,
	30, 27, 119, 347, 254, 468, 230, 112, 474, 475,
	477, 346, 473, 374, 373, 371, 370, 369, 381, 27,
	242, 292, 368, 367, 366, 365, 479, 249, 391, 88,
	481, 429, 109, 104, 25, 444, 238, 26, 237, 484,
	88, 6, 401, 94, 157, 25, 180, 92, 30, 94,
	433, 418, 405, 402, 469, 26, 27, 396, 496, 113,
	108, 167, 577, 482, 471, 288, 435, 27, 152, 182,
	151, 189, 356, 149, 198, 50, 212, 148, 147, 146,
	145, 144, 533, 143, 231, 243, 250, 142, 289, 289,
	236, 305, 26, 317, 316, 329, 343, 353, 361, 411,
	380, 518, 390, 26, 141, 490, 550, 503, 140, 506,
	139, 138, 504, 505, 117, 116, 115, 114, 90, 510,
	342, 559, 89, 592, 587, 523, 62, 527, 528, 167,
	352, 469, 285, 496, 61, 564, 303, 501, 360, 63,
	258, 247, 182, 246, 540, 59, 542, 543, 240, 567,
	189, 544, 554, 508, 509, 552, 553, 379, 502, 565,
	198, 239, 450, 451, 520, 454, 569, 389, 58, 575,
	533, 350, 169, 212, 349, 579, 562, 68, 457, 507,
	184, 518, 191, 340, 503, 203, 506, 550, 224, 504,
	505, 231, 282, 339, 581, 234, 557, 494, 67, 301,
	301, 555, 312, 277, 323, 243, 195, 348, 456, 375,
	194, 384, 250, 393, 501, 591, 32, 546, 545, 324,
	466, 531, 556, 321, 314, 313, 64, 358, 591, 598,
	508, 509, 357, 554, 69, 502, 552, 553, 281, 599,
	169, 88, 271, 597, 520, 548, 25, 88, 60, 278,
	289, 521, 25, 184, 519, 517, 507, 88, 512, 404,
	265, 191, 25, 187, 584, 585, 586, 511, 27, 235,
	596, 203, 494, 266, 27, 226, 57, 557, 337, 317,
	594, 282, 555, 331, 27, 88, 327, 578, 66, 377,
	25, 376, 224, 600, 70, 529, 262, 387, 386, 204,
	270, 65, 234, 556, 26, 343, 71, 499, 223, 531,
	26, 222, 27, 200, 221, 353, 88, 220, 398, 216,
	26, 25, 34, 361, 88, 252, 548, 291, 291, 25,
	307, 238, 319, 237, 333, 345, 355, 363, 497, 383,
	492, 392, 380, 27, 491, 88, 214, 238, 26, 237,
	25, 27, 390, 265, 589, 268, 210, 208, 207, 88,
	33, 301, 49, 48, 25, 187, 266, 589, 36, 263,
	264, 253, 27, 293, 293, 35, 309, 185, 320, 26,
	334, 29, 495, 364, 177, 236, 27, 26, 28, 164,
	323, 22, 20, 19, 65, 385, 18, 204, 17, 200,
	15, 236, 14, 10, 9, 8, 532, 5, 26, 570,
	571, 572, 2, 88, 1, 154, 348, 153, 25, 0,
	576, 0, 26, 0, 0, 267, 265, 81, 268, 0,
	549, 0, 76, 75, 375, 84, 73, 74, 77, 266,
	27, 78, 263, 264, 82, 0, 0, 0, 83, 79,
	80, 252, 0, 384, 0, 0, 0, 495, 0, 85,
	0, 0, 86, 393, 87, 204, 270, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 88,
	0, 582, 0, 0, 25, 0, 0, 269, 0, 291,
	0, 0, 265, 81, 532, 0, 0, 253, 76, 75,
	0, 84, 73, 74, 77, 266, 27, 78, 522, 0,
	82, 549, 0, 88, 83, 79, 80, 534, 319, 0,
	238, 0, 0, 514, 526, 85, 0, 0, 86, 0,
	87, 204, 270, 65, 0, 293, 0, 0, 0, 590,
	0, 558, 26, 0, 345, 0, 283, 0, 0, 0,
	0, 516, 590, 0, 355, 0, 0, 0, 0, 0,
	0, 0, 363, 385, 320, 0, 0, 0, 0, 515,
	0, 0, 0, 525, 0, 524, 0, 0, 0, 0,
	0, 383, 0, 0, 0, 0, 0, 0, 522, 0,
	88, 392, 91, 0, 7, 25, 51, 0, 30, 0,
	0, 0, 0, 0, 81, 534, 0, 0, 364, 76,
	75, 54, 84, 73, 74, 77, 0, 27, 78, 0,
	0, 82, 558, 52, 53, 83, 79, 80, 0, 0,
	0, 0, 23, 24, 0, 0, 85, 0, 0, 86,
	0, 87, 0, 0, 65, 31, 0, 55, 0, 0,
	593, 88, 0, 26, 0, 7, 25, 51, 56, 30,
	0, 0, 0, 593, 0, 81, 0, 0, 0, 551,
	76, 75, 54, 84, 73, 74, 77, 0, 27, 78,
	0, 0, 82, 0, 52, 53, 83, 79, 80, 0,
	0, 0, 0, 23, 24, 0, 0, 85, 0, 0,
	86, 0, 87, 0, 0, 65, 31, 88, 55, 0,
	0, 0, 25, 0, 26, 0, 0, 0, 0, 56,
	265, 81, 0, 0, 0, 0, 76, 75, 0, 84,
	73, 74, 77, 266, 27, 78, 0, 0, 82, 0,
	0, 0, 83, 79, 80, 0, 0, 0, 0, 0,
	551, 0, 0, 85, 0, 0, 86, 0, 87, 204,
	270, 65, 88, 0, 0, 0, 0, 25, 0, 238,
	26, 237, 0, 0, 283, 265, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 266, 27,
	0, 263, 264, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 25, 0, 204, 270, 65, 0, 0, 0,
	0, 81, 0, 236, 0, 26, 76, 75, 0, 84,
	73, 74, 77, 0, 27, 78, 269, 0, 82, 338,
	0, 0, 83, 79, 80, 0, 0, 0, 0, 88,
	0, 0, 0, 85, 25, 0, 86, 0, 87, 204,
	270, 65, 0, 81, 0, 0, 0, 0, 76, 75,
	26, 84, 73, 74, 77, 0, 27, 78, 0, 0,
	82, 0, 0, 0, 83, 79, 80, 0, 0, 0,
	0, 88, 0, 0, 0, 85, 25, 0, 86, 0,
	87, 204, 0, 65, 0, 81, 0, 0, 0, 0,
	76, 75, 26, 84, 73, 74, 77, 0, 27, 78,
	0, 0, 82, 0, 88, 0, 83, 79, 80, 25,
	0, 0, 0, 0, 0, 0, 0, 85, 81, 0,
	86, 0, 87, 76, 75, 65, 84, 0, 0, 77,
	0, 27, 78, 88, 26, 82, 338, 0, 25, 83,
	79, 80, 237, 0, 0, 0, 265, 0, 0, 88,
	0, 0, 0, 0, 25, 0, 204, 270, 0, 266,
	27, 0, 263, 264, 566, 205, 206, 26, 0, 238,
	0, 237, 0, 0, 0, 265, 27, 268, 0, 0,
	0, 0, 0, 88, 0, 204, 0, 65, 266, 0,
	0, 263, 264, 0, 0, 0, 26, 81, 0, 0,
	0, 204, 76, 75, 0, 84, 73, 74, 77, 0,
	0, 78, 26, 0, 82, 0, 65, 0, 83, 79,
	80, 0, 0, 236, 0, 0, 0, 0, 0, 85,
	0, 0, 86, 0, 87, 0, 0, 65,
}
var yyPact = [...]int{

	50, -1000, 1004, 478, 474, 943, -1000, 404, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 292, 404, 404, 404, 7, 404, 385, 245,
	404, 415, 384, 235, 359, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 414, 473, 472, 471, 470, 404, 354, 342, 341,
	337, 335, 329, 224, 220, 404, 325, 320, 318, 315,
	215, 191, -1000, 467, 466, 464, 460, 443, 439, 437,
	436, 435, 434, 433, 429, 404, 426, 424, 398, 308,
	306, -1000, -1000, 88, -1000, -1000, 327, 134, 130, 88,
	177, 171, 170, 127, 345, -1000, 712, 92, 157, 1322,
	-1000, 172, 65, -1000, -1000, -1000, -1000, -1000, -8, 677,
	1244, 766, 1060, 1115, 1115, -1000, 600, -1000, 58, 88,
	1160, 1322, 1202, 1277, -1000, 698, -1000, 96, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-8, -1000, -1000, 75, 398, -1000, -8, -1000, -1000, -1000,
	-1000, 412, -1000, 346, 669, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 393, -1000, -1000,
	408, -1000, -1000, -1000, -1000, 610, -1000, 407, -1000, -1000,
	-1000, -1000, -1000, -1000, 299, 1322, -1000, -1000, -1000, -1000,
	-1000, 1356, 1356, -1000, 404, 305, 304, 298, 172, -1000,
	-1000, -1000, -1000, -1000, 190, 406, 59, -1000, -1000, -1000,
	-1000, 301, 301, 301, -1000, -18, 382, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 187, 405, 398, 422, 297,
	1244, -1000, -1000, -1000, -1000, -1000, 296, 766, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 183, 63, 389, 16, 16, 404, 404, -26,
	404, 294, 1060, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 404, 290, 1115, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 287, 286, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 282, 58, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 180, 404, -1000, 281, -1000, -1000,
	-1000, 28, 1356, -1000, -1000, -1000, -1000, 184, 420, 265,
	1322, -1000, -1000, -1000, -1000, -1000, 1356, 1356, -1000, 241,
	1202, -1000, -1000, -1000, -1000, -1000, -1000, 238, 1277, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 231, 698, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 419, 230, 96, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 226, -1000, -1000,
	-1000, -1000, 116, -1000, -1000, 113, -1000, -1000, 222, 1356,
	209, 88, -1000, -1000, -1000, -1000, -1000, 276, -1000, -1000,
	-1000, -1000, 693, -1000, -1000, 75, -1000, -1000, -1000, -1000,
	-1000, -1000, 866, 75, 75, -1000, -1000, -1000, -1000, -1000,
	-1000, 327, 109, 104, -1000, 90, 84, -1000, -1000, 79,
	88, 91, 75, 75, -8, -1000, -1000, 88, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1306, -8, -1000, -1000, -1000,
	1060, -1000, -1000, -1000, 206, 199, -1000, -1000, -1000, -1000,
	-1000, -1000, 75, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 196, 276, -1000, -1000, -1000, -1000, -1000, 16, 1335,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 97, 866, -1000, 404, 404, 404, -1000, -1000, -1000,
	-1000, -1000, -1000, 78, 389, 404, 418, -1000, -1000, 638,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 64, 1306, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 832,
	-1000, -1000, -1000, -1000, -1000, 72, -1000, -1000, -1000, -1000,
	88, 88, 88, -1000, 285, 66, 88, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 594, -1000, -1000,
	-1000, -1000, -1000, -1000, 389, -1000, -1000, -1000, -1000, 75,
	-1000,
}
var yyPgo = [...]int{

	0, 20, 4, 55, 254, 777, 775, 52, 53, 774,
	772, 767, 401, 765, 764, 763, 139, 324, 0, 762,
	760, 51, 758, 756, 753, 752, 81, 751, 749, 48,
	435, 748, 744, 43, 741, 737, 40, 21, 45, 735,
	728, 26, 25, 24, 23, 18, 17, 95, 16, 15,
	14, 32, 723, 722, 720, 718, 717, 58, 716, 706,
	704, 700, 2, 698, 682, 679, 39, 677, 674, 34,
	671, 668, 667, 9, 74, 44, 49, 50, 46, 116,
	90, 91, 666, 658, 657, 11, 563, 656, 609, 655,
	5, 654, 651, 649, 12, 28, 648, 646, 643, 33,
	638, 10, 636, 635, 38, 629, 627, 618, 13, 615,
	614, 611, 608, 602, 8, 598, 594, 592, 587, 27,
	586, 585, 584, 29, 583, 579, 7, 578, 577, 576,
	570, 566, 37, 30, 22, 558, 553, 543, 31, 537,
	534, 531, 19, 528, 521, 508, 42, 505, 503, 501,
	36, 500, 41, 499, 496, 494, 54, 492, 35, 486,
	485, 484, 1, 483,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 86, 87, 88, 88, 89, 89,
	90, 90, 90, 90, 52, 52, 91, 92, 92, 93,
	93, 94, 94, 94, 94, 94, 94, 95, 48, 97,
	97, 97, 97, 97, 97, 97, 97, 96, 98, 98,
	99, 100, 39, 102, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 3, 3, 76, 81, 81, 105, 106,
	106, 107, 107, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 17, 17, 17, 110, 111, 42, 112, 113,
	113, 101, 101, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 115, 116, 51, 117, 117, 118, 118, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 119, 119, 120, 46, 46, 121, 121,
	122, 122, 123, 123, 123, 123, 123, 123, 123, 123,
	125, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 124, 124, 127, 128, 128, 23, 129, 130,
	130, 131, 131, 132, 132, 132, 132, 132, 132, 132,
	133, 134, 49, 135, 136, 136, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 50, 139, 140, 140, 141,
	141, 142, 142, 142, 142, 142, 40, 143, 144, 144,
	145, 145, 146, 146, 146, 146, 41, 147, 148, 149,
	149, 79, 79, 80, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 152, 152, 151,
	75, 45, 45, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 153, 153, 43, 155, 156, 157, 157, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 78, 4, 4, 2, 1, 1,
	77, 44, 159, 109, 109, 160, 161, 161, 162, 162,
	162, 162, 162, 163, 16, 18, 14, 15, 22, 74,
	8, 8, 30, 7, 5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 4, 1, 2,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 4, 2, 1, 1,
	2, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 2, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	3, 4, 2, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 3, 0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -129, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -102, -143, -147,
	-112, -155, -159, -153, -120, 61, -96, -135, -139, -116,
	-91, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 38, 42, 29, 53, 56, 58, 7, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	71, 72, 73, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -4,
	8, 8, 8, 8, 10, 8, 10, 8, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, -5, -6, -3, -4, 6, 8, 8,
	-8, 55, 10, 8, -28, -29, -16, -17, -18, -30,
	10, 10, -8, 10, 10, 10, 10, -32, -33, -21,
	13, -16, -17, -18, -30, -35, -36, 13, -16, -17,
	-18, -30, 10, 10, -130, -131, -132, -16, -17, -18,
	-86, -133, -134, -30, 59, 23, 24, -55, -56, -57,
	-58, -16, -17, -18, -59, 65, -65, -66, -16, -18,
	-67, -68, -70, -71, -30, 76, -103, -104, -81, -74,
	-16, -17, -18, -76, -30, -105, 68, 16, 14, -144,
	-145, -146, -16, -17, -18, -26, -148, -149, -150, -16,
	-17, -18, -86, -88, -79, -80, -77, -78, -151, -75,
	-152, -26, -87, 36, 37, 20, 33, 19, 22, 81,
	60, -113, -101, -114, -16, -17, -18, -86, -88, -77,
	-78, -115, -26, 74, -156, -157, -158, -81, -16, -17,
	-18, -86, -47, -88, -74, -77, -152, -79, -80, -78,
	-76, -30, -156, -154, -16, -17, -18, -86, -47, -88,
	-77, -78, -30, -121, -122, -123, -16, -17, -18, -86,
	-88, -124, -51, -30, -125, 51, -8, -97, -16, -17,
	-18, -98, -38, -86, -88, -99, -26, -100, 39, -136,
	-137, -138, -16, -17, -18, -86, -133, -134, -30, -140,
	-141, -142, -16, -17, -18, -86, -26, -117, -118, -119,
	-16, -17, -18, -86, -88, -41, -42, -43, -44, -45,
	-46, -48, -99, -49, -50, -30, -92, -93, -94, -16,
	-17, -18, -95, -86, -30, 57, -83, -84, -85, -16,
	-17, -18, -86, -30, -8, -3, 5, -7, 9, -29,
	-33, 9, 5, -36, 9, 5, 9, -132, -37, -38,
	-37, -4, 8, 8, 9, -57, 10, 8, 5, 9,
	-66, -69, 8, -69, -69, 77, 79, 80, 78, 9,
	-104, 10, 8, 5, -3, 4, 9, -146, 9, -150,
	10, 8, -2, 52, 6, -2, -1, 47, 48, -1,
	-4, -4, 82, 83, -4, 9, -114, -4, 9, -158,
	9, 9, 9, -123, 10, 8, -4, 9, -99, -26,
	8, 4, 9, -138, -37, -37, 9, -142, 9, -119,
	9, -94, 4, 9, -85, 9, 10, 10, 9, 9,
	-8, -60, -61, -62, -16, -17, -18, -63, 66, -72,
	-73, -74, -47, -75, -76, -77, -78, -79, -80, -81,
	-8, -106, -107, -108, 17, 63, 45, -109, -95, -110,
	-81, -111, -30, -160, 69, 67, 18, -8, -8, -89,
	-90, -16, -17, -18, -30, 10, 10, 10, 10, 10,
	-8, 10, -8, -8, -8, -127, -128, -126, -16, -17,
	-18, -86, -76, -77, -78, -47, -79, -80, -30, -101,
	9, 9, -8, 9, -62, -1, 9, -73, 9, -108,
	-4, -4, -4, 10, 8, -2, -4, 4, 9, -90,
	9, -126, 9, 10, -8, -8, -8, -161, -162, -16,
	-17, -18, -163, -30, 46, 10, -8, 9, -162, -2,
	-8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 414, 0,
	0, 1, 5, 0, 385, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 279,
	71, 74, 0, 21, 30, 41, 278, 73, 95, 0,
	318, 0, 209, 0, 0, 351, 0, 246, 248, 0,
	159, 294, 307, 225, 144, 147, 121, 124, 173, 317,
	327, 208, 365, 392, 362, 363, 245, 167, 293, 306,
	223, 146, 123, 0, 415, 416, 183, 184, 2, 3,
	6, 0, 410, 0, 0, 24, 26, 27, 28, 29,
	406, 407, 404, 202, 203, 204, 405, 0, 31, 34,
	0, 36, 37, 38, 39, 0, 42, 0, 45, 46,
	47, 48, 33, 408, 0, 280, 281, 283, 284, 285,
	286, 51, 51, 289, 0, 0, 0, 0, 75, 76,
	78, 79, 80, 81, 0, 0, 0, 96, 98, 99,
	100, 0, 0, 0, 104, 0, 0, 174, 176, 177,
	178, 179, 180, 181, 182, 0, 0, 0, 0, 0,
	319, 320, 322, 323, 324, 325, 0, 328, 329, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 0, 0, 366, 367, 369, 370, 371,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 381,
	382, 383, 0, 0, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 0, 249, 250, 252, 253, 254, 255,
	256, 257, 258, 259, 0, 0, 133, 0, 160, 161,
	162, 163, 164, 165, 166, 168, 69, 0, 0, 0,
	295, 296, 298, 299, 300, 301, 51, 51, 304, 0,
	308, 309, 311, 312, 313, 314, 315, 0, 226, 227,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 148, 149, 151,
	152, 153, 154, 155, 156, 0, 0, 125, 126, 128,
	129, 130, 131, 132, 413, 417, 386, 0, 23, 25,
	32, 40, 0, 43, 50, 0, 277, 282, 0, 52,
	0, 0, 290, 291, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 172,
	175, 186, 189, 0, 0, 188, 316, 321, 326, 330,
	136, 0, 0, 0, 387, 0, 0, 388, 389, 0,
	0, 0, 0, 0, 135, 207, 212, 0, 364, 368,
	391, 352, 247, 251, 272, 0, 260, 158, 169, 70,
	0, 171, 292, 297, 0, 0, 305, 310, 224, 228,
	145, 150, 0, 122, 127, 411, 35, 44, 287, 288,
	134, 0, 86, 87, 89, 90, 91, 92, 0, 0,
	110, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	105, 0, 190, 191, 0, 0, 0, 196, 197, 198,
	199, 200, 201, 0, 0, 0, 0, 409, 185, 0,
	138, 140, 141, 142, 143, 331, 332, 333, 390, 384,
	349, 350, 347, 348, 222, 0, 274, 275, 261, 262,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 0,
	302, 303, 157, 83, 88, 0, 109, 111, 187, 192,
	0, 0, 0, 393, 0, 0, 0, 395, 137, 139,
	273, 276, 170, 93, 193, 194, 195, 0, 396, 398,
	399, 400, 401, 402, 0, 205, 206, 394, 397, 0,
	403,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:163
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:171
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:188
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:211
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:220
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:223
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:238
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:268
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:273
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:293
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:296
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:326
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:329
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:334
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:356
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:359
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:364
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:386
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:395
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:400
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:428
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:437
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:446
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:455
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:464
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:487
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:490
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:496
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:519
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "must", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:528
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:546
		{
			yylex.(*lexer).stack.pop()
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:549
		{
			yylex.(*lexer).stack.pop()
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:563
		{
			yylex.(*lexer).stack.pop()
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:566
		{
			yylex.(*lexer).stack.pop()
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:571
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:595
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:607
		{
			yylex.(*lexer).stack.pop()
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:636
		{
			yylex.(*lexer).stack.pop()
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:641
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:650
		{
			yylex.(*lexer).stack.pop()
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:655
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:676
		{
			yyVAL.token = yyDollar[1].token
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:677
		{
			yyVAL.token = yyDollar[1].token
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:680
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:692
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:697
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:713
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:720
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:727
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:747
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:756
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:765
		{
			yylex.(*lexer).stack.pop()
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:770
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:798
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:807
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:816
		{
			yylex.(*lexer).stack.pop()
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:846
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:855
		{
			yylex.(*lexer).stack.pop()
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:858
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:880
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:903
		{
			yylex.(*lexer).stack.pop()
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:906
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:918
		{
			yylex.(*lexer).stack.pop()
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:923
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:943
		{
			yylex.(*lexer).stack.pop()
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:946
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:952
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:973
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:978
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:998
		{
			yylex.(*lexer).stack.pop()
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1001
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1010
		{
			yylex.(*lexer).stack.pop()
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1015
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1039
		{
			yylex.(*lexer).stack.pop()
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1044
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1066
		{
			yylex.(*lexer).stack.pop()
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1071
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1088
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1095
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1104
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1129
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1136
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1145
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1157
		{
			yylex.(*lexer).stack.pop()
		}
	case 352:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1160
		{
			yylex.(*lexer).stack.pop()
		}
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1177
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1184
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1193
		{
			yylex.(*lexer).stack.pop()
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1198
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1234
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1243
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1246
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1251
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1261
		{
			yyVAL.boolean = true
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1262
		{
			yyVAL.boolean = false
		}
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1265
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1277
		{
			yylex.(*lexer).stack.pop()
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1282
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1291
		{
			yylex.(*lexer).stack.pop()
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1294
		{
			yylex.(*lexer).stack.pop()
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1299
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1318
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1327
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1336
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1345
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1354
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1363
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1372
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1381
		{
			yyVAL.ext = nil
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1384
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1401
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 414:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1414
		{
			yyVAL.args = []string{}
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1420
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1423
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
