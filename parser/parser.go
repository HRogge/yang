// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

//line parser.y:53
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1289

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1279

var yyAct = [...]int{

	258, 537, 255, 13, 485, 412, 13, 361, 279, 498,
	459, 416, 254, 467, 367, 357, 338, 44, 43, 41,
	320, 42, 330, 262, 40, 266, 150, 39, 38, 294,
	37, 197, 261, 212, 204, 351, 36, 35, 277, 45,
	233, 196, 181, 191, 173, 276, 160, 24, 69, 388,
	226, 264, 267, 97, 98, 99, 156, 3, 85, 317,
	24, 387, 414, 24, 417, 418, 529, 16, 274, 26,
	257, 249, 85, 12, 380, 517, 12, 24, 175, 158,
	29, 157, 26, 544, 250, 26, 4, 158, 523, 157,
	522, 483, 187, 431, 163, 430, 411, 532, 410, 26,
	494, 464, 178, 493, 185, 25, 492, 194, 413, 208,
	199, 252, 62, 210, 491, 217, 229, 236, 25, 270,
	270, 25, 285, 218, 297, 171, 309, 323, 333, 341,
	401, 360, 400, 370, 156, 25, 156, 156, 272, 272,
	242, 287, 278, 278, 155, 290, 353, 352, 48, 241,
	350, 275, 275, 349, 289, 240, 348, 347, 326, 346,
	163, 314, 239, 301, 162, 345, 344, 213, 325, 174,
	156, 281, 177, 178, 184, 311, 374, 193, 490, 207,
	166, 185, 165, 214, 453, 216, 228, 235, 452, 269,
	269, 194, 284, 188, 296, 85, 308, 322, 332, 340,
	24, 359, 170, 369, 208, 169, 378, 376, 396, 132,
	395, 131, 217, 130, 123, 129, 122, 379, 168, 121,
	218, 120, 26, 382, 514, 156, 229, 156, 512, 108,
	162, 107, 511, 236, 386, 103, 436, 102, 394, 455,
	174, 167, 164, 177, 93, 399, 92, 199, 454, 403,
	179, 184, 186, 451, 415, 198, 242, 423, 25, 389,
	260, 193, 419, 219, 213, 241, 270, 280, 280, 305,
	291, 240, 302, 408, 207, 327, 406, 354, 239, 363,
	214, 372, 216, 449, 446, 272, 444, 442, 438, 278,
	85, 425, 392, 373, 297, 24, 228, 433, 275, 428,
	85, 427, 527, 235, 426, 24, 200, 201, 164, 424,
	85, 422, 546, 407, 405, 24, 393, 26, 385, 256,
	323, 179, 11, 429, 391, 11, 154, 26, 153, 186,
	333, 128, 127, 301, 126, 125, 269, 26, 341, 198,
	439, 119, 199, 85, 315, 377, 434, 20, 24, 543,
	20, 326, 443, 25, 445, 353, 352, 360, 118, 350,
	219, 325, 349, 25, 296, 348, 347, 370, 346, 117,
	26, 116, 447, 25, 345, 344, 115, 238, 114, 273,
	273, 450, 288, 106, 299, 101, 313, 440, 441, 343,
	322, 91, 152, 6, 85, 151, 414, 462, 91, 89,
	332, 402, 85, 90, 397, 384, 25, 24, 340, 472,
	381, 375, 488, 161, 280, 109, 105, 526, 94, 95,
	96, 176, 100, 183, 448, 104, 192, 359, 206, 26,
	437, 404, 501, 147, 215, 227, 234, 369, 268, 268,
	503, 283, 302, 295, 146, 307, 321, 331, 339, 510,
	358, 506, 368, 144, 474, 505, 143, 142, 124, 462,
	230, 245, 263, 141, 504, 25, 140, 461, 327, 515,
	508, 139, 335, 138, 472, 137, 516, 507, 145, 161,
	518, 136, 487, 135, 524, 488, 354, 134, 133, 528,
	113, 112, 176, 238, 111, 110, 87, 86, 501, 541,
	183, 259, 500, 536, 477, 363, 503, 530, 59, 265,
	192, 58, 282, 423, 60, 372, 243, 506, 232, 474,
	231, 505, 56, 206, 540, 225, 273, 224, 55, 461,
	504, 215, 329, 328, 65, 456, 508, 540, 547, 319,
	318, 64, 190, 507, 189, 227, 31, 481, 482, 548,
	476, 85, 234, 383, 299, 487, 24, 182, 497, 85,
	489, 496, 303, 300, 24, 495, 293, 292, 500, 61,
	230, 337, 336, 66, 253, 57, 475, 245, 26, 473,
	509, 85, 471, 466, 465, 268, 26, 220, 223, 211,
	54, 468, 480, 513, 539, 390, 316, 85, 343, 263,
	310, 306, 24, 304, 223, 82, 222, 539, 195, 63,
	356, 199, 252, 295, 25, 476, 355, 67, 237, 470,
	271, 271, 25, 286, 26, 298, 484, 312, 324, 334,
	342, 364, 362, 489, 371, 246, 366, 469, 365, 321,
	409, 479, 68, 478, 463, 458, 509, 420, 421, 331,
	85, 457, 209, 205, 85, 24, 435, 339, 221, 24,
	25, 223, 203, 222, 533, 534, 535, 249, 202, 32,
	545, 47, 542, 46, 335, 34, 358, 26, 33, 180,
	250, 26, 28, 247, 248, 542, 368, 172, 27, 543,
	159, 85, 195, 549, 21, 19, 24, 175, 85, 29,
	432, 18, 17, 24, 182, 15, 199, 252, 62, 14,
	10, 9, 8, 25, 5, 221, 460, 25, 26, 2,
	1, 149, 85, 148, 88, 26, 7, 24, 49, 0,
	29, 486, 0, 435, 237, 0, 78, 0, 0, 0,
	0, 73, 72, 52, 81, 70, 71, 74, 0, 26,
	75, 499, 0, 79, 25, 50, 51, 80, 76, 77,
	0, 25, 0, 0, 22, 23, 0, 271, 82, 0,
	0, 83, 0, 84, 0, 0, 62, 30, 460, 53,
	0, 263, 0, 85, 0, 25, 0, 0, 24, 0,
	0, 0, 0, 0, 0, 298, 249, 78, 0, 0,
	0, 0, 73, 72, 486, 81, 70, 71, 74, 250,
	26, 75, 0, 0, 79, 0, 0, 499, 80, 76,
	77, 324, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 334, 83, 0, 84, 199, 252, 62, 0, 342,
	0, 0, 0, 538, 0, 0, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 538, 0, 362, 0,
	0, 0, 0, 0, 519, 520, 521, 0, 371, 0,
	0, 0, 85, 0, 0, 525, 7, 24, 49, 0,
	29, 0, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 73, 72, 52, 81, 70, 71, 74, 0, 26,
	75, 0, 0, 79, 0, 50, 51, 80, 76, 77,
	0, 0, 0, 0, 22, 23, 0, 0, 82, 0,
	0, 83, 0, 84, 0, 85, 62, 30, 0, 53,
	24, 0, 0, 502, 0, 25, 0, 251, 249, 78,
	244, 0, 0, 0, 73, 72, 0, 81, 70, 71,
	74, 250, 26, 75, 247, 248, 79, 0, 0, 0,
	80, 76, 77, 0, 0, 0, 0, 85, 0, 531,
	0, 82, 24, 0, 83, 0, 84, 199, 252, 62,
	249, 78, 0, 0, 0, 0, 73, 72, 25, 81,
	70, 71, 74, 250, 26, 75, 0, 0, 79, 502,
	0, 0, 80, 76, 77, 0, 0, 0, 0, 85,
	0, 0, 0, 82, 24, 0, 83, 0, 84, 199,
	252, 62, 0, 78, 0, 0, 0, 0, 73, 72,
	25, 81, 70, 71, 74, 0, 26, 75, 0, 0,
	79, 317, 0, 0, 80, 76, 77, 0, 0, 0,
	0, 85, 0, 0, 0, 82, 24, 0, 83, 0,
	84, 199, 252, 62, 0, 78, 0, 0, 0, 0,
	73, 72, 25, 81, 70, 71, 74, 0, 26, 75,
	0, 0, 79, 0, 0, 0, 80, 76, 77, 0,
	0, 0, 0, 85, 0, 0, 0, 82, 24, 0,
	83, 0, 84, 199, 0, 62, 0, 78, 0, 0,
	0, 0, 73, 72, 25, 81, 70, 71, 74, 0,
	26, 75, 0, 0, 79, 0, 85, 0, 80, 76,
	77, 24, 0, 0, 0, 0, 0, 0, 0, 82,
	78, 0, 83, 0, 84, 73, 72, 62, 81, 0,
	0, 74, 0, 26, 75, 85, 25, 79, 317, 0,
	24, 80, 76, 77, 222, 0, 0, 0, 249, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 199, 252,
	0, 250, 26, 85, 247, 248, 0, 0, 24, 25,
	0, 78, 0, 0, 0, 0, 73, 72, 0, 81,
	70, 71, 74, 0, 0, 75, 0, 199, 79, 62,
	26, 0, 80, 76, 77, 85, 0, 398, 25, 0,
	24, 0, 223, 82, 222, 0, 83, 0, 84, 0,
	0, 62, 0, 364, 0, 199, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 25,
}
var yyPact = [...]int{

	32, -1000, 865, 493, 492, 715, -1000, 393, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 236, 393, 393, 393, -18, 393, 377, 227, 393,
	411, 375, 221, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410,
	491, 490, 487, 486, 370, 368, 363, 361, 350, 333,
	211, 206, 393, 327, 326, 324, 323, 205, 201, -1000,
	484, 483, 479, 477, 471, 469, 467, 462, 459, 453,
	452, 449, 393, 440, 429, 386, 320, 318, -1000, -1000,
	79, -1000, -1000, 395, 172, 170, 79, 208, 195, 192,
	115, 684, -1000, 691, 82, 183, 283, -1000, 48, -1000,
	-1000, -1000, -1000, -1000, 590, 1086, 918, 776, 647, 647,
	-1000, 51, -1000, 552, 79, 1002, 283, 1044, 1119, -1000,
	1176, -1000, 188, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1, -1000, -1000, 71, 386,
	-1000, 1, -1000, -1000, -1000, -1000, 406, -1000, 387, 336,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 65, -1000, -1000, 405, -1000, -1000, -1000, -1000,
	544, -1000, 400, -1000, -1000, -1000, -1000, -1000, -1000, 309,
	283, -1000, -1000, -1000, -1000, -1000, 1170, 1170, -1000, 393,
	316, 284, 307, 48, -1000, -1000, -1000, -1000, -1000, 200,
	399, 1208, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	122, 396, 386, 427, 305, 1086, -1000, -1000, -1000, -1000,
	-1000, 304, 918, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 393, -1000, 88, 56, 390, 17,
	17, 393, 393, 302, 776, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 300, 647, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 295, 292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 290, 552, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 85, 393, -1000, 288, -1000, -1000, -1000,
	20, 1170, -1000, -1000, -1000, -1000, 228, 426, 279, 283,
	-1000, -1000, -1000, -1000, -1000, 1170, 1170, -1000, 278, 1044,
	-1000, -1000, -1000, -1000, -1000, -1000, 277, 1119, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 275, 1176, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 420, 274, 188, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 244, -1000, -1000, -1000,
	-1000, 178, -1000, -1000, 174, -1000, -1000, 239, 1170, 230,
	79, -1000, -1000, -1000, -1000, -1000, 35, -1000, -1000, -1000,
	-1000, 574, 71, 71, -1000, -1000, -1000, -1000, -1000, 81,
	-1000, 395, 168, 104, -1000, 96, 93, -1000, -1000, 90,
	79, 1, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1148, 1, -1000, -1000, -1000, 776, -1000, -1000, -1000,
	223, 219, -1000, -1000, -1000, -1000, -1000, -1000, 71, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 215, 35, -1000,
	-1000, -1000, -1000, -1000, 17, 66, 574, -1000, 393, 393,
	393, -1000, -1000, -1000, -1000, -1000, -1000, 80, 390, 393,
	413, -1000, -1000, -1000, 293, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 57, 1148, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	960, -1000, -1000, -1000, -1000, -1000, 87, -1000, -1000, 79,
	79, 79, -1000, 643, 73, 79, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 303, -1000, -1000, -1000,
	-1000, -1000, -1000, 390, -1000, -1000, -1000, -1000, 71, -1000,
}
var yyPgo = [...]int{

	0, 11, 5, 26, 395, 723, 721, 48, 144, 720,
	719, 714, 393, 712, 711, 710, 319, 70, 0, 709,
	705, 67, 702, 701, 695, 344, 694, 690, 46, 148,
	688, 687, 44, 682, 679, 42, 61, 49, 678, 675,
	37, 36, 30, 28, 27, 24, 19, 21, 18, 17,
	39, 673, 671, 669, 668, 662, 34, 653, 652, 651,
	645, 10, 644, 642, 638, 636, 14, 501, 635, 260,
	626, 4, 617, 616, 610, 15, 7, 609, 601, 600,
	35, 596, 12, 590, 589, 33, 52, 68, 8, 587,
	584, 583, 13, 582, 579, 576, 575, 574, 2, 32,
	23, 573, 572, 571, 16, 569, 567, 566, 29, 563,
	562, 9, 45, 38, 561, 558, 546, 544, 542, 43,
	41, 31, 541, 540, 539, 20, 534, 533, 532, 22,
	528, 527, 525, 50, 522, 520, 518, 40, 516, 514,
	512, 511, 51, 509, 25, 508, 504, 503, 1, 499,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	26, 13, 13, 27, 27, 28, 28, 28, 28, 30,
	31, 31, 21, 32, 32, 32, 32, 32, 32, 19,
	33, 34, 34, 35, 35, 35, 35, 35, 20, 20,
	36, 36, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 37, 37,
	24, 24, 53, 54, 54, 55, 55, 56, 56, 56,
	56, 57, 57, 58, 59, 59, 60, 60, 61, 61,
	61, 61, 62, 52, 52, 63, 64, 64, 65, 65,
	66, 66, 66, 66, 66, 46, 67, 68, 69, 69,
	70, 70, 71, 71, 71, 71, 51, 51, 72, 73,
	73, 74, 74, 75, 75, 75, 75, 75, 75, 76,
	47, 78, 78, 78, 78, 78, 78, 78, 78, 77,
	79, 79, 80, 81, 38, 83, 84, 84, 85, 85,
	85, 85, 85, 85, 85, 3, 3, 88, 86, 86,
	89, 90, 90, 91, 91, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 17, 17, 17, 94, 95, 41,
	96, 97, 97, 82, 82, 98, 98, 98, 98, 98,
	98, 98, 98, 101, 50, 102, 102, 103, 103, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 105, 45, 45, 106, 106,
	107, 107, 108, 108, 108, 108, 108, 108, 108, 108,
	110, 111, 111, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 109, 109, 114, 115, 115, 23, 116, 117,
	117, 118, 118, 119, 119, 119, 119, 119, 119, 119,
	120, 121, 48, 122, 123, 123, 124, 124, 125, 125,
	125, 125, 125, 125, 125, 49, 126, 127, 127, 128,
	128, 129, 129, 129, 129, 129, 39, 130, 131, 131,
	132, 132, 133, 133, 133, 133, 40, 134, 135, 136,
	136, 112, 112, 113, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 138, 44, 44, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 139, 139,
	42, 141, 142, 143, 143, 144, 144, 144, 144, 144,
	144, 144, 144, 144, 144, 144, 144, 144, 144, 100,
	4, 4, 2, 1, 1, 99, 43, 145, 93, 93,
	146, 147, 147, 148, 148, 148, 148, 148, 149, 16,
	18, 14, 15, 22, 87, 8, 8, 29, 7, 5,
	5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 1, 2, 1, 1, 1, 1, 2,
	1, 2, 3, 1, 3, 1, 1, 1, 1, 4,
	2, 1, 2, 3, 1, 1, 1, 1, 2, 4,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 2, 0, 1, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 2, 2, 4,
	1, 2, 1, 1, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 4, 2, 4, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 4,
	2, 0, 1, 1, 2, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 4, 2, 1, 1,
	2, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 2, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 3, 4, 2, 2, 4,
	2, 1, 2, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 3, 1, 3, 0,
	1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, 49, 50, 12, 70, 34, -30, -33, 15,
	62, -116, -53, -38, -39, -40, -41, -42, -43, -44,
	-45, -46, -47, -48, -49, -50, -51, -52, -29, 13,
	40, 41, 28, 64, -83, -130, -134, -96, -141, -145,
	-139, -105, 61, -77, -122, -126, -101, -72, -63, -7,
	30, 31, 27, 26, 32, 35, 43, 44, 21, 38,
	42, 29, 53, 56, 58, 7, 4, 4, 9, -12,
	-4, 5, 10, 8, -4, -4, -4, 71, 72, 73,
	-4, 8, 10, 8, -4, 5, 8, 10, 8, 5,
	4, 4, 4, 4, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -4, 8, 8, 8, 8, 10,
	8, 10, 8, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, -4, 4, 4, -5, -6,
	-3, -4, 6, 8, 8, -8, 55, 10, 8, -27,
	-28, -16, -17, -18, -29, 10, 10, -8, 10, 10,
	10, 10, -31, -32, -21, 13, -16, -17, -18, -29,
	-34, -35, 13, -16, -17, -18, -29, 10, 10, -117,
	-118, -119, -16, -17, -18, -67, -120, -121, -29, 59,
	23, 24, -54, -55, -56, -57, -16, -17, -18, -58,
	65, -84, -85, -86, -87, -16, -17, -18, -88, -29,
	-89, 68, 16, 14, -131, -132, -133, -16, -17, -18,
	-25, -135, -136, -137, -16, -17, -18, -67, -69, -112,
	-113, -99, -100, -138, 22, -25, -68, 36, 37, 20,
	33, 19, 60, -97, -82, -98, -16, -17, -18, -67,
	-69, -99, -100, -25, -142, -143, -144, -86, -16, -17,
	-18, -67, -46, -69, -87, -99, -112, -113, -100, -88,
	-29, -142, -140, -16, -17, -18, -67, -46, -69, -99,
	-100, -29, -106, -107, -108, -16, -17, -18, -67, -69,
	-109, -50, -29, -110, 51, -8, -78, -16, -17, -18,
	-79, -37, -67, -69, -80, -25, -81, 39, -123, -124,
	-125, -16, -17, -18, -67, -120, -121, -29, -127, -128,
	-129, -16, -17, -18, -67, -25, -102, -103, -104, -16,
	-17, -18, -67, -69, -40, -41, -42, -43, -44, -45,
	-47, -80, -48, -49, -29, -73, -74, -75, -16, -17,
	-18, -76, -67, -29, 57, -64, -65, -66, -16, -17,
	-18, -67, -29, -8, -3, 5, -7, 9, -28, -32,
	9, 5, -35, 9, 5, 9, -119, -36, -37, -36,
	-4, 8, 8, 9, -56, 10, 8, 5, 9, -85,
	10, 8, 5, -3, 4, 9, -133, 9, -137, -4,
	10, 8, -2, 52, 6, -2, -1, 47, 48, -1,
	-4, -4, 9, -98, 9, -144, 9, 9, 9, -108,
	10, 8, -4, 9, -80, -25, 8, 4, 9, -125,
	-36, -36, 9, -129, 9, -104, 9, -75, 4, 9,
	-66, 9, 10, 10, 9, 9, -8, -59, -60, -61,
	-16, -17, -18, -62, 66, -90, -91, -92, 17, 63,
	45, -93, -76, -94, -86, -95, -29, -146, 69, 67,
	18, -8, -8, 10, -70, -71, -16, -17, -18, -29,
	10, 10, 10, 10, 10, -8, -114, -115, -111, -16,
	-17, -18, -67, -88, -99, -100, -46, -112, -113, -29,
	-82, 9, 9, -8, 9, -61, -1, 9, -92, -4,
	-4, -4, 10, 8, -2, -4, 4, 9, -71, 9,
	-111, 9, 10, -8, -8, -8, -147, -148, -16, -17,
	-18, -149, -29, 46, 10, -8, 9, -148, -2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 379, 0, 0, 1, 5,
	0, 350, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 249, 70, 73, 20,
	29, 40, 248, 72, 0, 288, 0, 181, 0, 0,
	317, 0, 216, 218, 0, 131, 264, 277, 195, 116,
	119, 93, 96, 145, 287, 297, 180, 331, 357, 328,
	329, 215, 139, 263, 276, 193, 118, 95, 0, 380,
	381, 155, 156, 2, 3, 6, 0, 375, 0, 0,
	23, 25, 26, 27, 28, 371, 372, 369, 174, 175,
	176, 370, 0, 30, 33, 0, 35, 36, 37, 38,
	0, 41, 0, 44, 45, 46, 47, 32, 373, 0,
	250, 251, 253, 254, 255, 256, 50, 50, 259, 0,
	0, 0, 0, 74, 75, 77, 78, 79, 80, 0,
	0, 0, 146, 148, 149, 150, 151, 152, 153, 154,
	0, 0, 0, 0, 0, 289, 290, 292, 293, 294,
	295, 0, 298, 299, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 0, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 182, 183, 185, 186, 187, 188,
	189, 190, 191, 192, 0, 332, 333, 335, 336, 337,
	338, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	348, 0, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 219, 220, 222, 223, 224, 225, 226,
	227, 228, 229, 0, 0, 105, 0, 132, 133, 134,
	135, 136, 137, 138, 140, 68, 0, 0, 0, 265,
	266, 268, 269, 270, 271, 50, 50, 274, 0, 278,
	279, 281, 282, 283, 284, 285, 0, 196, 197, 199,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 0, 120, 121, 123, 124,
	125, 126, 127, 128, 0, 0, 97, 98, 100, 101,
	102, 103, 104, 378, 382, 351, 0, 22, 24, 31,
	39, 0, 42, 49, 0, 247, 252, 0, 51, 0,
	0, 260, 261, 71, 76, 81, 84, 83, 144, 147,
	158, 161, 0, 0, 160, 286, 291, 296, 300, 0,
	108, 0, 0, 0, 352, 0, 0, 353, 354, 0,
	0, 107, 179, 184, 330, 334, 356, 318, 217, 221,
	242, 0, 230, 130, 141, 69, 0, 143, 262, 267,
	0, 0, 275, 280, 194, 198, 117, 122, 0, 94,
	99, 376, 34, 43, 257, 258, 106, 0, 85, 86,
	88, 89, 90, 91, 0, 0, 162, 163, 0, 0,
	0, 168, 169, 170, 171, 172, 173, 0, 0, 0,
	0, 374, 157, 314, 0, 110, 112, 113, 114, 115,
	301, 302, 303, 355, 349, 316, 0, 244, 245, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	0, 272, 273, 129, 82, 87, 0, 159, 164, 0,
	0, 0, 358, 0, 0, 0, 360, 109, 111, 243,
	246, 142, 92, 165, 166, 167, 0, 361, 363, 364,
	365, 366, 367, 0, 177, 178, 359, 362, 0, 368,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:153
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:161
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 20:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:200
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:209
		{
			yylex.(*lexer).stack.pop()
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:212
		{
			yylex.(*lexer).stack.pop()
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:227
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:240
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:257
		{
			yylex.(*lexer).stack.pop()
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:262
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:282
		{
			yylex.(*lexer).stack.pop()
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:285
		{
			yylex.(*lexer).stack.pop()
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:315
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:318
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:323
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:345
		{
			yylex.(*lexer).stack.pop()
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:348
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:353
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:375
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:384
		{
			yylex.(*lexer).stack.pop()
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:387
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:392
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:415
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "must", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:424
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:433
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:442
		{
			yylex.(*lexer).stack.pop()
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:445
		{
			yylex.(*lexer).stack.pop()
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:459
		{
			yylex.(*lexer).stack.pop()
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:462
		{
			yylex.(*lexer).stack.pop()
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:467
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:491
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:503
		{
			yylex.(*lexer).stack.pop()
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:518
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:532
		{
			yylex.(*lexer).stack.pop()
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:537
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:546
		{
			yylex.(*lexer).stack.pop()
		}
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:551
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:572
		{
			yyVAL.token = yyDollar[1].token
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:573
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:576
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:585
		{
			yylex.(*lexer).stack.pop()
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:588
		{
			yylex.(*lexer).stack.pop()
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:593
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:609
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:616
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:623
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:643
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:652
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:661
		{
			yylex.(*lexer).stack.pop()
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:666
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:694
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:703
		{
			yylex.(*lexer).stack.pop()
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:733
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:742
		{
			yylex.(*lexer).stack.pop()
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:745
		{
			yylex.(*lexer).stack.pop()
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:767
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:790
		{
			yylex.(*lexer).stack.pop()
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:793
		{
			yylex.(*lexer).stack.pop()
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:805
		{
			yylex.(*lexer).stack.pop()
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:810
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:830
		{
			yylex.(*lexer).stack.pop()
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:833
		{
			yylex.(*lexer).stack.pop()
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:839
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:848
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:860
		{
			yylex.(*lexer).stack.pop()
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:865
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:885
		{
			yylex.(*lexer).stack.pop()
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:888
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:897
		{
			yylex.(*lexer).stack.pop()
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:902
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:926
		{
			yylex.(*lexer).stack.pop()
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:931
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:953
		{
			yylex.(*lexer).stack.pop()
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:958
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:975
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:982
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:991
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1014
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1023
		{
			yylex.(*lexer).stack.pop()
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1026
		{
			yylex.(*lexer).stack.pop()
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1043
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1050
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 330:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1059
		{
			yylex.(*lexer).stack.pop()
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1064
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1106
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1109
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1114
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1124
		{
			yyVAL.boolean = true
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1125
		{
			yyVAL.boolean = false
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1128
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1140
		{
			yylex.(*lexer).stack.pop()
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1145
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1154
		{
			yylex.(*lexer).stack.pop()
		}
	case 359:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yylex.(*lexer).stack.pop()
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1181
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1190
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1199
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1208
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1226
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1235
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1244
		{
			yyVAL.ext = nil
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1258
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1264
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically secondary extensions have have real extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1277
		{
			yyVAL.args = []string{}
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1283
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1286
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
