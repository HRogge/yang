// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1568

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1629

var yyAct = [...]int16{
	287, 644, 636, 13, 627, 284, 13, 463, 342, 580,
	341, 167, 563, 540, 396, 468, 520, 406, 351, 369,
	400, 283, 309, 377, 527, 359, 48, 427, 347, 338,
	49, 326, 212, 297, 252, 270, 47, 259, 305, 238,
	441, 227, 211, 219, 206, 185, 308, 46, 195, 191,
	311, 172, 285, 655, 146, 11, 307, 75, 11, 474,
	475, 168, 26, 44, 31, 43, 75, 295, 419, 45,
	662, 26, 187, 42, 31, 41, 40, 39, 75, 651,
	659, 621, 3, 26, 28, 16, 445, 448, 446, 447,
	75, 624, 423, 28, 572, 26, 196, 103, 104, 105,
	175, 249, 574, 248, 170, 28, 169, 276, 190, 279,
	199, 4, 571, 209, 179, 223, 229, 28, 570, 569,
	277, 469, 470, 274, 275, 243, 255, 262, 235, 301,
	301, 27, 317, 170, 329, 169, 340, 350, 362, 372,
	380, 298, 399, 27, 409, 568, 513, 168, 85, 266,
	193, 168, 173, 512, 511, 27, 412, 247, 390, 200,
	188, 650, 197, 240, 333, 207, 392, 221, 228, 203,
	365, 291, 175, 265, 193, 244, 391, 241, 253, 260,
	364, 299, 299, 271, 315, 190, 327, 389, 339, 348,
	360, 370, 378, 186, 397, 199, 407, 313, 303, 303,
	413, 319, 236, 388, 202, 387, 209, 182, 181, 75,
	183, 439, 290, 386, 26, 385, 384, 383, 178, 223,
	177, 289, 180, 417, 173, 603, 611, 229, 610, 609,
	418, 608, 598, 607, 75, 606, 28, 188, 243, 26,
	430, 596, 26, 422, 200, 595, 516, 197, 75, 168,
	426, 75, 255, 26, 514, 168, 26, 196, 207, 262,
	510, 28, 435, 168, 28, 168, 239, 75, 440, 656,
	186, 221, 26, 443, 444, 28, 240, 451, 28, 228,
	235, 266, 75, 467, 653, 508, 458, 26, 244, 478,
	241, 505, 26, 471, 28, 225, 460, 301, 268, 27,
	310, 310, 27, 322, 253, 265, 642, 286, 503, 28,
	12, 260, 501, 12, 28, 271, 27, 650, 487, 495,
	486, 466, 465, 462, 75, 461, 329, 497, 345, 344,
	481, 453, 27, 452, 437, 193, 436, 484, 340, 267,
	483, 306, 306, 634, 321, 482, 525, 350, 264, 299,
	304, 304, 27, 320, 480, 331, 333, 485, 354, 362,
	75, 382, 345, 344, 477, 26, 303, 490, 464, 372,
	143, 141, 142, 140, 135, 494, 134, 380, 327, 239,
	133, 75, 132, 489, 498, 459, 26, 28, 502, 457,
	339, 365, 499, 500, 449, 390, 399, 434, 425, 348,
	504, 364, 442, 392, 75, 617, 409, 174, 28, 26,
	506, 360, 214, 391, 52, 189, 131, 198, 130, 433,
	208, 370, 222, 509, 389, 27, 114, 432, 113, 378,
	268, 28, 242, 254, 261, 166, 300, 300, 523, 316,
	388, 328, 387, 517, 349, 361, 371, 379, 397, 398,
	386, 408, 385, 384, 383, 165, 139, 537, 407, 138,
	137, 345, 344, 566, 136, 535, 560, 561, 310, 27,
	109, 267, 108, 99, 545, 98, 129, 128, 530, 174,
	264, 528, 127, 126, 573, 125, 575, 576, 583, 534,
	521, 577, 189, 531, 124, 116, 115, 112, 107, 466,
	465, 6, 198, 592, 593, 97, 148, 95, 97, 306,
	590, 454, 529, 208, 176, 564, 438, 594, 304, 597,
	523, 424, 192, 421, 201, 420, 222, 213, 75, 414,
	234, 123, 117, 26, 589, 249, 599, 248, 585, 245,
	581, 600, 111, 312, 312, 242, 323, 331, 334, 535,
	343, 602, 366, 604, 393, 28, 402, 588, 411, 254,
	545, 612, 530, 566, 618, 528, 261, 507, 354, 496,
	613, 640, 521, 534, 75, 620, 456, 531, 288, 26,
	583, 164, 163, 161, 536, 415, 176, 160, 159, 622,
	157, 247, 75, 27, 619, 547, 529, 26, 382, 192,
	478, 28, 590, 156, 300, 155, 154, 153, 629, 201,
	639, 152, 647, 642, 533, 564, 631, 625, 630, 28,
	213, 151, 150, 149, 121, 652, 589, 629, 120, 119,
	585, 654, 581, 328, 118, 631, 639, 630, 657, 27,
	293, 234, 93, 22, 647, 660, 22, 92, 75, 588,
	658, 635, 245, 26, 349, 532, 551, 27, 661, 587,
	628, 648, 637, 643, 645, 552, 361, 65, 536, 296,
	663, 64, 75, 664, 314, 28, 371, 26, 187, 628,
	31, 547, 66, 269, 379, 258, 257, 62, 637, 251,
	250, 210, 61, 368, 367, 71, 645, 358, 533, 28,
	586, 357, 70, 398, 205, 263, 204, 302, 302, 634,
	318, 312, 330, 408, 33, 353, 363, 373, 381, 579,
	401, 578, 410, 335, 332, 325, 324, 67, 345, 344,
	376, 75, 375, 75, 72, 292, 26, 27, 26, 532,
	334, 282, 248, 63, 632, 522, 276, 215, 216, 147,
	626, 587, 343, 550, 548, 546, 193, 96, 28, 277,
	28, 75, 274, 275, 544, 543, 256, 272, 249, 541,
	565, 556, 558, 366, 100, 101, 102, 352, 106, 374,
	539, 110, 538, 214, 210, 214, 246, 85, 237, 60,
	355, 393, 586, 346, 69, 582, 27, 395, 27, 542,
	394, 73, 562, 273, 75, 337, 68, 405, 122, 26,
	402, 403, 404, 74, 526, 233, 232, 555, 231, 75,
	411, 557, 230, 226, 26, 553, 249, 522, 248, 35,
	524, 28, 276, 519, 518, 158, 224, 263, 220, 162,
	554, 218, 217, 559, 34, 277, 28, 51, 274, 275,
	50, 38, 429, 429, 403, 37, 214, 428, 194, 30,
	184, 75, 29, 171, 23, 36, 26, 21, 549, 27,
	565, 214, 281, 85, 20, 302, 75, 567, 416, 19,
	18, 26, 247, 17, 27, 15, 14, 582, 28, 10,
	9, 8, 256, 5, 2, 280, 75, 1, 145, 272,
	144, 26, 591, 28, 330, 336, 0, 89, 0, 0,
	84, 0, 0, 214, 281, 79, 78, 638, 88, 646,
	0, 80, 0, 28, 81, 353, 27, 86, 356, 601,
	0, 87, 82, 83, 249, 0, 248, 363, 0, 75,
	276, 27, 279, 638, 26, 0, 0, 373, 214, 281,
	0, 646, 276, 277, 549, 381, 274, 275, 0, 0,
	0, 27, 0, 0, 431, 277, 28, 0, 0, 0,
	0, 0, 0, 75, 401, 450, 0, 567, 26, 0,
	249, 85, 248, 0, 410, 0, 0, 352, 0, 0,
	247, 214, 281, 85, 591, 0, 0, 0, 455, 0,
	28, 0, 0, 0, 27, 429, 429, 0, 0, 374,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 641, 0, 649, 0, 472, 473,
	0, 476, 0, 0, 0, 0, 247, 0, 27, 0,
	0, 633, 0, 0, 479, 0, 0, 0, 0, 0,
	641, 0, 0, 0, 0, 0, 0, 0, 649, 0,
	0, 0, 0, 0, 0, 0, 584, 0, 0, 515,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 94,
	0, 7, 26, 53, 0, 31, 488, 0, 0, 0,
	0, 84, 0, 0, 491, 492, 79, 78, 56, 88,
	76, 77, 80, 0, 28, 81, 0, 0, 86, 0,
	54, 55, 87, 82, 83, 0, 0, 0, 0, 24,
	25, 0, 0, 89, 0, 0, 90, 0, 91, 0,
	0, 85, 32, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 27, 0, 0, 75, 0, 58, 0, 7,
	26, 53, 0, 31, 0, 0, 0, 0, 584, 84,
	0, 0, 59, 0, 79, 78, 56, 88, 76, 77,
	80, 0, 28, 81, 0, 0, 86, 0, 54, 55,
	87, 82, 83, 0, 0, 0, 0, 24, 25, 0,
	0, 89, 0, 0, 90, 0, 91, 0, 0, 85,
	32, 0, 57, 0, 0, 0, 0, 0, 0, 75,
	27, 0, 0, 0, 26, 58, 0, 0, 0, 0,
	0, 278, 276, 84, 279, 0, 0, 0, 79, 78,
	59, 88, 76, 77, 80, 277, 28, 81, 274, 275,
	86, 0, 0, 0, 87, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 90, 0,
	91, 214, 281, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 75,
	0, 623, 605, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 276, 84, 0, 614, 615, 616, 79, 78,
	0, 88, 76, 77, 80, 277, 28, 81, 0, 0,
	86, 0, 0, 0, 87, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 90, 0,
	91, 214, 281, 85, 0, 0, 75, 0, 0, 0,
	0, 26, 0, 0, 27, 0, 0, 0, 294, 276,
	84, 0, 0, 0, 0, 79, 78, 0, 88, 76,
	77, 80, 277, 28, 81, 0, 0, 86, 0, 0,
	0, 87, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 0, 90, 0, 91, 214, 281,
	85, 0, 75, 0, 493, 0, 0, 26, 0, 0,
	0, 27, 0, 0, 0, 294, 84, 0, 0, 0,
	0, 79, 78, 0, 88, 76, 77, 80, 0, 28,
	81, 0, 0, 86, 356, 0, 0, 87, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 90, 75, 91, 214, 281, 85, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 27, 0, 0,
	0, 79, 78, 0, 88, 76, 77, 80, 0, 28,
	81, 0, 0, 86, 356, 0, 0, 87, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 90, 75, 91, 214, 281, 85, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 27, 0, 0,
	0, 79, 78, 0, 88, 76, 77, 80, 0, 28,
	81, 0, 0, 86, 0, 0, 0, 87, 82, 83,
	0, 75, 0, 0, 0, 0, 26, 0, 89, 0,
	0, 90, 0, 91, 214, 84, 85, 0, 0, 0,
	79, 78, 0, 88, 76, 77, 80, 27, 28, 81,
	0, 0, 86, 0, 75, 0, 87, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 84, 0,
	90, 0, 91, 79, 78, 85, 88, 76, 77, 80,
	0, 0, 81, 0, 0, 86, 27, 0, 0, 87,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 90, 0, 91, 0, 0, 85,
}

var yyPact = [...]int16{
	57, -1000, 1138, 643, 638, 1070, -1000, 503, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 465, 503, 503, 503, 24, 503, 490,
	462, 503, 537, 489, 418, 488, 487, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 527, 630, 625, 624, 620, 503, 526,
	486, 477, 475, 474, 469, 468, 408, 372, 366, 456,
	452, 451, 448, 363, 362, 500, 619, 618, 617, 607,
	603, 602, 601, 599, 586, 503, 584, 583, 579, 503,
	578, 577, 447, 427, -1000, -1000, 96, -1000, -1000, 397,
	210, 208, 96, 212, 198, 197, 200, 665, -1000, 244,
	194, 159, 724, -1000, 230, 50, 49, -1000, -1000, -1000,
	-1000, -1000, 6, -1000, 521, 1534, 1202, 1339, 812, 812,
	-1000, 932, -1000, 854, -1000, 241, 1445, 724, 1495, 889,
	-1000, 797, -1000, 353, 125, 500, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6, -1000,
	-1000, -1000, 6, -1000, -1000, -1000, -1000, -1000, 524, -1000,
	317, 869, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 59, -1000, -1000, 520, -1000, -1000,
	-1000, -1000, -1000, 518, 83, -1000, 516, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 389, 724, -1000, -1000, -1000, -1000,
	-1000, 1567, 1567, -1000, 503, 419, 411, 388, 230, -1000,
	-1000, -1000, -1000, -1000, 326, 511, 202, -1000, -1000, -1000,
	-1000, 394, 394, 394, -1000, 7, 385, 966, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 323, 506, 503, 572,
	380, 1534, -1000, -1000, -1000, -1000, -1000, 376, 1202, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 315, 316, 494, 74, 74, 503, 503,
	-25, 503, 355, 1339, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 503, 345, 812, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 336, 331, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 328, 854, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 310, 503, 374, -1000, -1000,
	-1000, -1000, -1000, -1000, 503, 503, 1395, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 311, 565, 318, 724, -1000,
	-1000, -1000, -1000, -1000, 1567, 1567, -1000, 303, 1495, -1000,
	-1000, -1000, -1000, -1000, -1000, 299, 889, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 797, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 563, 276, 353, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 251, -1000, -1000, -1000, -1000,
	144, 143, -1000, -1000, 136, -1000, -1000, 245, 1567, -1000,
	237, 96, -1000, -1000, -1000, -1000, -1000, 280, -1000, -1000,
	-1000, -1000, 87, -1000, -1000, 125, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 754, 125, 96, -1000, -1000, -1000, -1000,
	-1000, -1000, 397, 135, 109, -1000, -1000, 108, 102, -1000,
	-1000, 84, 96, 92, 125, 125, 6, -1000, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 726, 6, -1000,
	-1000, 96, 96, -1000, -1000, 1339, -1000, -1000, -1000, 236,
	232, -1000, -1000, -1000, -1000, -1000, -1000, 125, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 223, 280,
	-1000, -1000, -1000, -1000, -1000, 74, 920, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, 754,
	-1000, -1000, 503, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	225, 221, 218, 494, 74, 503, 503, 503, 400, 560,
	-1000, -1000, 585, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 72, 726,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1282, -1000, -1000, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, 96, -1000, 641, -1000, 567,
	-1000, 227, 69, 125, 6, 6, 6, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 275, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -16, 260, -1000, -1000, -1000, -1000,
	-1000, -1000, 494, 71, -1000, -1000, -1000, -1000, -1000, -1000,
	494, -1000, -1000, -1000, -1000, 60, -1000, -1000, 125, -1000,
	-1000, 125, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 15, 7, 54, 749, 900, 898, 414, 11, 897,
	894, 893, 501, 891, 890, 889, 52, 307, 0, 886,
	885, 85, 883, 880, 879, 874, 867, 640, 865, 864,
	863, 51, 862, 860, 45, 49, 859, 858, 48, 27,
	857, 855, 851, 77, 76, 75, 73, 65, 63, 69,
	47, 36, 26, 30, 850, 847, 844, 842, 841, 43,
	838, 836, 834, 833, 16, 830, 829, 823, 41, 822,
	818, 40, 816, 815, 814, 24, 38, 35, 50, 212,
	171, 46, 22, 141, 813, 812, 807, 17, 578, 806,
	805, 29, 10, 8, 803, 221, 802, 12, 801, 800,
	797, 14, 20, 794, 793, 28, 18, 790, 21, 789,
	788, 39, 786, 782, 780, 13, 769, 765, 764, 755,
	754, 753, 750, 4, 744, 743, 741, 5, 735, 734,
	732, 730, 23, 727, 726, 725, 31, 724, 723, 9,
	721, 719, 714, 706, 704, 44, 42, 32, 702, 701,
	697, 25, 695, 694, 693, 19, 692, 690, 689, 34,
	687, 686, 685, 37, 683, 56, 682, 674, 671, 67,
	669, 33, 667, 665, 663, 1, 661, 656, 651, 2,
	571,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 103, 106, 107, 41, 109,
	110, 110, 111, 111, 111, 111, 111, 111, 111, 3,
	3, 78, 83, 83, 112, 113, 113, 114, 114, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	121, 121, 121, 122, 122, 123, 123, 123, 123, 123,
	123, 124, 120, 17, 17, 17, 119, 44, 125, 126,
	126, 108, 108, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 129, 53, 130, 130, 131, 131, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 133, 48, 48, 134, 134,
	135, 135, 136, 136, 136, 136, 136, 136, 136, 136,
	138, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 137, 137, 140, 141, 141, 23, 142, 143,
	143, 144, 144, 145, 145, 145, 145, 145, 145, 145,
	146, 147, 51, 148, 149, 149, 150, 150, 151, 151,
	151, 151, 151, 151, 151, 52, 152, 153, 153, 154,
	154, 155, 155, 155, 155, 155, 42, 156, 157, 157,
	158, 158, 159, 159, 159, 159, 43, 160, 161, 162,
	162, 81, 81, 82, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 165, 165, 164,
	77, 47, 47, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 166, 166, 45, 168, 169, 170, 170, 171,
	171, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 80, 4, 4, 2, 2, 1,
	1, 79, 46, 172, 118, 118, 173, 174, 174, 175,
	175, 175, 175, 175, 176, 117, 117, 177, 178, 178,
	179, 179, 179, 179, 179, 180, 16, 18, 14, 15,
	22, 76, 8, 8, 7, 5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 2, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 2, 0, 1, 1, 2, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 2, 4,
	2, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 4, 2, 1, 1,
	2, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 2, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 3, 4, 2, 2, 4, 2, 1, 2, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 3, 0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -7, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -168, -172, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, 30, 31, 27, 26,
	32, 35, 43, 44, 21, 61, 38, 42, 29, 53,
	56, 58, 4, 4, 9, -12, -4, 5, 10, 8,
	-4, -4, -4, 73, 74, 75, -4, 8, 10, 8,
	-4, 5, 8, 10, 8, 8, 8, 5, 4, 4,
	4, 4, -4, 5, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, 10, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -5, -6, -3, -4, 6, 4,
	4, 4, 4, 4, 4, 4, 4, 4, -4, 4,
	4, 4, -4, 4, 4, 8, 8, -8, 55, 10,
	8, -30, -31, -16, -17, -18, -7, 10, 10, -8,
	10, 10, 10, 10, -33, -34, -21, 13, -16, -17,
	-18, -35, -7, 91, -37, -38, 13, -16, -17, -18,
	-35, -7, 10, 10, -143, -144, -145, -16, -17, -18,
	-88, -146, -147, -7, 59, 23, 24, -57, -58, -59,
	-60, -16, -17, -18, -61, 65, -67, -68, -16, -18,
	-69, -70, -72, -73, -7, 78, -21, -110, -111, -83,
	-76, -16, -17, -18, -78, -7, -112, 70, 16, 14,
	-157, -158, -159, -16, -17, -18, -27, -161, -162, -163,
	-16, -17, -18, -88, -95, -81, -82, -79, -80, -164,
	-77, -165, -27, -94, 36, 37, 20, 33, 19, 22,
	83, 60, -126, -108, -127, -16, -17, -18, -88, -95,
	-79, -80, -128, -27, 76, -169, -170, -171, -83, -16,
	-17, -18, -88, -49, -95, -76, -79, -165, -81, -82,
	-80, -78, -7, -169, -167, -16, -17, -18, -88, -49,
	-95, -79, -80, -7, -134, -135, -136, -16, -17, -18,
	-88, -95, -137, -53, -7, -138, 51, -90, -91, -16,
	-18, -92, -93, -7, 88, 87, -104, -105, -16, -17,
	-18, -106, -27, -88, -95, -107, 39, -149, -150, -151,
	-16, -17, -18, -88, -146, -147, -7, -153, -154, -155,
	-16, -17, -18, -88, -27, -130, -131, -132, -16, -17,
	-18, -88, -95, -43, -44, -45, -46, -47, -48, -50,
	-106, -51, -52, -7, -99, -100, -101, -16, -17, -18,
	-102, -88, -7, 57, -85, -86, -87, -16, -17, -18,
	-88, -7, -8, -3, 5, -7, 9, -31, -34, 9,
	5, 5, -38, 9, 5, 9, -145, -39, -40, -27,
	-39, -4, 8, 8, 9, -59, 10, 8, 5, 9,
	-68, -71, 8, -71, -71, 79, 81, 82, 80, 9,
	9, -111, 10, 8, 5, -4, 4, 9, -159, 9,
	-163, 10, 8, -2, 52, 6, 5, -2, -1, 47,
	48, -1, -4, -4, 84, 85, -4, 9, -127, -4,
	9, -171, 9, 9, 9, -136, 10, 8, -4, 9,
	-91, -4, -4, 9, -105, 8, 4, 9, -151, -39,
	-39, 9, -155, 9, -132, 9, -101, 4, 9, -87,
	9, 10, 10, 10, 9, -27, 9, -8, -62, -63,
	-64, -16, -17, -18, -65, 66, -74, -75, -76, -49,
	-77, -78, -79, -80, -81, -82, -83, -8, -113, -114,
	-115, -116, 45, -117, -118, -102, -119, -83, -120, -7,
	-121, -177, -173, 71, 86, 63, 17, 67, 18, 89,
	-8, -8, -96, -97, -16, -17, -18, -7, 10, 10,
	10, 10, 10, -8, 10, -8, -8, -8, -140, -141,
	-139, -16, -17, -18, -88, -78, -79, -80, -49, -81,
	-82, -7, -8, -8, -108, 9, 9, -8, 9, -64,
	-1, 9, -75, 9, -115, -4, 10, 8, 10, 8,
	10, 8, -2, -1, -4, -4, -4, 5, 4, 9,
	-97, 9, -139, 9, 10, -8, -122, -123, -16, -18,
	-92, -93, -124, -7, 68, -178, -179, -16, -17, -18,
	-180, -7, 46, -174, -175, -16, -17, -18, -176, -7,
	90, 10, -8, 9, -123, 69, 9, -179, -2, 9,
	-175, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 455, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 5, 0, 415, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 309, 77, 80, 0, 0, 24, 33, 45,
	308, 79, 101, 22, 0, 348, 0, 239, 0, 0,
	381, 0, 276, 278, 139, 0, 0, 324, 337, 255,
	161, 164, 127, 130, 0, 456, 457, 199, 200, 189,
	347, 357, 238, 395, 423, 392, 393, 275, 141, 185,
	323, 336, 253, 163, 129, 2, 3, 6, 0, 452,
	0, 0, 27, 29, 30, 31, 32, 448, 449, 446,
	233, 234, 235, 447, 0, 34, 37, 0, 39, 40,
	41, 42, 43, 0, 0, 46, 0, 49, 50, 51,
	52, 53, 36, 450, 0, 310, 311, 313, 314, 315,
	316, 57, 57, 319, 0, 0, 0, 0, 81, 82,
	84, 85, 86, 87, 0, 0, 0, 102, 104, 105,
	106, 0, 0, 0, 110, 0, 0, 0, 190, 192,
	193, 194, 195, 196, 197, 198, 0, 0, 0, 0,
	0, 349, 350, 352, 353, 354, 355, 0, 358, 359,
	364, 365, 366, 367, 368, 369, 370, 371, 372, 373,
	374, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 240, 241, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 0, 0, 396, 397, 399, 400,
	401, 402, 403, 404, 405, 406, 407, 408, 409, 410,
	411, 412, 413, 0, 0, 383, 384, 385, 386, 387,
	388, 389, 390, 391, 0, 279, 280, 282, 283, 284,
	285, 286, 287, 288, 289, 0, 0, 0, 142, 144,
	145, 146, 147, 148, 0, 0, 0, 176, 178, 179,
	180, 181, 182, 183, 184, 0, 0, 0, 325, 326,
	328, 329, 330, 331, 57, 57, 334, 0, 338, 339,
	341, 342, 343, 344, 345, 0, 256, 257, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 0, 165, 166, 168, 169, 170,
	171, 172, 173, 0, 0, 131, 132, 134, 135, 136,
	137, 138, 454, 458, 416, 0, 26, 28, 35, 44,
	0, 0, 47, 55, 0, 307, 312, 0, 58, 75,
	0, 0, 320, 321, 78, 83, 88, 91, 90, 100,
	103, 107, 0, 108, 109, 0, 112, 113, 114, 23,
	188, 191, 202, 205, 0, 0, 204, 346, 351, 356,
	360, 153, 0, 0, 0, 417, 418, 0, 0, 419,
	420, 0, 0, 0, 0, 0, 152, 237, 242, 0,
	394, 398, 422, 382, 277, 281, 302, 0, 290, 140,
	143, 0, 0, 175, 177, 0, 187, 322, 327, 0,
	0, 335, 340, 254, 258, 162, 167, 0, 128, 133,
	453, 38, 56, 48, 317, 76, 318, 151, 0, 92,
	93, 95, 96, 97, 98, 0, 0, 116, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 111, 0, 206,
	207, 209, 0, 211, 212, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	451, 201, 0, 155, 157, 158, 159, 160, 361, 362,
	363, 421, 414, 379, 380, 377, 378, 252, 0, 304,
	305, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 149, 150, 0, 332, 333, 174, 89, 94,
	0, 115, 117, 203, 208, 0, 218, 0, 435, 0,
	424, 0, 0, 0, 220, 221, 222, 437, 426, 154,
	156, 303, 306, 186, 99, 210, 0, 223, 225, 226,
	227, 228, 229, 230, 0, 0, 438, 440, 441, 442,
	443, 444, 0, 0, 427, 429, 430, 431, 432, 433,
	0, 236, 232, 219, 224, 0, 436, 439, 0, 425,
	428, 0, 231, 445, 434,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:204
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:229
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:238
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:243
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:252
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:255
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:270
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:283
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:301
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:306
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:327
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:330
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:335
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:366
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:369
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:396
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:399
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:426
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:435
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:440
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:468
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:477
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:486
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:495
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:504
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:527
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:530
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:536
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:559
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:562
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:586
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:595
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:605
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:614
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:626
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:640
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:643
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:672
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:681
		{
			yylex.(*lexer).stack.pop()
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:699
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:708
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:713
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:722
		{
			yylex.(*lexer).stack.pop()
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:727
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:748
		{
			yyVAL.token = yyDollar[1].token
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:749
		{
			yyVAL.token = yyDollar[1].token
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:752
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:761
		{
			yylex.(*lexer).stack.pop()
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:764
		{
			yylex.(*lexer).stack.pop()
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:769
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:786
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:802
		{
			yylex.(*lexer).stack.pop()
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:805
		{
			yylex.(*lexer).stack.pop()
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:810
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:817
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:824
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:844
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:850
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:864
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:873
		{
			yylex.(*lexer).stack.pop()
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:878
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:906
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:915
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:924
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:954
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:966
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:988
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1011
		{
			yylex.(*lexer).stack.pop()
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1014
		{
			yylex.(*lexer).stack.pop()
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1026
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1031
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1051
		{
			yylex.(*lexer).stack.pop()
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1054
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1060
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1069
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1081
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1086
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1106
		{
			yylex.(*lexer).stack.pop()
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1109
		{
			yylex.(*lexer).stack.pop()
		}
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1118
		{
			yylex.(*lexer).stack.pop()
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1123
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1147
		{
			yylex.(*lexer).stack.pop()
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 356:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1174
		{
			yylex.(*lexer).stack.pop()
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1179
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1196
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1203
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1212
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1237
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1244
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1253
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1265
		{
			yylex.(*lexer).stack.pop()
		}
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1268
		{
			yylex.(*lexer).stack.pop()
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1285
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1292
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 394:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1301
		{
			yylex.(*lexer).stack.pop()
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1306
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1342
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1351
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1354
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1359
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1367
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1378
		{
			yyVAL.boolean = true
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1379
		{
			yyVAL.boolean = false
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1382
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1394
		{
			yylex.(*lexer).stack.pop()
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1399
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 424:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1408
		{
			yylex.(*lexer).stack.pop()
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1411
		{
			yylex.(*lexer).stack.pop()
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1416
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1435
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1444
		{
			yylex.(*lexer).stack.pop()
		}
	case 436:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1447
		{
			yylex.(*lexer).stack.pop()
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1452
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1489
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1507
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1516
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1525
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1534
		{
			yyVAL.ext = nil
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1537
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1542
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1556
		{
			yyVAL.args = []string{}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1562
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 458:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1565
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
