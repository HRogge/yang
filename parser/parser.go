// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:60
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1541

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1496

var yyAct = [...]int16{
	281, 332, 623, 13, 456, 631, 13, 331, 278, 264,
	573, 556, 400, 461, 394, 513, 390, 277, 299, 533,
	520, 421, 292, 345, 46, 363, 353, 45, 44, 253,
	371, 47, 341, 232, 291, 320, 201, 42, 222, 41,
	435, 214, 246, 167, 279, 186, 25, 11, 301, 190,
	11, 40, 39, 641, 38, 467, 468, 141, 37, 567,
	180, 72, 163, 207, 206, 72, 25, 43, 27, 197,
	25, 72, 648, 303, 289, 638, 25, 182, 285, 30,
	439, 442, 440, 441, 100, 101, 102, 302, 27, 165,
	72, 164, 27, 284, 3, 25, 617, 170, 27, 565,
	518, 283, 178, 16, 163, 185, 26, 194, 173, 604,
	204, 603, 218, 224, 163, 462, 463, 27, 564, 563,
	237, 249, 256, 4, 295, 295, 26, 311, 305, 323,
	562, 334, 344, 356, 366, 374, 26, 393, 234, 403,
	561, 168, 233, 506, 637, 339, 338, 163, 602, 183,
	601, 192, 195, 163, 202, 188, 216, 223, 384, 386,
	327, 230, 385, 383, 235, 247, 254, 170, 293, 293,
	265, 309, 382, 321, 381, 333, 342, 354, 364, 372,
	185, 391, 280, 401, 162, 12, 380, 379, 12, 378,
	194, 297, 297, 377, 313, 260, 359, 358, 407, 307,
	262, 204, 304, 304, 165, 316, 164, 172, 181, 259,
	411, 168, 459, 458, 218, 261, 72, 300, 300, 640,
	315, 25, 224, 258, 183, 298, 298, 505, 314, 424,
	325, 504, 237, 348, 192, 195, 376, 420, 198, 416,
	412, 177, 600, 27, 599, 202, 249, 480, 238, 479,
	234, 163, 163, 256, 233, 429, 176, 175, 216, 457,
	434, 455, 446, 454, 445, 444, 223, 614, 437, 438,
	596, 431, 72, 430, 460, 591, 235, 25, 191, 169,
	589, 26, 453, 181, 174, 464, 471, 184, 451, 193,
	247, 295, 203, 138, 217, 137, 136, 254, 135, 27,
	448, 265, 236, 248, 255, 588, 294, 294, 130, 310,
	129, 322, 509, 507, 343, 355, 365, 373, 503, 392,
	323, 402, 25, 501, 406, 474, 260, 128, 126, 127,
	125, 262, 334, 483, 72, 293, 433, 26, 72, 25,
	259, 344, 498, 25, 27, 111, 261, 110, 106, 169,
	105, 327, 496, 356, 258, 478, 188, 96, 297, 95,
	238, 27, 184, 366, 321, 27, 494, 490, 477, 304,
	50, 374, 193, 487, 476, 220, 333, 629, 475, 491,
	492, 493, 26, 203, 300, 342, 473, 470, 495, 452,
	393, 450, 298, 428, 384, 386, 217, 354, 385, 383,
	403, 497, 419, 26, 488, 230, 499, 364, 382, 436,
	381, 427, 502, 594, 236, 372, 359, 358, 243, 426,
	242, 325, 380, 379, 270, 378, 273, 161, 248, 377,
	160, 72, 516, 645, 391, 255, 25, 271, 134, 133,
	268, 269, 348, 72, 401, 413, 523, 132, 25, 182,
	131, 30, 124, 123, 122, 521, 559, 121, 27, 529,
	120, 538, 119, 112, 109, 82, 72, 171, 104, 540,
	27, 25, 376, 294, 241, 187, 514, 196, 72, 270,
	208, 576, 6, 229, 459, 458, 94, 143, 92, 610,
	239, 94, 271, 27, 306, 306, 26, 317, 447, 328,
	557, 337, 322, 360, 522, 387, 587, 396, 26, 405,
	528, 432, 418, 516, 637, 526, 415, 414, 209, 275,
	82, 408, 113, 343, 527, 574, 108, 188, 592, 523,
	525, 26, 593, 611, 500, 355, 409, 171, 521, 72,
	595, 482, 529, 489, 25, 365, 449, 538, 581, 282,
	187, 605, 597, 373, 583, 540, 559, 514, 159, 580,
	196, 606, 158, 156, 72, 524, 27, 613, 582, 25,
	155, 208, 392, 576, 579, 154, 152, 151, 150, 149,
	210, 211, 402, 615, 148, 147, 146, 522, 145, 144,
	117, 27, 229, 528, 116, 115, 471, 114, 526, 90,
	557, 334, 239, 626, 89, 634, 627, 527, 620, 578,
	510, 622, 544, 525, 515, 635, 209, 574, 630, 339,
	338, 334, 483, 626, 530, 643, 545, 62, 290, 26,
	61, 634, 553, 554, 644, 308, 646, 63, 558, 263,
	581, 252, 647, 251, 59, 333, 583, 624, 524, 632,
	566, 580, 568, 569, 245, 244, 58, 570, 362, 205,
	582, 306, 361, 575, 68, 333, 579, 624, 352, 585,
	586, 257, 351, 296, 296, 632, 312, 67, 324, 142,
	200, 347, 357, 367, 375, 590, 395, 93, 404, 72,
	328, 199, 72, 32, 417, 515, 243, 25, 191, 549,
	551, 578, 337, 97, 98, 99, 572, 103, 72, 571,
	107, 329, 326, 25, 287, 319, 318, 21, 64, 27,
	21, 72, 370, 360, 369, 72, 25, 535, 69, 286,
	25, 276, 60, 619, 543, 27, 118, 541, 558, 397,
	539, 387, 537, 536, 534, 548, 532, 531, 27, 550,
	205, 240, 27, 546, 72, 575, 642, 26, 231, 25,
	396, 57, 153, 349, 340, 330, 157, 86, 547, 621,
	405, 552, 66, 209, 275, 397, 188, 209, 389, 388,
	70, 27, 555, 618, 267, 625, 26, 633, 339, 338,
	26, 639, 336, 629, 335, 65, 399, 398, 72, 71,
	612, 72, 257, 25, 519, 625, 25, 72, 243, 410,
	242, 72, 25, 633, 270, 228, 25, 542, 243, 26,
	242, 227, 226, 225, 221, 27, 560, 271, 27, 649,
	268, 269, 650, 34, 27, 250, 266, 243, 27, 242,
	296, 517, 512, 270, 72, 273, 346, 511, 368, 25,
	219, 584, 72, 209, 275, 82, 271, 25, 215, 268,
	269, 242, 213, 26, 241, 270, 26, 212, 33, 324,
	49, 27, 26, 48, 241, 36, 26, 274, 271, 27,
	35, 268, 269, 422, 82, 189, 29, 179, 28, 425,
	347, 166, 22, 241, 20, 19, 209, 18, 17, 15,
	14, 10, 357, 542, 209, 72, 82, 616, 9, 26,
	25, 8, 367, 5, 2, 1, 140, 26, 270, 81,
	375, 423, 423, 139, 76, 75, 560, 85, 73, 74,
	77, 271, 27, 78, 0, 0, 83, 0, 0, 395,
	84, 79, 80, 584, 0, 0, 0, 0, 0, 404,
	0, 86, 465, 466, 87, 469, 88, 209, 275, 82,
	250, 0, 0, 0, 0, 0, 0, 266, 472, 0,
	26, 337, 0, 628, 288, 636, 0, 72, 0, 443,
	72, 0, 25, 0, 243, 25, 242, 0, 0, 0,
	0, 337, 0, 628, 81, 0, 0, 0, 0, 76,
	75, 636, 85, 0, 27, 77, 0, 27, 78, 0,
	481, 83, 350, 0, 0, 84, 79, 80, 484, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 209, 275, 72, 0, 0, 0, 0, 25,
	241, 0, 26, 0, 0, 26, 272, 270, 81, 273,
	0, 0, 0, 76, 75, 346, 85, 73, 74, 77,
	271, 27, 78, 268, 269, 83, 0, 0, 0, 84,
	79, 80, 0, 423, 423, 0, 0, 368, 0, 0,
	86, 0, 0, 87, 0, 88, 209, 275, 82, 0,
	0, 0, 72, 0, 91, 0, 7, 25, 51, 26,
	30, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	274, 76, 75, 54, 85, 73, 74, 77, 0, 27,
	78, 0, 577, 83, 0, 52, 53, 84, 79, 80,
	0, 0, 0, 0, 23, 24, 0, 508, 86, 0,
	0, 87, 0, 88, 0, 0, 82, 31, 0, 55,
	0, 0, 0, 0, 0, 72, 0, 26, 0, 7,
	25, 51, 56, 30, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 76, 75, 54, 85, 73, 74,
	77, 0, 27, 78, 0, 0, 83, 0, 52, 53,
	84, 79, 80, 0, 0, 0, 0, 23, 24, 0,
	0, 86, 0, 0, 87, 0, 88, 0, 0, 82,
	31, 0, 55, 72, 0, 598, 0, 0, 25, 0,
	26, 0, 0, 0, 0, 56, 270, 81, 607, 608,
	609, 0, 76, 75, 0, 85, 73, 74, 77, 271,
	27, 78, 0, 0, 83, 0, 0, 0, 84, 79,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 87, 0, 88, 209, 275, 82, 0, 72,
	0, 486, 0, 0, 25, 0, 0, 0, 26, 0,
	0, 0, 288, 81, 0, 0, 0, 0, 76, 75,
	0, 85, 73, 74, 77, 0, 27, 78, 0, 0,
	83, 350, 0, 0, 84, 79, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 87, 72,
	88, 209, 275, 82, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 26, 0, 0, 0, 76, 75,
	0, 85, 73, 74, 77, 0, 27, 78, 0, 0,
	83, 350, 0, 0, 84, 79, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 87, 72,
	88, 209, 275, 82, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 26, 0, 0, 0, 76, 75,
	0, 85, 73, 74, 77, 0, 27, 78, 0, 0,
	83, 0, 0, 0, 84, 79, 80, 0, 72, 0,
	0, 0, 0, 25, 0, 86, 0, 0, 87, 0,
	88, 209, 81, 82, 0, 0, 0, 76, 75, 0,
	85, 73, 74, 77, 26, 27, 78, 0, 0, 83,
	0, 72, 0, 84, 79, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 81, 0, 87, 0, 88,
	76, 75, 82, 85, 73, 74, 77, 0, 0, 78,
	0, 0, 83, 26, 0, 0, 84, 79, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	87, 0, 88, 0, 0, 82,
}

var yyPact = [...]int16{
	69, -1000, 1148, 600, 595, 1085, -1000, 486, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 349, 486, 486, 486, 11, 486, 460, 340,
	486, 521, 456, 337, 455, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 517, 593, 591, 590, 586, 486, 454, 452, 449,
	446, 445, 444, 320, 319, 300, 442, 439, 431, 430,
	288, 285, 481, 585, 584, 582, 581, 580, 575, 574,
	573, 572, 486, 571, 566, 559, 486, 558, 554, 422,
	419, -1000, -1000, 196, -1000, -1000, 209, 197, 98, 196,
	247, 246, 231, 92, 64, -1000, 265, 59, 228, 557,
	-1000, 310, 83, -1000, -1000, -1000, -1000, -1000, 7, 804,
	1401, 1027, 1206, 794, 794, -1000, 459, -1000, 714, -1000,
	58, 1312, 557, 1362, 973, -1000, 718, -1000, 837, 81,
	481, -1000, 7, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 7, -1000, -1000, -1000, 7, -1000, -1000,
	-1000, -1000, -1000, 516, -1000, 471, 800, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 436,
	-1000, -1000, 512, -1000, -1000, -1000, -1000, -1000, 511, 685,
	-1000, 507, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 393,
	557, -1000, -1000, -1000, -1000, -1000, 1434, 1434, -1000, 486,
	411, 403, 384, 310, -1000, -1000, -1000, -1000, -1000, 263,
	506, 327, -1000, -1000, -1000, -1000, 401, 401, 401, -1000,
	1, 970, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	254, 493, 481, 542, 382, 1401, -1000, -1000, -1000, -1000,
	-1000, 380, 1027, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 253, 207, 479,
	68, 68, 486, 486, -29, 486, 378, 1206, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 486, 377,
	794, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 369, 365, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 359, 714,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 239,
	486, 532, -1000, -1000, -1000, -1000, -1000, -1000, 486, 486,
	1262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 396,
	539, 358, 557, -1000, -1000, -1000, -1000, -1000, 1434, 1434,
	-1000, 357, 1362, -1000, -1000, -1000, -1000, -1000, -1000, 343,
	973, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 333, 718,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, 314, 837,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 309,
	-1000, -1000, -1000, -1000, 221, 217, -1000, -1000, 133, -1000,
	-1000, 304, 1434, -1000, 303, 196, -1000, -1000, -1000, -1000,
	-1000, 34, -1000, -1000, -1000, -1000, 823, -1000, -1000, 81,
	-1000, -1000, -1000, -1000, -1000, -1000, 682, 81, 81, -1000,
	-1000, -1000, -1000, -1000, -1000, 209, 130, 120, -1000, -1000,
	109, 108, -1000, -1000, 89, 196, 49, 81, 81, 7,
	-1000, -1000, 196, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	845, 7, -1000, -1000, 196, 196, -1000, -1000, 1206, -1000,
	-1000, -1000, 296, 271, -1000, -1000, -1000, -1000, -1000, -1000,
	81, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 266, 34, -1000, -1000, -1000, -1000, -1000, 68, 404,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 261, 682, -1000, -1000, 486, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 234, 140, 101, 479, 68, 486, 486,
	486, 484, 529, -1000, -1000, 791, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 258, 845, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 898, -1000, -1000,
	-1000, -1000, -1000, 86, -1000, -1000, -1000, -1000, 196, -1000,
	701, -1000, 331, -1000, 54, 65, 81, 7, 7, 7,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210,
	58, -16, 747, -1000, -1000, -1000, -1000, -1000, -1000, 479,
	424, -1000, -1000, -1000, -1000, -1000, -1000, 479, -1000, -1000,
	-1000, 62, -1000, -1000, 81, -1000, -1000, 81, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 13, 4, 57, 679, 923, 916, 370, 184, 915,
	914, 913, 482, 911, 908, 901, 44, 182, 0, 900,
	899, 103, 898, 897, 895, 894, 714, 892, 891, 43,
	888, 887, 60, 45, 886, 885, 49, 21, 883, 880,
	875, 58, 54, 52, 51, 39, 37, 67, 28, 27,
	24, 31, 873, 870, 868, 867, 862, 41, 858, 850,
	847, 842, 15, 841, 833, 824, 38, 823, 822, 40,
	821, 815, 804, 20, 18, 9, 128, 93, 78, 87,
	73, 22, 799, 797, 796, 12, 549, 795, 7, 1,
	794, 792, 784, 101, 782, 11, 780, 779, 778, 16,
	14, 772, 764, 32, 23, 763, 17, 761, 758, 33,
	751, 747, 746, 19, 744, 743, 742, 740, 737, 734,
	733, 732, 731, 8, 729, 728, 724, 722, 30, 718,
	716, 715, 35, 712, 711, 10, 709, 706, 693, 691,
	680, 36, 64, 63, 677, 672, 668, 26, 664, 662,
	658, 25, 656, 655, 654, 42, 644, 643, 641, 29,
	639, 48, 637, 635, 630, 74, 628, 34, 627, 626,
	618, 5, 615, 612, 611, 2, 606,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	30, 31, 31, 21, 32, 32, 32, 32, 32, 32,
	32, 19, 34, 35, 35, 36, 36, 36, 36, 36,
	36, 20, 20, 33, 37, 37, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 38, 38, 24, 24, 54, 55, 55, 56,
	56, 57, 57, 57, 57, 58, 58, 59, 60, 60,
	61, 61, 62, 62, 62, 62, 63, 25, 64, 65,
	65, 66, 66, 66, 66, 66, 66, 66, 67, 68,
	70, 71, 69, 72, 72, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 53, 53, 82, 83, 83, 84,
	84, 85, 85, 85, 85, 85, 47, 47, 87, 88,
	88, 89, 89, 89, 89, 89, 90, 91, 86, 92,
	93, 93, 94, 94, 95, 95, 95, 95, 52, 52,
	96, 97, 97, 98, 98, 99, 99, 99, 99, 99,
	99, 100, 48, 102, 102, 103, 103, 103, 103, 103,
	103, 103, 101, 104, 105, 39, 107, 108, 108, 109,
	109, 109, 109, 109, 109, 109, 3, 3, 76, 81,
	81, 110, 111, 111, 112, 112, 113, 113, 113, 113,
	113, 113, 113, 113, 113, 114, 114, 119, 119, 119,
	120, 120, 118, 17, 17, 17, 117, 42, 121, 122,
	122, 106, 106, 123, 123, 123, 123, 123, 123, 123,
	123, 123, 124, 125, 51, 126, 126, 127, 127, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 129, 46, 46, 130, 130,
	131, 131, 132, 132, 132, 132, 132, 132, 132, 132,
	134, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 133, 133, 136, 137, 137, 23, 138, 139,
	139, 140, 140, 141, 141, 141, 141, 141, 141, 141,
	142, 143, 49, 144, 145, 145, 146, 146, 147, 147,
	147, 147, 147, 147, 147, 50, 148, 149, 149, 150,
	150, 151, 151, 151, 151, 151, 40, 152, 153, 153,
	154, 154, 155, 155, 155, 155, 41, 156, 157, 158,
	158, 79, 79, 80, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 161, 161, 160,
	75, 45, 45, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 162, 162, 43, 164, 165, 166, 166, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 78, 4, 4, 2, 2, 1,
	1, 77, 44, 168, 116, 116, 169, 170, 170, 171,
	171, 171, 171, 171, 172, 115, 115, 173, 174, 174,
	175, 175, 175, 175, 175, 176, 16, 18, 14, 15,
	22, 74, 8, 8, 7, 5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	1, 4, 2, 1, 2, 3, 1, 1, 1, 1,
	1, 2, 4, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 2, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 3, 4, 2, 1,
	2, 1, 1, 1, 2, 2, 2, 1, 3, 2,
	2, 2, 3, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 2, 4, 2, 1,
	2, 1, 1, 1, 1, 1, 3, 3, 3, 2,
	2, 4, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 4, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 4, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 2, 0, 1, 1, 2, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 2, 4, 2, 2, 2,
	1, 3, 3, 3, 3, 3, 3, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 4, 0, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 4, 0, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 2, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 3, 3, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 3, 1, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 4, 2, 0, 1,
	1, 2, 1, 1, 1, 1, 4, 2, 1, 1,
	2, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 2, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 3, 4, 2, 2, 4, 2, 1, 2, 1,
	1, 1, 1, 1, 3, 2, 4, 2, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 3, 0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 72, 34, -30, -34,
	15, 62, -138, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-7, 13, 40, 41, 28, 64, 77, -107, -152, -156,
	-121, -164, -168, -162, -129, -87, -101, -144, -148, -125,
	-96, -82, 7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 61, 38, 42, 29, 53, 56, 58, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	73, 74, 75, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, 10,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -5,
	-6, -3, -4, 6, 4, 4, 4, 4, 4, 4,
	4, 4, 4, -4, 4, 4, 4, -4, 4, 4,
	8, 8, -8, 55, 10, 8, -28, -29, -16, -17,
	-18, -7, 10, 10, -8, 10, 10, 10, 10, -31,
	-32, -21, 13, -16, -17, -18, -33, -7, 91, -35,
	-36, 13, -16, -17, -18, -33, -7, 10, 10, -139,
	-140, -141, -16, -17, -18, -86, -142, -143, -7, 59,
	23, 24, -55, -56, -57, -58, -16, -17, -18, -59,
	65, -65, -66, -16, -18, -67, -68, -70, -71, -7,
	78, -108, -109, -81, -74, -16, -17, -18, -76, -7,
	-110, 70, 16, 14, -153, -154, -155, -16, -17, -18,
	-26, -157, -158, -159, -16, -17, -18, -86, -93, -79,
	-80, -77, -78, -160, -75, -161, -26, -92, 36, 37,
	20, 33, 19, 22, 83, 60, -122, -106, -123, -16,
	-17, -18, -86, -93, -77, -78, -124, -26, 76, -165,
	-166, -167, -81, -16, -17, -18, -86, -47, -93, -74,
	-77, -161, -79, -80, -78, -76, -7, -165, -163, -16,
	-17, -18, -86, -47, -93, -77, -78, -7, -130, -131,
	-132, -16, -17, -18, -86, -93, -133, -51, -7, -134,
	51, -88, -89, -16, -18, -90, -91, -7, 88, 87,
	-102, -103, -16, -17, -18, -104, -26, -86, -93, -105,
	39, -145, -146, -147, -16, -17, -18, -86, -142, -143,
	-7, -149, -150, -151, -16, -17, -18, -86, -26, -126,
	-127, -128, -16, -17, -18, -86, -93, -41, -42, -43,
	-44, -45, -46, -48, -104, -49, -50, -7, -97, -98,
	-99, -16, -17, -18, -100, -86, -7, 57, -83, -84,
	-85, -16, -17, -18, -86, -7, -8, -3, 5, -7,
	9, -29, -32, 9, 5, 5, -36, 9, 5, 9,
	-141, -37, -38, -26, -37, -4, 8, 8, 9, -57,
	10, 8, 5, 9, -66, -69, 8, -69, -69, 79,
	81, 82, 80, 9, -109, 10, 8, 5, -3, 4,
	9, -155, 9, -159, 10, 8, -2, 52, 6, 5,
	-2, -1, 47, 48, -1, -4, -4, 84, 85, -4,
	9, -123, -4, 9, -167, 9, 9, 9, -132, 10,
	8, -4, 9, -89, -4, -4, 9, -103, 8, 4,
	9, -147, -37, -37, 9, -151, 9, -128, 9, -99,
	4, 9, -85, 9, 10, 10, 10, 9, -26, 9,
	-8, -60, -61, -62, -16, -17, -18, -63, 66, -72,
	-73, -74, -47, -75, -76, -77, -78, -79, -80, -81,
	-8, -111, -112, -113, -114, 45, -115, -116, -100, -117,
	-81, -118, -7, -119, -173, -169, 71, 86, 63, 17,
	67, 18, 89, -8, -8, -94, -95, -16, -17, -18,
	-7, 10, 10, 10, 10, 10, -8, 10, -8, -8,
	-8, -136, -137, -135, -16, -17, -18, -86, -76, -77,
	-78, -47, -79, -80, -7, -8, -8, -106, 9, 9,
	-8, 9, -62, -1, 9, -73, 9, -113, -4, 10,
	8, 10, 8, 10, 8, -2, -1, -4, -4, -4,
	5, 4, 9, -95, 9, -135, 9, 10, -8, -120,
	-88, 68, -174, -175, -16, -17, -18, -176, -7, 46,
	-170, -171, -16, -17, -18, -172, -7, 90, 10, -8,
	9, 69, 9, -175, -2, 9, -171, -2, 10, -8,
	-8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 5, 0, 405, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 0, 0, 0, 299,
	74, 77, 0, 21, 30, 42, 298, 76, 98, 0,
	338, 0, 229, 0, 0, 371, 0, 266, 268, 136,
	0, 0, 314, 327, 245, 158, 161, 124, 127, 0,
	446, 447, 196, 197, 186, 337, 347, 228, 385, 413,
	382, 383, 265, 138, 182, 313, 326, 243, 160, 126,
	2, 3, 6, 0, 442, 0, 0, 24, 26, 27,
	28, 29, 438, 439, 436, 223, 224, 225, 437, 0,
	31, 34, 0, 36, 37, 38, 39, 40, 0, 0,
	43, 0, 46, 47, 48, 49, 50, 33, 440, 0,
	300, 301, 303, 304, 305, 306, 54, 54, 309, 0,
	0, 0, 0, 78, 79, 81, 82, 83, 84, 0,
	0, 0, 99, 101, 102, 103, 0, 0, 0, 107,
	0, 0, 187, 189, 190, 191, 192, 193, 194, 195,
	0, 0, 0, 0, 0, 339, 340, 342, 343, 344,
	345, 0, 348, 349, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 230, 231, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 0, 0,
	386, 387, 389, 390, 391, 392, 393, 394, 395, 396,
	397, 398, 399, 400, 401, 402, 403, 0, 0, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 0, 269,
	270, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 139, 141, 142, 143, 144, 145, 0, 0,
	0, 173, 175, 176, 177, 178, 179, 180, 181, 0,
	0, 0, 315, 316, 318, 319, 320, 321, 54, 54,
	324, 0, 328, 329, 331, 332, 333, 334, 335, 0,
	246, 247, 249, 250, 251, 252, 253, 254, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 0, 162,
	163, 165, 166, 167, 168, 169, 170, 0, 0, 128,
	129, 131, 132, 133, 134, 135, 444, 448, 406, 0,
	23, 25, 32, 41, 0, 0, 44, 52, 0, 297,
	302, 0, 55, 72, 0, 0, 310, 311, 75, 80,
	85, 88, 87, 97, 100, 104, 0, 105, 106, 0,
	109, 110, 111, 185, 188, 199, 202, 0, 0, 201,
	336, 341, 346, 350, 150, 0, 0, 0, 407, 408,
	0, 0, 409, 410, 0, 0, 0, 0, 0, 149,
	227, 232, 0, 384, 388, 412, 372, 267, 271, 292,
	0, 280, 137, 140, 0, 0, 172, 174, 0, 184,
	312, 317, 0, 0, 325, 330, 244, 248, 159, 164,
	0, 125, 130, 443, 35, 53, 45, 307, 73, 308,
	148, 0, 89, 90, 92, 93, 94, 95, 0, 0,
	113, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	108, 0, 203, 204, 206, 0, 208, 209, 210, 211,
	212, 213, 214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 441, 198, 0, 152, 154, 155, 156,
	157, 351, 352, 353, 411, 404, 369, 370, 367, 368,
	242, 0, 294, 295, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 146, 147, 0, 322, 323,
	171, 86, 91, 0, 112, 114, 200, 205, 0, 215,
	0, 425, 0, 414, 0, 0, 0, 217, 218, 219,
	427, 416, 151, 153, 293, 296, 183, 96, 207, 0,
	220, 0, 0, 428, 430, 431, 432, 433, 434, 0,
	0, 417, 419, 420, 421, 422, 423, 0, 226, 222,
	216, 0, 426, 429, 0, 415, 418, 0, 221, 435,
	424,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:186
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:203
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:226
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:235
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:238
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:253
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:266
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:284
		{
			yylex.(*lexer).stack.pop()
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:289
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:310
		{
			yylex.(*lexer).stack.pop()
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:313
		{
			yylex.(*lexer).stack.pop()
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:318
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:349
		{
			yylex.(*lexer).stack.pop()
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:352
		{
			yylex.(*lexer).stack.pop()
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:357
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:379
		{
			yylex.(*lexer).stack.pop()
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:382
		{
			yylex.(*lexer).stack.pop()
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:387
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:409
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:418
		{
			yylex.(*lexer).stack.pop()
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:423
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:451
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:460
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:469
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:478
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:487
		{
			yylex.(*lexer).stack.pop()
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:510
		{
			yylex.(*lexer).stack.pop()
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:513
		{
			yylex.(*lexer).stack.pop()
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:519
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:542
		{
			yylex.(*lexer).stack.pop()
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:545
		{
			yylex.(*lexer).stack.pop()
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:550
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:569
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:578
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:588
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:597
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:606
		{
			yylex.(*lexer).stack.pop()
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:609
		{
			yylex.(*lexer).stack.pop()
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			yylex.(*lexer).stack.pop()
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:626
		{
			yylex.(*lexer).stack.pop()
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:655
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:664
		{
			yylex.(*lexer).stack.pop()
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:682
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:691
		{
			yylex.(*lexer).stack.pop()
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:696
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:705
		{
			yylex.(*lexer).stack.pop()
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:710
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:731
		{
			yyVAL.token = yyDollar[1].token
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:732
		{
			yyVAL.token = yyDollar[1].token
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:735
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:744
		{
			yylex.(*lexer).stack.pop()
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:747
		{
			yylex.(*lexer).stack.pop()
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:752
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:769
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:785
		{
			yylex.(*lexer).stack.pop()
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:788
		{
			yylex.(*lexer).stack.pop()
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:793
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:800
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:807
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:817
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:823
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:837
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 227:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:846
		{
			yylex.(*lexer).stack.pop()
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:851
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:879
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:888
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:897
		{
			yylex.(*lexer).stack.pop()
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:927
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:936
		{
			yylex.(*lexer).stack.pop()
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:939
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:961
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:984
		{
			yylex.(*lexer).stack.pop()
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:987
		{
			yylex.(*lexer).stack.pop()
		}
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:999
		{
			yylex.(*lexer).stack.pop()
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1004
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1024
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1027
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1033
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1042
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1054
		{
			yylex.(*lexer).stack.pop()
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1059
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 322:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1079
		{
			yylex.(*lexer).stack.pop()
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1082
		{
			yylex.(*lexer).stack.pop()
		}
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1091
		{
			yylex.(*lexer).stack.pop()
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1120
		{
			yylex.(*lexer).stack.pop()
		}
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1125
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 346:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1147
		{
			yylex.(*lexer).stack.pop()
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1152
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1169
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1176
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1185
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1210
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1217
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1226
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1238
		{
			yylex.(*lexer).stack.pop()
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1241
		{
			yylex.(*lexer).stack.pop()
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1258
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1265
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1274
		{
			yylex.(*lexer).stack.pop()
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1279
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 404:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1315
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1324
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1327
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1332
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1340
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1351
		{
			yyVAL.boolean = true
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1352
		{
			yyVAL.boolean = false
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1355
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 412:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1367
		{
			yylex.(*lexer).stack.pop()
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1372
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1381
		{
			yylex.(*lexer).stack.pop()
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1384
		{
			yylex.(*lexer).stack.pop()
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1389
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1408
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1417
		{
			yylex.(*lexer).stack.pop()
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1420
		{
			yylex.(*lexer).stack.pop()
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1425
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1444
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1453
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1471
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1480
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1489
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1498
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1507
		{
			yyVAL.ext = nil
		}
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1510
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1515
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1529
		{
			yyVAL.args = []string{}
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1535
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1538
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
