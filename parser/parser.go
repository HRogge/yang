// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1585

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1622

var yyAct = [...]int16{
	287, 649, 641, 13, 467, 632, 13, 344, 343, 284,
	585, 568, 404, 545, 525, 270, 291, 532, 400, 283,
	410, 472, 353, 381, 305, 373, 212, 431, 363, 328,
	349, 340, 298, 48, 311, 316, 297, 252, 45, 259,
	49, 47, 219, 46, 238, 445, 227, 206, 195, 185,
	285, 44, 172, 11, 478, 479, 11, 660, 43, 579,
	42, 168, 75, 41, 443, 31, 307, 26, 191, 202,
	146, 40, 290, 39, 183, 75, 75, 494, 289, 295,
	26, 26, 3, 211, 449, 452, 450, 451, 667, 28,
	103, 104, 105, 309, 167, 170, 75, 169, 661, 626,
	175, 26, 28, 28, 168, 170, 16, 169, 190, 178,
	199, 4, 656, 209, 168, 223, 229, 473, 474, 168,
	616, 629, 615, 28, 577, 243, 255, 262, 576, 301,
	301, 575, 319, 235, 331, 647, 342, 352, 366, 376,
	384, 574, 403, 268, 413, 310, 310, 235, 324, 240,
	173, 177, 168, 357, 168, 347, 346, 239, 188, 244,
	197, 27, 394, 207, 369, 221, 228, 303, 303, 308,
	321, 358, 175, 396, 335, 241, 253, 260, 200, 299,
	299, 395, 317, 393, 329, 190, 341, 350, 364, 374,
	382, 392, 401, 271, 411, 199, 168, 179, 391, 267,
	390, 306, 306, 389, 323, 264, 209, 304, 304, 313,
	322, 388, 333, 387, 186, 356, 417, 573, 386, 223,
	266, 368, 173, 236, 421, 518, 614, 229, 613, 612,
	492, 611, 491, 517, 422, 188, 516, 75, 243, 416,
	434, 75, 26, 426, 608, 197, 26, 203, 249, 75,
	248, 182, 255, 430, 26, 466, 207, 465, 457, 262,
	456, 439, 240, 200, 28, 215, 216, 181, 28, 221,
	239, 180, 244, 444, 75, 268, 28, 228, 447, 448,
	471, 249, 455, 26, 561, 563, 603, 601, 241, 462,
	441, 186, 440, 482, 600, 75, 265, 301, 464, 475,
	26, 214, 253, 521, 247, 28, 27, 519, 143, 260,
	142, 515, 547, 310, 27, 513, 319, 347, 346, 510,
	508, 75, 28, 423, 407, 271, 26, 187, 331, 31,
	560, 267, 324, 485, 562, 303, 225, 264, 558, 141,
	342, 140, 135, 27, 134, 470, 469, 299, 28, 352,
	506, 488, 266, 559, 321, 502, 564, 490, 489, 133,
	27, 132, 131, 366, 130, 357, 317, 487, 335, 306,
	114, 495, 113, 376, 286, 304, 486, 12, 329, 499,
	12, 384, 75, 358, 664, 484, 27, 26, 323, 369,
	341, 503, 468, 109, 322, 108, 504, 505, 507, 350,
	403, 481, 463, 394, 509, 193, 333, 461, 453, 28,
	413, 75, 75, 364, 396, 26, 26, 187, 511, 31,
	438, 75, 395, 374, 393, 429, 26, 356, 265, 75,
	514, 382, 392, 99, 26, 98, 500, 28, 28, 391,
	446, 390, 528, 437, 389, 436, 368, 27, 28, 166,
	401, 165, 388, 139, 387, 138, 28, 137, 136, 386,
	411, 75, 535, 538, 129, 655, 26, 571, 647, 530,
	550, 533, 128, 214, 174, 27, 27, 127, 126, 541,
	125, 536, 189, 124, 198, 534, 27, 208, 28, 222,
	552, 116, 526, 588, 27, 193, 115, 112, 107, 242,
	254, 261, 622, 300, 300, 97, 318, 458, 330, 592,
	442, 351, 365, 375, 383, 6, 402, 569, 412, 537,
	599, 95, 639, 75, 75, 528, 624, 590, 26, 26,
	522, 593, 428, 75, 425, 420, 470, 469, 26, 604,
	540, 347, 346, 586, 542, 52, 174, 535, 538, 607,
	28, 28, 605, 565, 566, 424, 533, 550, 609, 189,
	28, 97, 148, 617, 541, 591, 536, 418, 571, 198,
	534, 578, 123, 580, 581, 526, 117, 552, 582, 625,
	208, 618, 111, 623, 501, 588, 595, 460, 27, 27,
	164, 597, 598, 222, 163, 627, 161, 160, 27, 159,
	157, 592, 156, 155, 537, 154, 655, 602, 153, 482,
	152, 151, 242, 634, 150, 644, 539, 652, 569, 590,
	636, 635, 149, 593, 121, 540, 254, 120, 119, 118,
	93, 92, 634, 261, 645, 586, 640, 659, 556, 636,
	635, 644, 75, 662, 427, 176, 653, 26, 196, 652,
	665, 648, 663, 192, 557, 201, 65, 591, 213, 296,
	666, 234, 594, 633, 288, 642, 64, 650, 315, 28,
	245, 300, 314, 66, 312, 312, 269, 325, 595, 336,
	258, 345, 633, 370, 257, 397, 62, 406, 251, 415,
	318, 642, 293, 250, 61, 22, 372, 371, 22, 650,
	71, 539, 330, 362, 75, 630, 249, 27, 248, 26,
	196, 361, 276, 657, 279, 70, 419, 176, 205, 204,
	33, 584, 583, 351, 337, 277, 193, 334, 274, 275,
	192, 28, 327, 326, 67, 380, 379, 365, 147, 72,
	201, 292, 282, 63, 637, 631, 96, 375, 555, 553,
	551, 213, 549, 85, 594, 383, 548, 546, 668, 544,
	543, 669, 247, 100, 101, 102, 246, 106, 237, 27,
	110, 60, 234, 359, 402, 348, 69, 210, 399, 398,
	73, 567, 273, 245, 412, 75, 339, 658, 193, 68,
	26, 263, 409, 302, 302, 75, 320, 122, 332, 408,
	26, 355, 367, 377, 385, 74, 405, 531, 414, 233,
	232, 231, 28, 230, 226, 35, 527, 529, 256, 272,
	524, 523, 28, 224, 158, 75, 220, 218, 162, 354,
	26, 378, 249, 217, 248, 34, 51, 50, 276, 38,
	37, 570, 312, 432, 194, 407, 639, 214, 30, 184,
	29, 277, 28, 171, 274, 275, 23, 36, 21, 20,
	27, 325, 19, 18, 17, 347, 346, 587, 15, 75,
	210, 14, 10, 336, 26, 75, 9, 214, 281, 85,
	26, 8, 5, 2, 1, 345, 145, 144, 247, 84,
	27, 0, 0, 0, 79, 78, 28, 88, 0, 527,
	80, 280, 28, 81, 433, 433, 86, 360, 370, 0,
	87, 82, 83, 338, 0, 89, 0, 0, 0, 0,
	75, 214, 281, 263, 0, 26, 397, 214, 281, 248,
	75, 0, 0, 276, 27, 26, 0, 0, 0, 0,
	27, 0, 570, 276, 256, 406, 277, 28, 0, 274,
	275, 272, 0, 435, 0, 415, 277, 28, 0, 587,
	0, 302, 0, 0, 0, 0, 75, 0, 454, 0,
	0, 26, 214, 249, 85, 248, 0, 0, 0, 0,
	320, 0, 214, 281, 85, 27, 0, 459, 0, 643,
	0, 651, 332, 28, 0, 27, 0, 606, 0, 0,
	0, 0, 249, 554, 248, 0, 0, 0, 276, 0,
	279, 0, 572, 355, 0, 643, 0, 476, 477, 0,
	480, 277, 0, 651, 274, 275, 0, 367, 0, 247,
	0, 27, 0, 483, 0, 0, 0, 377, 596, 0,
	0, 354, 0, 0, 0, 385, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 247, 0,
	0, 433, 433, 0, 405, 378, 0, 0, 0, 0,
	0, 0, 0, 0, 414, 75, 0, 493, 0, 0,
	26, 0, 0, 0, 0, 496, 497, 0, 276, 84,
	554, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 277, 28, 81, 0, 0, 86, 0, 0, 0,
	87, 82, 83, 572, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 90, 520, 91, 214, 281, 85,
	596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 294, 0, 512, 75, 0, 94,
	0, 7, 26, 53, 0, 31, 0, 589, 638, 0,
	646, 84, 654, 0, 0, 0, 79, 78, 56, 88,
	76, 77, 80, 0, 28, 81, 0, 638, 86, 0,
	54, 55, 87, 82, 83, 0, 646, 0, 0, 24,
	25, 0, 0, 89, 654, 0, 90, 0, 91, 0,
	0, 85, 32, 0, 57, 0, 0, 0, 0, 0,
	0, 0, 27, 0, 0, 0, 0, 58, 0, 75,
	0, 0, 0, 7, 26, 53, 0, 31, 0, 0,
	0, 0, 59, 84, 0, 0, 0, 0, 79, 78,
	56, 88, 76, 77, 80, 0, 28, 81, 0, 589,
	86, 0, 54, 55, 87, 82, 83, 0, 0, 0,
	0, 24, 25, 0, 0, 89, 0, 0, 90, 0,
	91, 0, 0, 85, 32, 0, 57, 0, 0, 0,
	0, 0, 0, 75, 27, 0, 610, 0, 26, 58,
	0, 0, 0, 0, 0, 278, 276, 84, 279, 619,
	620, 621, 79, 78, 59, 88, 76, 77, 80, 277,
	28, 81, 274, 275, 86, 0, 0, 0, 87, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 90, 0, 91, 214, 281, 85, 75, 0,
	628, 0, 0, 26, 0, 0, 0, 0, 27, 0,
	0, 276, 84, 0, 0, 0, 0, 79, 78, 280,
	88, 76, 77, 80, 277, 28, 81, 0, 0, 86,
	0, 0, 0, 87, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 0, 0, 90, 0, 91,
	214, 281, 85, 0, 0, 75, 0, 498, 0, 0,
	26, 0, 0, 27, 248, 0, 0, 294, 0, 84,
	0, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 277, 28, 81, 0, 0, 86, 360, 0, 0,
	87, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 90, 75, 91, 214, 281, 85,
	26, 0, 0, 0, 248, 0, 0, 0, 0, 84,
	27, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 277, 28, 81, 0, 0, 86, 360, 0, 0,
	87, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 90, 75, 91, 214, 281, 85,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	27, 0, 0, 0, 79, 78, 0, 88, 76, 77,
	80, 0, 28, 81, 0, 0, 86, 0, 0, 0,
	87, 82, 83, 0, 75, 0, 0, 0, 0, 26,
	0, 89, 0, 0, 90, 0, 91, 214, 84, 85,
	0, 0, 0, 79, 78, 0, 88, 76, 77, 80,
	27, 28, 81, 0, 0, 86, 0, 75, 0, 87,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 84, 0, 90, 0, 91, 79, 78, 85, 88,
	76, 77, 80, 0, 0, 81, 0, 0, 86, 27,
	0, 0, 87, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 90, 0, 91, 0,
	0, 85,
}

var yyPact = [...]int16{
	57, -1000, 1212, 627, 626, 1140, -1000, 500, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 425, 500, 500, 500, 17, 500, 490,
	385, 500, 577, 489, 362, 488, 483, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 571, 625, 624, 623, 620, 500, 567,
	475, 472, 470, 469, 464, 456, 354, 351, 334, 450,
	449, 447, 445, 331, 300, 556, 618, 610, 607, 606,
	604, 601, 599, 598, 596, 500, 595, 593, 592, 500,
	590, 586, 443, 441, -1000, -1000, 97, -1000, -1000, 288,
	141, 99, 97, 261, 257, 241, 64, 404, -1000, 697,
	59, 237, 242, -1000, 271, 69, 50, -1000, -1000, -1000,
	-1000, -1000, 6, -1000, 234, 1527, 1276, 1068, 818, 818,
	-1000, 923, -1000, 862, -1000, 230, 1438, 242, 1488, 868,
	-1000, 788, -1000, 414, 87, 556, -1000, 6, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 6, -1000,
	-1000, -1000, 6, -1000, -1000, -1000, -1000, -1000, 562, -1000,
	405, 526, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 314, -1000, -1000, 550, -1000, -1000,
	-1000, -1000, -1000, 529, 635, -1000, 527, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 416, 242, -1000, -1000, -1000, -1000,
	-1000, 1560, 1560, -1000, 500, 437, 435, 411, 271, -1000,
	-1000, -1000, -1000, -1000, 282, 505, 55, -1000, -1000, -1000,
	-1000, 432, 432, 432, -1000, 5, 399, 959, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 250, 502, 500, 583,
	398, 1527, -1000, -1000, -1000, -1000, -1000, 393, 1276, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 247, 340, 531, 70, 70, 500, 500,
	-30, 500, 392, 1068, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 500, 376, 818, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 367, 358, 923, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 349, 862, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 222, 500, 68,
	-1000, -1000, -1000, -1000, -1000, -1000, 500, 500, 1388, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 428,
	580, 346, 242, -1000, -1000, -1000, -1000, -1000, 1560, 1560,
	-1000, 341, 1488, -1000, -1000, -1000, -1000, -1000, -1000, 311,
	868, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 310, 788,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 500, 306, 414,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 302,
	-1000, -1000, -1000, -1000, 226, 223, -1000, -1000, 215, -1000,
	-1000, 298, 1560, -1000, 294, 97, -1000, -1000, -1000, -1000,
	-1000, 403, -1000, -1000, -1000, -1000, 692, -1000, -1000, 87,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 267, 87, 97,
	-1000, -1000, -1000, -1000, -1000, -1000, 288, 207, 131, -1000,
	-1000, 121, 118, -1000, -1000, 114, 97, 49, 87, 87,
	6, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 913, 6, -1000, -1000, 97, 97, -1000, -1000,
	1068, -1000, -1000, -1000, 285, 278, -1000, -1000, -1000, -1000,
	-1000, -1000, 97, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 277, 403, -1000, -1000, -1000, -1000, -1000,
	70, 988, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 235, 267, -1000, -1000, 500, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 221, 218, 112, 531, 70,
	500, 500, 500, 497, 579, -1000, -1000, 517, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 90, 913, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1331,
	-1000, -1000, -1000, -1000, -1000, 111, -1000, -1000, -1000, -1000,
	97, -1000, 454, -1000, 422, -1000, 516, 102, 87, 6,
	6, 6, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 778, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -12,
	89, -1000, -1000, -1000, -1000, -1000, -1000, 531, 375, -1000,
	-1000, -1000, -1000, -1000, -1000, 531, -1000, -1000, -1000, -1000,
	78, -1000, -1000, 87, -1000, -1000, 87, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 21, 4, 70, 738, 887, 886, 545, 94, 884,
	883, 882, 515, 881, 876, 872, 50, 374, 0, 871,
	868, 106, 864, 863, 862, 859, 858, 692, 857, 856,
	853, 52, 850, 849, 49, 68, 848, 844, 48, 27,
	843, 840, 839, 73, 71, 63, 60, 58, 51, 38,
	43, 41, 33, 40, 837, 836, 835, 833, 827, 42,
	826, 823, 821, 820, 14, 817, 815, 814, 46, 813,
	811, 45, 810, 809, 807, 17, 24, 15, 34, 72,
	16, 169, 93, 32, 805, 799, 792, 20, 664, 789,
	786, 31, 8, 7, 782, 78, 781, 11, 780, 779,
	778, 18, 12, 776, 775, 30, 22, 773, 19, 771,
	768, 44, 766, 760, 759, 13, 757, 756, 752, 750,
	749, 748, 745, 5, 744, 743, 742, 9, 741, 739,
	736, 735, 23, 734, 733, 732, 29, 727, 724, 10,
	722, 721, 720, 719, 718, 47, 83, 26, 715, 711,
	703, 28, 700, 697, 696, 25, 694, 693, 688, 37,
	686, 684, 680, 39, 676, 66, 673, 672, 668, 35,
	666, 79, 659, 36, 656, 654, 651, 1, 646, 638,
	636, 2, 634,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 103, 106, 107,
	41, 109, 110, 110, 111, 111, 111, 111, 111, 111,
	111, 3, 3, 78, 83, 83, 112, 113, 113, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 121, 121, 121, 122, 122, 123, 123, 123,
	123, 123, 123, 124, 120, 17, 17, 17, 119, 44,
	125, 126, 126, 108, 108, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 129, 53, 130, 130, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 48, 48,
	134, 134, 135, 135, 136, 136, 136, 136, 136, 136,
	136, 136, 138, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 137, 137, 140, 141, 141, 23,
	142, 143, 143, 144, 144, 145, 145, 145, 145, 145,
	145, 145, 146, 147, 51, 148, 149, 149, 150, 150,
	151, 151, 151, 151, 151, 151, 151, 52, 152, 153,
	153, 154, 154, 155, 155, 155, 155, 155, 42, 156,
	157, 157, 158, 158, 159, 159, 159, 159, 43, 160,
	161, 162, 162, 81, 81, 82, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 165,
	165, 164, 77, 47, 47, 167, 168, 168, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 166, 166, 45,
	170, 171, 172, 172, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 173, 173, 173, 173, 80,
	4, 4, 2, 2, 1, 1, 79, 46, 174, 118,
	118, 175, 176, 176, 177, 177, 177, 177, 177, 178,
	117, 117, 179, 180, 180, 181, 181, 181, 181, 181,
	182, 16, 18, 14, 15, 22, 76, 8, 8, 7,
	5, 5, 6, 6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 2, 0, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	2, 4, 2, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 2, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 4, 2,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 4, 2, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	2, 4, 2, 1, 2, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	0, 1, 1, 2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -7, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -170, -174, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, 30, 31, 27, 26,
	32, 35, 43, 44, 21, 61, 38, 42, 29, 53,
	56, 58, 4, 4, 9, -12, -4, 5, 10, 8,
	-4, -4, -4, 73, 74, 75, -4, 8, 10, 8,
	-4, 5, 8, 10, 8, 8, 8, 5, 4, 4,
	4, 4, -4, 5, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, 10, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -5, -6, -3, -4, 6, 4,
	4, 4, 4, 4, 4, 4, 4, 4, -4, 4,
	4, 4, -4, 4, 4, 8, 8, -8, 55, 10,
	8, -30, -31, -16, -17, -18, -7, 10, 10, -8,
	10, 10, 10, 10, -33, -34, -21, 13, -16, -17,
	-18, -35, -7, 91, -37, -38, 13, -16, -17, -18,
	-35, -7, 10, 10, -143, -144, -145, -16, -17, -18,
	-88, -146, -147, -7, 59, 23, 24, -57, -58, -59,
	-60, -16, -17, -18, -61, 65, -67, -68, -16, -18,
	-69, -70, -72, -73, -7, 78, -21, -110, -111, -83,
	-76, -16, -17, -18, -78, -7, -112, 70, 16, 14,
	-157, -158, -159, -16, -17, -18, -27, -161, -162, -163,
	-16, -17, -18, -88, -95, -81, -82, -79, -80, -164,
	-77, -165, -27, -94, 36, 37, 20, 33, 19, 22,
	83, 60, -126, -108, -127, -16, -17, -18, -88, -95,
	-79, -80, -128, -27, 76, -171, -172, -173, -83, -16,
	-17, -18, -88, -49, -95, -76, -79, -165, -81, -82,
	-80, -78, -7, -171, -167, -168, -169, -16, -17, -18,
	-88, -49, -95, -79, -80, -7, -134, -135, -136, -16,
	-17, -18, -88, -95, -137, -53, -7, -138, 51, -90,
	-91, -16, -18, -92, -93, -7, 88, 87, -104, -105,
	-16, -17, -18, -106, -27, -88, -95, -80, -78, -107,
	39, -149, -150, -151, -16, -17, -18, -88, -146, -147,
	-7, -153, -154, -155, -16, -17, -18, -88, -27, -130,
	-131, -132, -16, -17, -18, -88, -95, -43, -44, -45,
	-46, -47, -48, -50, -106, -51, -52, -7, -99, -100,
	-101, -16, -17, -18, -102, -88, -7, 57, -85, -86,
	-87, -16, -17, -18, -88, -7, -8, -3, 5, -7,
	9, -31, -34, 9, 5, 5, -38, 9, 5, 9,
	-145, -39, -40, -27, -39, -4, 8, 8, 9, -59,
	10, 8, 5, 9, -68, -71, 8, -71, -71, 79,
	81, 82, 80, 9, 9, -111, 10, 8, 5, -4,
	4, 9, -159, 9, -163, 10, 8, -2, 52, 6,
	5, -2, -1, 47, 48, -1, -4, -4, 84, 85,
	-4, 9, -127, -4, 9, -173, 9, 9, -169, 9,
	-136, 10, 8, -4, 9, -91, -4, -4, 9, -105,
	8, 4, 9, -151, -39, -39, 9, -155, 9, -132,
	9, -101, -4, 9, -87, 9, 10, 10, 10, 9,
	-27, 9, -8, -62, -63, -64, -16, -17, -18, -65,
	66, -74, -75, -76, -49, -77, -78, -79, -80, -81,
	-82, -83, -8, -113, -114, -115, -116, 45, -117, -118,
	-102, -119, -83, -120, -7, -121, -179, -175, 71, 86,
	63, 17, 67, 18, 89, -8, -8, -96, -97, -16,
	-17, -18, -7, 10, 10, 10, 10, 10, -8, 10,
	-8, -8, -8, -140, -141, -139, -16, -17, -18, -88,
	-78, -79, -80, -49, -81, -82, -7, -8, -8, -108,
	9, 9, -8, 9, -64, -1, 9, -75, 9, -115,
	-4, 10, 8, 10, 8, 10, 8, -2, -1, -4,
	-4, -4, 5, 4, 9, -97, 9, -139, 9, 10,
	-8, -122, -123, -16, -18, -92, -93, -124, -7, 68,
	-180, -181, -16, -17, -18, -182, -7, 46, -176, -177,
	-16, -17, -18, -178, -7, 90, 10, -8, 9, -123,
	69, 9, -181, -2, 9, -177, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 5, 0, 420, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 311, 77, 80, 0, 0, 24, 33, 45,
	310, 79, 101, 22, 0, 350, 0, 241, 0, 0,
	383, 0, 278, 280, 139, 0, 0, 326, 339, 257,
	161, 164, 127, 130, 0, 461, 462, 201, 202, 191,
	349, 359, 240, 400, 428, 397, 398, 277, 141, 187,
	325, 338, 255, 163, 129, 2, 3, 6, 0, 457,
	0, 0, 27, 29, 30, 31, 32, 453, 454, 451,
	235, 236, 237, 452, 0, 34, 37, 0, 39, 40,
	41, 42, 43, 0, 0, 46, 0, 49, 50, 51,
	52, 53, 36, 455, 0, 312, 313, 315, 316, 317,
	318, 57, 57, 321, 0, 0, 0, 0, 81, 82,
	84, 85, 86, 87, 0, 0, 0, 102, 104, 105,
	106, 0, 0, 0, 110, 0, 0, 0, 192, 194,
	195, 196, 197, 198, 199, 200, 0, 0, 0, 0,
	0, 351, 352, 354, 355, 356, 357, 0, 360, 361,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 401, 402, 404, 405,
	406, 407, 408, 409, 410, 411, 412, 413, 414, 415,
	416, 417, 418, 0, 0, 385, 386, 388, 389, 390,
	391, 392, 393, 394, 395, 396, 0, 281, 282, 284,
	285, 286, 287, 288, 289, 290, 291, 0, 0, 0,
	142, 144, 145, 146, 147, 148, 0, 0, 0, 176,
	178, 179, 180, 181, 182, 183, 184, 185, 186, 0,
	0, 0, 327, 328, 330, 331, 332, 333, 57, 57,
	336, 0, 340, 341, 343, 344, 345, 346, 347, 0,
	258, 259, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 0, 165,
	166, 168, 169, 170, 171, 172, 173, 0, 0, 131,
	132, 134, 135, 136, 137, 138, 459, 463, 421, 0,
	26, 28, 35, 44, 0, 0, 47, 55, 0, 309,
	314, 0, 58, 75, 0, 0, 322, 323, 78, 83,
	88, 91, 90, 100, 103, 107, 0, 108, 109, 0,
	112, 113, 114, 23, 190, 193, 204, 207, 0, 0,
	206, 348, 353, 358, 362, 153, 0, 0, 0, 422,
	423, 0, 0, 424, 425, 0, 0, 0, 0, 0,
	152, 239, 244, 0, 399, 403, 427, 384, 387, 279,
	283, 304, 0, 292, 140, 143, 0, 0, 175, 177,
	0, 189, 324, 329, 0, 0, 337, 342, 256, 260,
	162, 167, 0, 128, 133, 458, 38, 56, 48, 319,
	76, 320, 151, 0, 92, 93, 95, 96, 97, 98,
	0, 0, 116, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 111, 0, 208, 209, 211, 0, 213, 214,
	215, 216, 217, 218, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 456, 203, 0, 155, 157,
	158, 159, 160, 363, 364, 365, 426, 419, 381, 382,
	379, 380, 254, 0, 306, 307, 293, 294, 295, 296,
	297, 298, 299, 300, 301, 302, 303, 149, 150, 0,
	334, 335, 174, 89, 94, 0, 115, 117, 205, 210,
	0, 220, 0, 440, 0, 429, 0, 0, 0, 222,
	223, 224, 442, 431, 154, 156, 305, 308, 188, 99,
	212, 0, 225, 227, 228, 229, 230, 231, 232, 0,
	0, 443, 445, 446, 447, 448, 449, 0, 0, 432,
	434, 435, 436, 437, 438, 0, 238, 234, 221, 226,
	0, 441, 444, 0, 430, 433, 0, 233, 450, 439,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:278
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:343
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:377
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:448
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:494
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:503
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:613
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:634
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:680
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:709
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:718
		{
			yylex.(*lexer).stack.pop()
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:732
		{
			yylex.(*lexer).stack.pop()
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:737
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.token = yyDollar[1].token
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yylex.(*lexer).stack.pop()
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:796
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:812
		{
			yylex.(*lexer).stack.pop()
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:815
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:820
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:834
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:860
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:883
		{
			yylex.(*lexer).stack.pop()
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:888
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:916
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:925
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:934
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:973
		{
			yylex.(*lexer).stack.pop()
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:976
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:998
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1024
		{
			yylex.(*lexer).stack.pop()
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yylex.(*lexer).stack.pop()
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1079
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1091
		{
			yylex.(*lexer).stack.pop()
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yylex.(*lexer).stack.pop()
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yylex.(*lexer).stack.pop()
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1128
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1133
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yylex.(*lexer).stack.pop()
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1184
		{
			yylex.(*lexer).stack.pop()
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1213
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1254
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1263
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1275
		{
			yylex.(*lexer).stack.pop()
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1278
		{
			yylex.(*lexer).stack.pop()
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1302
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1309
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 399:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1318
		{
			yylex.(*lexer).stack.pop()
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1323
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 419:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1359
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1368
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1371
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1376
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1384
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1395
		{
			yyVAL.boolean = true
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1396
		{
			yyVAL.boolean = false
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1399
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1411
		{
			yylex.(*lexer).stack.pop()
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1416
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1425
		{
			yylex.(*lexer).stack.pop()
		}
	case 430:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1428
		{
			yylex.(*lexer).stack.pop()
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1433
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1452
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1461
		{
			yylex.(*lexer).stack.pop()
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1464
		{
			yylex.(*lexer).stack.pop()
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1469
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1488
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1497
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1506
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1515
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1524
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1533
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1542
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1551
		{
			yyVAL.ext = nil
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1554
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1559
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1573
		{
			yyVAL.args = []string{}
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1579
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1582
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
