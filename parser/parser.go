// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	return strings.Trim(s, " \t\n\r\"'")
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

//line parser.y:53
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_extension = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_units = 57410
const kywd_fraction_digits = 57411
const kywd_status = 57412
const kywd_current = 57413
const kywd_obsolete = 57414
const kywd_deprecated = 57415
const kywd_presence = 57416
const kywd_deviation = 57417
const kywd_deviate = 57418
const kywd_not_supported = 57419
const kywd_add = 57420
const kywd_replace = 57421
const kywd_delete = 57422
const kywd_ordered_by = 57423
const kywd_system = 57424
const kywd_user = 57425
const kywd_require_instance = 57426

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_extension",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1437

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1371

var yyAct = [...]int{

	276, 591, 442, 13, 532, 549, 13, 273, 382, 500,
	272, 513, 493, 259, 388, 378, 46, 45, 359, 351,
	294, 202, 201, 341, 315, 286, 408, 227, 241, 372,
	298, 248, 44, 297, 47, 336, 42, 280, 21, 217,
	165, 21, 41, 196, 155, 446, 40, 296, 39, 38,
	279, 37, 186, 209, 178, 72, 409, 452, 453, 284,
	25, 163, 16, 162, 421, 100, 101, 102, 43, 425,
	428, 426, 427, 161, 88, 88, 419, 3, 338, 25,
	25, 543, 27, 192, 88, 176, 401, 300, 160, 25,
	180, 444, 30, 447, 448, 470, 171, 168, 163, 278,
	162, 27, 27, 170, 598, 183, 4, 190, 161, 586,
	199, 27, 213, 219, 498, 576, 541, 575, 26, 540,
	232, 244, 251, 539, 290, 290, 161, 306, 161, 318,
	161, 330, 344, 354, 362, 538, 381, 443, 391, 274,
	229, 161, 11, 225, 225, 11, 537, 26, 161, 487,
	374, 373, 255, 347, 346, 254, 245, 261, 282, 257,
	335, 299, 299, 322, 311, 168, 371, 179, 356, 260,
	370, 486, 256, 287, 295, 295, 369, 310, 183, 465,
	368, 464, 367, 366, 302, 365, 190, 332, 172, 441,
	193, 440, 292, 292, 175, 308, 199, 174, 583, 395,
	25, 432, 417, 431, 416, 399, 137, 233, 136, 213,
	135, 128, 134, 127, 126, 173, 125, 219, 326, 397,
	570, 253, 27, 293, 293, 565, 309, 232, 320, 410,
	334, 563, 400, 364, 562, 111, 166, 110, 403, 407,
	179, 244, 394, 106, 181, 105, 188, 229, 251, 197,
	489, 211, 218, 215, 430, 96, 420, 95, 26, 230,
	242, 249, 415, 288, 288, 488, 304, 445, 316, 437,
	328, 342, 352, 360, 485, 379, 245, 389, 255, 439,
	456, 254, 434, 261, 483, 257, 290, 423, 424, 480,
	88, 478, 422, 228, 476, 260, 472, 238, 256, 275,
	514, 528, 12, 467, 166, 12, 462, 461, 282, 460,
	458, 459, 449, 455, 233, 318, 88, 181, 601, 438,
	436, 25, 414, 299, 406, 188, 88, 88, 516, 413,
	412, 25, 180, 159, 30, 197, 295, 158, 133, 463,
	385, 344, 132, 27, 131, 130, 515, 253, 211, 322,
	526, 354, 525, 27, 292, 597, 218, 124, 123, 362,
	122, 468, 347, 346, 473, 121, 230, 527, 469, 120,
	477, 119, 112, 474, 475, 374, 373, 479, 381, 26,
	242, 109, 104, 94, 157, 293, 356, 249, 391, 26,
	444, 371, 6, 481, 94, 370, 167, 433, 92, 418,
	228, 369, 484, 405, 182, 368, 189, 367, 366, 198,
	365, 212, 402, 396, 320, 113, 108, 580, 496, 231,
	243, 250, 482, 289, 289, 288, 305, 471, 317, 435,
	329, 343, 353, 361, 88, 380, 503, 390, 50, 25,
	152, 518, 535, 501, 88, 469, 151, 149, 148, 25,
	205, 206, 88, 508, 316, 147, 507, 25, 364, 595,
	506, 27, 88, 146, 167, 145, 552, 25, 187, 144,
	143, 27, 142, 505, 141, 140, 139, 182, 138, 27,
	342, 561, 117, 597, 116, 189, 204, 115, 114, 27,
	352, 502, 90, 496, 89, 198, 559, 26, 360, 558,
	490, 590, 385, 556, 204, 566, 282, 26, 212, 569,
	504, 524, 62, 503, 510, 26, 555, 379, 285, 61,
	501, 518, 529, 530, 571, 26, 231, 389, 577, 303,
	508, 63, 535, 507, 557, 169, 582, 506, 258, 542,
	243, 544, 545, 184, 567, 191, 546, 250, 203, 552,
	505, 224, 247, 554, 584, 246, 59, 494, 234, 240,
	239, 58, 301, 301, 350, 312, 349, 323, 502, 456,
	348, 564, 375, 579, 384, 68, 393, 594, 340, 559,
	339, 533, 558, 67, 195, 289, 556, 504, 194, 32,
	548, 594, 602, 547, 156, 324, 509, 282, 321, 555,
	603, 314, 93, 169, 313, 550, 520, 64, 358, 357,
	69, 281, 271, 277, 317, 60, 184, 557, 97, 98,
	99, 522, 103, 521, 191, 107, 88, 519, 517, 512,
	88, 25, 494, 511, 203, 25, 554, 235, 226, 88,
	343, 429, 57, 265, 25, 337, 238, 88, 237, 581,
	353, 118, 25, 27, 331, 224, 266, 27, 361, 327,
	129, 587, 588, 589, 88, 234, 27, 599, 600, 25,
	325, 533, 85, 509, 27, 66, 88, 380, 204, 270,
	150, 25, 204, 270, 65, 377, 520, 390, 550, 26,
	81, 27, 604, 26, 376, 76, 75, 70, 84, 531,
	236, 77, 26, 27, 78, 262, 387, 82, 338, 386,
	26, 83, 79, 80, 71, 499, 592, 495, 223, 222,
	221, 220, 216, 200, 301, 34, 497, 26, 204, 270,
	592, 88, 492, 398, 491, 252, 25, 291, 291, 26,
	307, 534, 319, 214, 333, 345, 355, 363, 210, 383,
	208, 392, 207, 323, 88, 33, 49, 48, 27, 25,
	36, 238, 35, 237, 88, 551, 238, 265, 237, 25,
	185, 238, 265, 237, 268, 29, 177, 28, 164, 348,
	266, 27, 22, 263, 264, 266, 20, 19, 263, 264,
	18, 27, 495, 17, 26, 88, 15, 375, 14, 411,
	25, 10, 9, 8, 5, 2, 204, 270, 65, 200,
	1, 154, 153, 65, 0, 236, 384, 26, 88, 0,
	236, 0, 27, 25, 0, 236, 393, 26, 269, 0,
	0, 534, 81, 0, 0, 0, 0, 76, 75, 0,
	84, 73, 74, 77, 0, 27, 78, 204, 551, 82,
	0, 0, 0, 83, 79, 80, 0, 0, 26, 0,
	0, 252, 450, 451, 85, 454, 0, 86, 0, 87,
	204, 523, 65, 0, 0, 0, 593, 0, 457, 0,
	536, 26, 568, 0, 0, 0, 0, 238, 0, 237,
	593, 0, 88, 265, 404, 268, 0, 25, 187, 291,
	0, 0, 0, 0, 560, 0, 266, 0, 0, 263,
	264, 0, 0, 0, 0, 0, 0, 0, 0, 27,
	466, 0, 0, 0, 0, 88, 0, 91, 319, 7,
	25, 51, 0, 30, 65, 0, 0, 0, 0, 81,
	0, 236, 0, 0, 76, 75, 54, 84, 73, 74,
	77, 523, 27, 78, 345, 26, 82, 0, 52, 53,
	83, 79, 80, 0, 355, 0, 0, 23, 24, 0,
	536, 85, 363, 0, 86, 0, 87, 0, 0, 65,
	31, 0, 55, 0, 0, 0, 0, 560, 26, 0,
	0, 383, 0, 56, 0, 0, 0, 88, 0, 0,
	0, 392, 25, 0, 0, 0, 0, 0, 0, 267,
	265, 81, 268, 0, 0, 596, 76, 75, 0, 84,
	73, 74, 77, 266, 27, 78, 263, 264, 82, 596,
	0, 0, 83, 79, 80, 0, 0, 0, 0, 88,
	0, 585, 0, 85, 25, 0, 86, 0, 87, 204,
	270, 65, 265, 81, 0, 0, 0, 0, 76, 75,
	26, 84, 73, 74, 77, 266, 27, 78, 0, 0,
	82, 269, 0, 0, 83, 79, 80, 0, 0, 553,
	0, 0, 0, 0, 0, 85, 0, 0, 86, 0,
	87, 204, 270, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 283, 0, 0, 572,
	573, 574, 88, 0, 0, 0, 7, 25, 51, 0,
	30, 578, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 76, 75, 54, 84, 73, 74, 77, 0, 27,
	78, 0, 0, 82, 0, 52, 53, 83, 79, 80,
	0, 0, 0, 0, 23, 24, 0, 0, 85, 88,
	0, 86, 553, 87, 25, 0, 65, 31, 0, 55,
	0, 0, 265, 81, 0, 26, 0, 0, 76, 75,
	56, 84, 73, 74, 77, 266, 27, 78, 0, 0,
	82, 0, 0, 0, 83, 79, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 86, 88,
	87, 204, 270, 65, 25, 0, 0, 0, 0, 0,
	0, 0, 26, 81, 0, 0, 283, 0, 76, 75,
	0, 84, 73, 74, 77, 0, 27, 78, 0, 0,
	82, 338, 0, 0, 83, 79, 80, 0, 0, 0,
	0, 88, 0, 0, 0, 85, 25, 0, 86, 0,
	87, 204, 270, 65, 0, 81, 0, 0, 0, 0,
	76, 75, 26, 84, 73, 74, 77, 0, 27, 78,
	88, 0, 82, 0, 0, 25, 83, 79, 80, 237,
	0, 0, 0, 265, 0, 0, 0, 85, 0, 0,
	86, 0, 87, 0, 0, 65, 266, 27, 0, 263,
	264, 0, 0, 0, 26, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 204, 0, 65, 76, 75, 0, 84, 73,
	74, 77, 0, 26, 78, 0, 0, 82, 0, 0,
	0, 83, 79, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 86, 0, 87, 0, 0,
	65,
}
var yyPact = [...]int{

	52, -1000, 1105, 490, 488, 918, -1000, 389, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 247, 389, 389, 389, -6, 389, 374, 235,
	389, 411, 373, 227, 364, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 410, 484, 483, 480, 478, 389, 363, 361, 357,
	352, 350, 349, 206, 203, 389, 337, 336, 334, 330,
	202, 198, -1000, 474, 472, 471, 470, 468, 466, 465,
	461, 459, 451, 444, 443, 389, 442, 436, 378, 329,
	325, -1000, -1000, 53, -1000, -1000, 657, 93, 86, 53,
	205, 187, 184, 75, 319, -1000, 455, 73, 180, 427,
	-1000, 188, 68, -1000, -1000, -1000, -1000, -1000, 18, 757,
	1244, 990, 1152, 747, 747, -1000, 623, -1000, 619, 53,
	1202, 427, 811, 669, -1000, 445, -1000, 788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18, -1000, -1000, 90, 378, -1000, 18, -1000, -1000, -1000,
	-1000, 408, -1000, 320, 724, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, -1000, -1000,
	407, -1000, -1000, -1000, -1000, 885, -1000, 398, -1000, -1000,
	-1000, -1000, -1000, -1000, 315, 427, -1000, -1000, -1000, -1000,
	-1000, 1309, 1309, -1000, 389, 322, 321, 313, 188, -1000,
	-1000, -1000, -1000, -1000, 194, 394, 67, -1000, -1000, -1000,
	-1000, 284, 284, 284, -1000, -8, 632, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 193, 392, 378, 425, 311,
	1244, -1000, -1000, -1000, -1000, -1000, 310, 990, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 181, 85, 384, 46, 46, 389, 389, -25,
	389, 304, 1152, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 389, 301, 747, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 300, 298, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 297, 619, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 171, 389, -1000, 294, -1000, -1000,
	-1000, 39, 1309, -1000, -1000, -1000, -1000, 87, 423, 287,
	427, -1000, -1000, -1000, -1000, -1000, 1309, 1309, -1000, 285,
	811, -1000, -1000, -1000, -1000, -1000, -1000, 282, 669, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 280, 445, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 418, 275, 788, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 265, -1000, -1000,
	-1000, -1000, 161, -1000, -1000, 139, -1000, -1000, 256, 1309,
	241, 53, -1000, -1000, -1000, -1000, -1000, 48, -1000, -1000,
	-1000, -1000, 752, -1000, -1000, 90, -1000, -1000, -1000, -1000,
	-1000, -1000, 283, 90, 90, -1000, -1000, -1000, -1000, -1000,
	-1000, 657, 136, 125, -1000, 113, 109, -1000, -1000, 106,
	53, 71, 90, 90, 18, -1000, -1000, 53, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1273, 18, -1000, -1000, -1000,
	1152, -1000, -1000, -1000, 225, 222, -1000, -1000, -1000, -1000,
	-1000, -1000, 90, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 216, 48, -1000, -1000, -1000, -1000, -1000, 46, 873,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 211, 283, -1000, 389, 389, 389, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 107, 384, 389, 46, 413, -1000,
	-1000, 640, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 189, 1273, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1032, -1000, -1000, -1000, -1000, -1000, 99, -1000, -1000,
	-1000, -1000, 53, 53, 53, -1000, 437, 94, 53, 90,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	309, -1000, -1000, -1000, -1000, -1000, -1000, 384, -1000, -1000,
	-1000, -1000, -1000, 90, -1000,
}
var yyPgo = [...]int{

	0, 45, 2, 44, 594, 812, 811, 55, 88, 810,
	805, 804, 392, 803, 802, 801, 139, 299, 0, 798,
	796, 62, 793, 790, 787, 786, 35, 782, 778, 40,
	438, 777, 776, 54, 775, 770, 52, 26, 56, 762,
	760, 51, 49, 48, 46, 42, 36, 68, 32, 17,
	16, 34, 757, 756, 755, 752, 750, 53, 748, 743,
	734, 732, 12, 726, 725, 722, 39, 721, 720, 64,
	719, 718, 715, 9, 20, 13, 87, 50, 37, 33,
	30, 173, 714, 709, 706, 14, 613, 705, 99, 699,
	4, 697, 694, 685, 15, 8, 675, 659, 654, 29,
	645, 10, 642, 638, 27, 637, 633, 629, 11, 628,
	627, 623, 621, 615, 612, 7, 611, 610, 609, 608,
	18, 607, 604, 601, 24, 598, 595, 5, 593, 590,
	589, 588, 584, 43, 22, 21, 583, 580, 578, 23,
	575, 566, 564, 19, 561, 560, 559, 28, 556, 555,
	552, 31, 538, 47, 531, 529, 519, 59, 518, 25,
	512, 511, 501, 1, 459,
}
var yyR1 = [...]int{

	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 27, 13, 13, 28, 28, 29, 29, 29, 29,
	31, 32, 32, 21, 33, 33, 33, 33, 33, 33,
	19, 34, 35, 35, 36, 36, 36, 36, 36, 20,
	20, 37, 37, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 38,
	38, 24, 24, 54, 55, 55, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 61, 61, 62,
	62, 62, 62, 63, 25, 64, 65, 65, 66, 66,
	66, 66, 66, 66, 66, 67, 68, 70, 71, 69,
	72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 53, 53, 82, 83, 83, 84, 84, 85, 85,
	85, 85, 85, 47, 86, 87, 88, 88, 89, 89,
	90, 90, 90, 90, 52, 52, 91, 92, 92, 93,
	93, 94, 94, 94, 94, 94, 94, 95, 48, 97,
	97, 97, 97, 97, 97, 97, 97, 96, 98, 98,
	99, 100, 39, 102, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 3, 3, 76, 81, 81, 105, 106,
	106, 107, 107, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 112, 17, 17, 17, 110, 111, 42,
	113, 114, 114, 101, 101, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 116, 117, 51, 118, 118, 119,
	119, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 121, 46, 46,
	122, 122, 123, 123, 124, 124, 124, 124, 124, 124,
	124, 124, 126, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 125, 125, 128, 129, 129, 23,
	130, 131, 131, 132, 132, 133, 133, 133, 133, 133,
	133, 133, 134, 135, 49, 136, 137, 137, 138, 138,
	139, 139, 139, 139, 139, 139, 139, 50, 140, 141,
	141, 142, 142, 143, 143, 143, 143, 143, 40, 144,
	145, 145, 146, 146, 147, 147, 147, 147, 41, 148,
	149, 150, 150, 79, 79, 80, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 153,
	153, 152, 75, 45, 45, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 154, 154, 43, 156, 157, 158,
	158, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 78, 4, 4, 2,
	1, 1, 77, 44, 160, 109, 109, 161, 162, 162,
	163, 163, 163, 163, 163, 164, 16, 18, 14, 15,
	22, 74, 8, 8, 30, 7, 5, 5, 6, 6,
}
var yyR2 = [...]int{

	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 4, 1, 2, 1, 1, 1, 1,
	2, 1, 2, 3, 1, 3, 1, 1, 1, 1,
	4, 2, 1, 2, 3, 1, 1, 1, 1, 2,
	4, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 2, 4, 2, 0, 1, 1, 2, 1,
	1, 1, 1, 3, 4, 2, 1, 2, 1, 1,
	1, 2, 2, 2, 1, 3, 2, 2, 2, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 3, 2, 2, 4, 1, 2,
	1, 1, 1, 1, 2, 4, 2, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	4, 2, 4, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 4, 2, 0,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 2, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 4, 2,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 3, 4, 2, 2, 4, 2, 1, 2,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 0, 1, 1, 2,
}
var yyChk = [...]int{

	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, 49, 50, 12, 70, 34, -31, -34,
	15, 62, -130, -54, -64, -39, -40, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-30, 13, 40, 41, 28, 64, 75, -102, -144, -148,
	-113, -156, -160, -154, -121, 61, -96, -136, -140, -117,
	-91, -82, -7, 30, 31, 27, 26, 32, 35, 43,
	44, 21, 38, 42, 29, 53, 56, 58, 7, 4,
	4, 9, -12, -4, 5, 10, 8, -4, -4, -4,
	71, 72, 73, -4, 8, 10, 8, -4, 5, 8,
	10, 8, 8, 5, 4, 4, 4, 4, -4, 8,
	8, 8, 8, 8, 8, 10, 8, 10, 8, -4,
	8, 8, 8, 8, 10, 8, 10, 8, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	-4, 4, 4, -5, -6, -3, -4, 6, 8, 8,
	-8, 55, 10, 8, -28, -29, -16, -17, -18, -30,
	10, 10, -8, 10, 10, 10, 10, -32, -33, -21,
	13, -16, -17, -18, -30, -35, -36, 13, -16, -17,
	-18, -30, 10, 10, -131, -132, -133, -16, -17, -18,
	-86, -134, -135, -30, 59, 23, 24, -55, -56, -57,
	-58, -16, -17, -18, -59, 65, -65, -66, -16, -18,
	-67, -68, -70, -71, -30, 76, -103, -104, -81, -74,
	-16, -17, -18, -76, -30, -105, 68, 16, 14, -145,
	-146, -147, -16, -17, -18, -26, -149, -150, -151, -16,
	-17, -18, -86, -88, -79, -80, -77, -78, -152, -75,
	-153, -26, -87, 36, 37, 20, 33, 19, 22, 81,
	60, -114, -101, -115, -16, -17, -18, -86, -88, -77,
	-78, -116, -26, 74, -157, -158, -159, -81, -16, -17,
	-18, -86, -47, -88, -74, -77, -153, -79, -80, -78,
	-76, -30, -157, -155, -16, -17, -18, -86, -47, -88,
	-77, -78, -30, -122, -123, -124, -16, -17, -18, -86,
	-88, -125, -51, -30, -126, 51, -8, -97, -16, -17,
	-18, -98, -38, -86, -88, -99, -26, -100, 39, -137,
	-138, -139, -16, -17, -18, -86, -134, -135, -30, -141,
	-142, -143, -16, -17, -18, -86, -26, -118, -119, -120,
	-16, -17, -18, -86, -88, -41, -42, -43, -44, -45,
	-46, -48, -99, -49, -50, -30, -92, -93, -94, -16,
	-17, -18, -95, -86, -30, 57, -83, -84, -85, -16,
	-17, -18, -86, -30, -8, -3, 5, -7, 9, -29,
	-33, 9, 5, -36, 9, 5, 9, -133, -37, -38,
	-37, -4, 8, 8, 9, -57, 10, 8, 5, 9,
	-66, -69, 8, -69, -69, 77, 79, 80, 78, 9,
	-104, 10, 8, 5, -3, 4, 9, -147, 9, -151,
	10, 8, -2, 52, 6, -2, -1, 47, 48, -1,
	-4, -4, 82, 83, -4, 9, -115, -4, 9, -159,
	9, 9, 9, -124, 10, 8, -4, 9, -99, -26,
	8, 4, 9, -139, -37, -37, 9, -143, 9, -120,
	9, -94, 4, 9, -85, 9, 10, 10, 9, 9,
	-8, -60, -61, -62, -16, -17, -18, -63, 66, -72,
	-73, -74, -47, -75, -76, -77, -78, -79, -80, -81,
	-8, -106, -107, -108, 17, 63, 45, -109, -95, -110,
	-81, -111, -112, -30, -161, 69, 67, 84, 18, -8,
	-8, -89, -90, -16, -17, -18, -30, 10, 10, 10,
	10, 10, -8, 10, -8, -8, -8, -128, -129, -127,
	-16, -17, -18, -86, -76, -77, -78, -47, -79, -80,
	-30, -101, 9, 9, -8, 9, -62, -1, 9, -73,
	9, -108, -4, -4, -4, 10, 8, -2, -4, -1,
	4, 9, -90, 9, -127, 9, 10, -8, -8, -8,
	-162, -163, -16, -17, -18, -164, -30, 46, 10, -8,
	-8, 9, -163, -2, -8,
}
var yyDef = [...]int{

	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 416, 0,
	0, 1, 5, 0, 387, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 281,
	71, 74, 0, 21, 30, 41, 280, 73, 95, 0,
	320, 0, 211, 0, 0, 353, 0, 248, 250, 0,
	159, 296, 309, 227, 144, 147, 121, 124, 173, 319,
	329, 210, 367, 394, 364, 365, 247, 167, 295, 308,
	225, 146, 123, 0, 417, 418, 183, 184, 2, 3,
	6, 0, 412, 0, 0, 24, 26, 27, 28, 29,
	408, 409, 406, 204, 205, 206, 407, 0, 31, 34,
	0, 36, 37, 38, 39, 0, 42, 0, 45, 46,
	47, 48, 33, 410, 0, 282, 283, 285, 286, 287,
	288, 51, 51, 291, 0, 0, 0, 0, 75, 76,
	78, 79, 80, 81, 0, 0, 0, 96, 98, 99,
	100, 0, 0, 0, 104, 0, 0, 174, 176, 177,
	178, 179, 180, 181, 182, 0, 0, 0, 0, 0,
	321, 322, 324, 325, 326, 327, 0, 330, 331, 336,
	337, 338, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 0, 0, 368, 369, 371, 372, 373,
	374, 375, 376, 377, 378, 379, 380, 381, 382, 383,
	384, 385, 0, 0, 355, 356, 357, 358, 359, 360,
	361, 362, 363, 0, 251, 252, 254, 255, 256, 257,
	258, 259, 260, 261, 0, 0, 133, 0, 160, 161,
	162, 163, 164, 165, 166, 168, 69, 0, 0, 0,
	297, 298, 300, 301, 302, 303, 51, 51, 306, 0,
	310, 311, 313, 314, 315, 316, 317, 0, 228, 229,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 245, 246, 0, 148, 149, 151,
	152, 153, 154, 155, 156, 0, 0, 125, 126, 128,
	129, 130, 131, 132, 415, 419, 388, 0, 23, 25,
	32, 40, 0, 43, 50, 0, 279, 284, 0, 52,
	0, 0, 292, 293, 72, 77, 82, 85, 84, 94,
	97, 101, 0, 102, 103, 0, 106, 107, 108, 172,
	175, 186, 189, 0, 0, 188, 318, 323, 328, 332,
	136, 0, 0, 0, 389, 0, 0, 390, 391, 0,
	0, 0, 0, 0, 135, 209, 214, 0, 366, 370,
	393, 354, 249, 253, 274, 0, 262, 158, 169, 70,
	0, 171, 294, 299, 0, 0, 307, 312, 226, 230,
	145, 150, 0, 122, 127, 413, 35, 44, 289, 290,
	134, 0, 86, 87, 89, 90, 91, 92, 0, 0,
	110, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	105, 0, 190, 191, 0, 0, 0, 196, 197, 198,
	199, 200, 201, 202, 0, 0, 0, 0, 0, 411,
	185, 0, 138, 140, 141, 142, 143, 333, 334, 335,
	392, 386, 351, 352, 349, 350, 224, 0, 276, 277,
	263, 264, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 0, 304, 305, 157, 83, 88, 0, 109, 111,
	187, 192, 0, 0, 0, 395, 0, 0, 0, 0,
	397, 137, 139, 275, 278, 170, 93, 193, 194, 195,
	0, 398, 400, 401, 402, 403, 404, 0, 207, 208,
	203, 396, 399, 0, 405,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:164
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:172
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.parent)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:189
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:221
		{
			yylex.(*lexer).stack.pop()
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:224
		{
			yylex.(*lexer).stack.pop()
		}
	case 30:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:239
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:252
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:269
		{
			yylex.(*lexer).stack.pop()
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:274
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:294
		{
			yylex.(*lexer).stack.pop()
		}
	case 50:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:297
		{
			yylex.(*lexer).stack.pop()
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:327
		{
			yylex.(*lexer).stack.pop()
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:330
		{
			yylex.(*lexer).stack.pop()
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:357
		{
			yylex.(*lexer).stack.pop()
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:360
		{
			yylex.(*lexer).stack.pop()
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:365
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:387
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:396
		{
			yylex.(*lexer).stack.pop()
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:401
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:429
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:438
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:447
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:456
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:465
		{
			yylex.(*lexer).stack.pop()
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:488
		{
			yylex.(*lexer).stack.pop()
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:491
		{
			yylex.(*lexer).stack.pop()
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:497
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:520
		{
			l := yylex.(*lexer)
			l.builder.Must(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "must", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:529
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:538
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:547
		{
			yylex.(*lexer).stack.pop()
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:550
		{
			yylex.(*lexer).stack.pop()
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:564
		{
			yylex.(*lexer).stack.pop()
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:572
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:596
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:608
		{
			yylex.(*lexer).stack.pop()
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:623
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:637
		{
			yylex.(*lexer).stack.pop()
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:642
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:677
		{
			yyVAL.token = yyDollar[1].token
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:678
		{
			yyVAL.token = yyDollar[1].token
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:681
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:690
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:693
		{
			yylex.(*lexer).stack.pop()
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:698
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:714
		{
			l := yylex.(*lexer)
			l.builder.LengthRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "length", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:721
		{
			l := yylex.(*lexer)
			l.builder.ValueRange(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "range", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:728
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:744
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:758
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:767
		{
			l := yylex.(*lexer)
			l.builder.Pattern(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "pattern", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:776
		{
			yylex.(*lexer).stack.pop()
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:781
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:809
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:818
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:827
		{
			yylex.(*lexer).stack.pop()
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:857
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:866
		{
			yylex.(*lexer).stack.pop()
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:869
		{
			yylex.(*lexer).stack.pop()
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:891
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:914
		{
			yylex.(*lexer).stack.pop()
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:917
		{
			yylex.(*lexer).stack.pop()
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:929
		{
			yylex.(*lexer).stack.pop()
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:934
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:954
		{
			yylex.(*lexer).stack.pop()
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:957
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:963
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:972
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:984
		{
			yylex.(*lexer).stack.pop()
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:989
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1009
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1012
		{
			yylex.(*lexer).stack.pop()
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1021
		{
			yylex.(*lexer).stack.pop()
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1026
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1050
		{
			yylex.(*lexer).stack.pop()
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1055
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1077
		{
			yylex.(*lexer).stack.pop()
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1082
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1099
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1106
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1115
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1140
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1147
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1156
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1168
		{
			yylex.(*lexer).stack.pop()
		}
	case 354:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1171
		{
			yylex.(*lexer).stack.pop()
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1188
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1195
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1204
		{
			yylex.(*lexer).stack.pop()
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1209
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1245
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1254
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1257
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1262
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1272
		{
			yyVAL.boolean = true
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1273
		{
			yyVAL.boolean = false
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1276
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1288
		{
			yylex.(*lexer).stack.pop()
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1293
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1302
		{
			yylex.(*lexer).stack.pop()
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1305
		{
			yylex.(*lexer).stack.pop()
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1310
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1329
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1338
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1347
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1356
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1365
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1374
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1383
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1392
		{
			yyVAL.ext = nil
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1395
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1406
		{
			l := yylex.(*lexer)
			l.builder.AddExtension(l.stack.peek(), "", yyDollar[1].ext)
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1412
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1425
		{
			yyVAL.args = []string{}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1431
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1434
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
