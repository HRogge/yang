// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import (
	"fmt"
	"github.com/freeconf/yang/meta"
	"strconv"
	"strings"
)

func tokenString(s string) string {
	s = strings.Trim(s, " \t\n\r")
	lastChar := len(s) - 1
	if s[0] == char_doublequote && s[lastChar] == char_doublequote {
		return s[1:lastChar]
	}
	if s[0] == char_singlequote && s[lastChar] == char_singlequote {
		return s[1:lastChar]
	}
	return s
}

// Lex implements goyacc interface
func (l *lexer) Lex(lval *yySymType) int {
	t, _ := l.nextToken()
	if t.typ == parseEof {
		return 0
	}
	lval.token = t.val
	return int(t.typ)
}

// Error implements goyacc interface
func (l *lexer) Error(e string) {
	line, col := l.Position()
	l.lastError = fmt.Errorf("%s - line %d, col %d", e, line, col)
}

func chkErr(l yyLexer, e error) bool {
	if e == nil {
		return false
	}
	l.Error(e.Error())
	return true
}

func chkErr2(l *lexer, keyword string, extension *meta.Extension) bool {
	if extension != nil {
		l.builder.AddExtension(l.stack.peek(), keyword, extension)
	}
	if l.builder.LastErr != nil {
		l.Error(l.builder.LastErr.Error())
		return true
	}

	return false
}

func trimQuotes(s string) string {
	if s[0] == '"' {
		return s[1 : len(s)-1]
	}
	return s
}

//line parser.y:68
type yySymType struct {
	yys     int
	token   string
	boolean bool
	num     int64
	num32   int
	args    []string
	ext     *meta.Extension
}

const token_ident = 57346
const token_string = 57347
const token_number = 57348
const token_unknown = 57349
const token_curly_open = 57350
const token_curly_close = 57351
const token_semi = 57352
const kywd_namespace = 57353
const kywd_description = 57354
const kywd_revision = 57355
const kywd_type = 57356
const kywd_prefix = 57357
const kywd_default = 57358
const kywd_length = 57359
const kywd_enum = 57360
const kywd_key = 57361
const kywd_config = 57362
const kywd_uses = 57363
const kywd_unique = 57364
const kywd_input = 57365
const kywd_output = 57366
const kywd_module = 57367
const kywd_container = 57368
const kywd_list = 57369
const kywd_rpc = 57370
const kywd_notification = 57371
const kywd_typedef = 57372
const kywd_grouping = 57373
const kywd_leaf = 57374
const kywd_mandatory = 57375
const kywd_reference = 57376
const kywd_leaf_list = 57377
const kywd_max_elements = 57378
const kywd_min_elements = 57379
const kywd_choice = 57380
const kywd_case = 57381
const kywd_import = 57382
const kywd_include = 57383
const kywd_action = 57384
const kywd_anyxml = 57385
const kywd_anydata = 57386
const kywd_path = 57387
const kywd_value = 57388
const kywd_true = 57389
const kywd_false = 57390
const kywd_contact = 57391
const kywd_organization = 57392
const kywd_refine = 57393
const kywd_unbounded = 57394
const kywd_augment = 57395
const kywd_submodule = 57396
const kywd_str_plus = 57397
const kywd_identity = 57398
const kywd_base = 57399
const kywd_feature = 57400
const kywd_if_feature = 57401
const kywd_when = 57402
const kywd_must = 57403
const kywd_yang_version = 57404
const kywd_range = 57405
const kywd_extension = 57406
const kywd_argument = 57407
const kywd_yin_element = 57408
const kywd_pattern = 57409
const kywd_modifier = 57410
const kywd_invert_match = 57411
const kywd_units = 57412
const kywd_fraction_digits = 57413
const kywd_status = 57414
const kywd_current = 57415
const kywd_obsolete = 57416
const kywd_deprecated = 57417
const kywd_presence = 57418
const kywd_deviation = 57419
const kywd_deviate = 57420
const kywd_not_supported = 57421
const kywd_add = 57422
const kywd_replace = 57423
const kywd_delete = 57424
const kywd_ordered_by = 57425
const kywd_system = 57426
const kywd_user = 57427
const kywd_require_instance = 57428
const kywd_error_app_tag = 57429
const kywd_error_message = 57430
const kywd_bit = 57431
const kywd_position = 57432
const kywd_revision_date = 57433
const kywd_belongs_to = 57434

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"token_ident",
	"token_string",
	"token_number",
	"token_unknown",
	"token_curly_open",
	"token_curly_close",
	"token_semi",
	"kywd_namespace",
	"kywd_description",
	"kywd_revision",
	"kywd_type",
	"kywd_prefix",
	"kywd_default",
	"kywd_length",
	"kywd_enum",
	"kywd_key",
	"kywd_config",
	"kywd_uses",
	"kywd_unique",
	"kywd_input",
	"kywd_output",
	"kywd_module",
	"kywd_container",
	"kywd_list",
	"kywd_rpc",
	"kywd_notification",
	"kywd_typedef",
	"kywd_grouping",
	"kywd_leaf",
	"kywd_mandatory",
	"kywd_reference",
	"kywd_leaf_list",
	"kywd_max_elements",
	"kywd_min_elements",
	"kywd_choice",
	"kywd_case",
	"kywd_import",
	"kywd_include",
	"kywd_action",
	"kywd_anyxml",
	"kywd_anydata",
	"kywd_path",
	"kywd_value",
	"kywd_true",
	"kywd_false",
	"kywd_contact",
	"kywd_organization",
	"kywd_refine",
	"kywd_unbounded",
	"kywd_augment",
	"kywd_submodule",
	"kywd_str_plus",
	"kywd_identity",
	"kywd_base",
	"kywd_feature",
	"kywd_if_feature",
	"kywd_when",
	"kywd_must",
	"kywd_yang_version",
	"kywd_range",
	"kywd_extension",
	"kywd_argument",
	"kywd_yin_element",
	"kywd_pattern",
	"kywd_modifier",
	"kywd_invert_match",
	"kywd_units",
	"kywd_fraction_digits",
	"kywd_status",
	"kywd_current",
	"kywd_obsolete",
	"kywd_deprecated",
	"kywd_presence",
	"kywd_deviation",
	"kywd_deviate",
	"kywd_not_supported",
	"kywd_add",
	"kywd_replace",
	"kywd_delete",
	"kywd_ordered_by",
	"kywd_system",
	"kywd_user",
	"kywd_require_instance",
	"kywd_error_app_tag",
	"kywd_error_message",
	"kywd_bit",
	"kywd_position",
	"kywd_revision_date",
	"kywd_belongs_to",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1578

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 1644

var yyAct = [...]int16{
	287, 646, 638, 13, 629, 284, 13, 465, 342, 270,
	341, 167, 582, 565, 398, 470, 379, 408, 522, 429,
	402, 283, 311, 351, 542, 371, 305, 361, 298, 347,
	338, 48, 212, 326, 297, 529, 47, 307, 238, 259,
	252, 49, 211, 227, 443, 206, 309, 46, 219, 195,
	185, 191, 285, 44, 172, 11, 146, 75, 11, 476,
	477, 657, 26, 43, 576, 42, 75, 295, 421, 45,
	75, 26, 187, 168, 31, 26, 187, 41, 31, 103,
	104, 105, 40, 3, 28, 39, 291, 447, 450, 448,
	449, 471, 472, 28, 308, 31, 170, 28, 169, 664,
	175, 202, 653, 16, 183, 170, 626, 169, 190, 168,
	199, 574, 4, 209, 179, 223, 229, 613, 75, 612,
	658, 497, 573, 26, 178, 243, 255, 262, 235, 301,
	301, 27, 317, 572, 329, 27, 340, 350, 364, 374,
	382, 571, 401, 168, 411, 28, 168, 244, 570, 168,
	193, 240, 173, 239, 193, 290, 414, 644, 515, 356,
	188, 200, 197, 392, 271, 207, 514, 221, 228, 168,
	367, 394, 175, 266, 513, 333, 393, 241, 253, 260,
	366, 299, 299, 27, 315, 190, 327, 391, 339, 348,
	362, 372, 380, 390, 399, 199, 409, 313, 303, 303,
	203, 319, 415, 389, 75, 388, 209, 444, 177, 26,
	611, 186, 610, 268, 182, 310, 310, 387, 322, 223,
	236, 265, 386, 355, 173, 385, 419, 229, 609, 181,
	608, 28, 432, 180, 75, 420, 425, 188, 243, 26,
	196, 489, 435, 488, 424, 75, 200, 197, 623, 605,
	26, 428, 255, 168, 405, 464, 214, 463, 207, 262,
	244, 28, 600, 455, 240, 454, 239, 437, 75, 27,
	442, 221, 28, 26, 196, 75, 453, 445, 446, 228,
	26, 75, 267, 469, 306, 306, 26, 321, 186, 480,
	241, 434, 460, 473, 26, 28, 271, 301, 462, 27,
	598, 439, 28, 438, 253, 266, 597, 518, 28, 286,
	27, 260, 12, 468, 467, 12, 28, 75, 193, 661,
	644, 143, 26, 142, 516, 75, 329, 141, 652, 140,
	512, 483, 249, 27, 510, 558, 560, 135, 340, 134,
	133, 131, 132, 130, 28, 268, 27, 350, 527, 299,
	507, 505, 193, 265, 27, 345, 344, 503, 26, 487,
	466, 364, 114, 544, 113, 75, 303, 333, 492, 356,
	26, 374, 249, 499, 248, 405, 496, 486, 327, 382,
	28, 557, 27, 310, 485, 559, 501, 502, 500, 555,
	339, 484, 28, 367, 482, 506, 504, 479, 401, 348,
	652, 461, 392, 366, 556, 459, 451, 561, 411, 174,
	394, 225, 508, 362, 267, 393, 52, 189, 27, 198,
	436, 427, 208, 372, 222, 511, 391, 109, 247, 108,
	27, 380, 390, 355, 242, 254, 261, 166, 300, 300,
	525, 316, 389, 328, 388, 519, 349, 363, 373, 381,
	399, 400, 306, 410, 532, 99, 387, 98, 165, 539,
	409, 386, 139, 138, 385, 568, 137, 533, 562, 563,
	75, 530, 452, 538, 136, 26, 547, 249, 129, 248,
	128, 174, 127, 126, 549, 125, 575, 124, 577, 578,
	585, 537, 523, 579, 189, 116, 75, 28, 441, 115,
	112, 26, 107, 75, 198, 594, 595, 468, 467, 97,
	148, 619, 587, 97, 531, 208, 176, 566, 456, 596,
	440, 599, 525, 28, 192, 426, 201, 423, 222, 213,
	422, 535, 234, 247, 416, 27, 592, 123, 532, 536,
	601, 245, 583, 602, 75, 312, 312, 242, 323, 26,
	334, 533, 343, 117, 368, 530, 395, 538, 404, 590,
	413, 254, 547, 614, 604, 568, 606, 235, 261, 111,
	549, 28, 615, 6, 523, 537, 589, 620, 622, 95,
	498, 458, 585, 164, 591, 163, 161, 417, 176, 160,
	159, 288, 157, 156, 624, 155, 154, 153, 531, 152,
	534, 192, 480, 151, 587, 636, 300, 150, 149, 121,
	631, 201, 641, 120, 649, 535, 119, 566, 633, 627,
	632, 118, 213, 536, 345, 344, 93, 654, 592, 631,
	92, 289, 642, 656, 583, 328, 637, 633, 641, 632,
	659, 553, 650, 234, 645, 588, 649, 662, 554, 65,
	75, 590, 660, 296, 245, 26, 349, 64, 603, 314,
	663, 66, 630, 249, 639, 248, 647, 269, 589, 276,
	363, 279, 665, 258, 257, 666, 591, 28, 62, 251,
	373, 630, 277, 250, 534, 274, 275, 61, 381, 75,
	639, 655, 370, 369, 26, 71, 360, 359, 647, 70,
	205, 204, 293, 33, 210, 22, 581, 400, 22, 580,
	85, 335, 332, 312, 147, 27, 28, 410, 263, 247,
	302, 302, 96, 318, 325, 330, 324, 67, 353, 365,
	375, 383, 378, 403, 377, 412, 72, 588, 292, 100,
	101, 102, 334, 106, 282, 63, 110, 634, 628, 524,
	636, 75, 552, 621, 343, 550, 26, 548, 264, 546,
	304, 304, 75, 320, 491, 331, 545, 26, 354, 345,
	344, 384, 543, 122, 567, 541, 540, 368, 28, 249,
	246, 248, 237, 60, 357, 276, 75, 279, 418, 28,
	346, 26, 69, 397, 396, 395, 73, 210, 277, 584,
	158, 274, 275, 564, 162, 273, 337, 68, 407, 406,
	74, 528, 233, 28, 404, 232, 27, 231, 230, 226,
	35, 526, 521, 520, 413, 224, 85, 220, 256, 272,
	218, 524, 217, 75, 34, 247, 51, 50, 26, 352,
	38, 376, 345, 344, 37, 278, 276, 84, 279, 430,
	263, 27, 79, 78, 194, 88, 76, 77, 80, 277,
	28, 81, 274, 275, 86, 30, 75, 184, 87, 82,
	83, 26, 551, 29, 567, 75, 171, 23, 75, 89,
	26, 569, 90, 26, 91, 214, 281, 85, 302, 36,
	264, 584, 21, 28, 215, 216, 20, 19, 27, 18,
	17, 15, 28, 14, 10, 28, 593, 9, 8, 280,
	336, 5, 89, 2, 431, 431, 1, 330, 214, 281,
	145, 640, 144, 648, 0, 0, 0, 214, 304, 433,
	214, 27, 0, 0, 0, 0, 0, 0, 353, 0,
	27, 0, 0, 27, 0, 0, 0, 640, 0, 0,
	0, 0, 365, 0, 256, 648, 0, 331, 551, 75,
	0, 272, 375, 457, 26, 0, 0, 0, 0, 0,
	383, 0, 276, 0, 0, 75, 0, 0, 354, 0,
	26, 569, 0, 0, 248, 277, 28, 0, 276, 403,
	0, 0, 0, 474, 475, 0, 478, 0, 593, 412,
	0, 277, 28, 0, 274, 275, 0, 0, 0, 481,
	384, 214, 281, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 27, 0, 635, 214, 643, 85,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 0, 635, 0, 0, 0, 352,
	0, 490, 0, 0, 643, 0, 0, 0, 0, 493,
	494, 0, 651, 0, 0, 0, 0, 0, 0, 431,
	431, 0, 75, 376, 94, 0, 7, 26, 53, 0,
	31, 586, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 79, 78, 56, 88, 76, 77, 80, 0, 28,
	81, 0, 0, 86, 0, 54, 55, 87, 82, 83,
	0, 0, 0, 0, 24, 25, 0, 0, 89, 0,
	509, 90, 0, 91, 0, 0, 85, 32, 0, 57,
	0, 0, 0, 517, 0, 0, 0, 27, 0, 0,
	0, 75, 58, 0, 0, 7, 26, 53, 0, 31,
	0, 0, 0, 0, 0, 84, 0, 59, 0, 0,
	79, 78, 56, 88, 76, 77, 80, 0, 28, 81,
	0, 0, 86, 586, 54, 55, 87, 82, 83, 0,
	0, 0, 0, 24, 25, 0, 0, 89, 0, 0,
	90, 0, 91, 0, 0, 85, 32, 0, 57, 0,
	0, 0, 0, 0, 0, 0, 27, 0, 0, 0,
	0, 58, 0, 0, 75, 0, 625, 0, 0, 26,
	0, 0, 0, 0, 0, 0, 59, 276, 84, 0,
	0, 0, 0, 79, 78, 0, 88, 76, 77, 80,
	277, 28, 81, 0, 0, 86, 0, 0, 0, 87,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 607,
	89, 0, 0, 90, 0, 91, 214, 281, 85, 0,
	0, 75, 616, 617, 618, 0, 26, 0, 0, 27,
	0, 0, 0, 294, 276, 84, 0, 0, 0, 0,
	79, 78, 0, 88, 76, 77, 80, 277, 28, 81,
	0, 0, 86, 0, 0, 0, 87, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	90, 0, 91, 214, 281, 85, 0, 0, 75, 0,
	495, 0, 0, 26, 0, 0, 27, 248, 0, 0,
	294, 0, 84, 0, 0, 0, 0, 79, 78, 0,
	88, 76, 77, 80, 277, 28, 81, 0, 0, 86,
	358, 0, 75, 87, 82, 83, 0, 26, 0, 249,
	0, 248, 0, 0, 89, 276, 0, 90, 0, 91,
	214, 281, 85, 0, 0, 0, 0, 0, 277, 28,
	0, 274, 275, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 214, 281, 85, 75, 0, 0,
	0, 0, 26, 0, 0, 247, 248, 27, 0, 0,
	0, 84, 0, 0, 0, 0, 79, 78, 280, 88,
	76, 77, 80, 277, 28, 81, 0, 0, 86, 358,
	0, 0, 87, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 0, 0, 90, 75, 91, 214,
	281, 85, 26, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 27, 0, 0, 0, 79, 78, 0, 88,
	76, 77, 80, 0, 28, 81, 0, 0, 86, 0,
	0, 0, 87, 82, 83, 0, 75, 0, 0, 0,
	0, 26, 0, 89, 0, 0, 90, 0, 91, 214,
	84, 85, 0, 0, 0, 79, 78, 0, 88, 76,
	77, 80, 27, 28, 81, 0, 0, 86, 0, 0,
	0, 87, 82, 83, 0, 75, 0, 0, 0, 0,
	26, 0, 89, 0, 0, 90, 0, 91, 0, 84,
	85, 0, 0, 0, 79, 78, 0, 88, 0, 0,
	80, 27, 28, 81, 0, 0, 86, 358, 0, 0,
	87, 82, 83, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 214, 281, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 79, 78,
	27, 88, 76, 77, 80, 0, 0, 81, 0, 0,
	86, 0, 0, 0, 87, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 90, 0,
	91, 0, 0, 85,
}

var yyPact = [...]int16{
	58, -1000, 1134, 626, 622, 1065, -1000, 508, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 447, 508, 508, 508, 6, 508, 494,
	419, 508, 564, 492, 354, 491, 487, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 548, 617, 612, 609, 605, 508, 532,
	479, 477, 475, 474, 472, 470, 333, 332, 329, 466,
	458, 455, 454, 319, 313, 504, 604, 603, 599, 595,
	593, 592, 591, 589, 588, 508, 586, 585, 582, 508,
	581, 579, 450, 429, -1000, -1000, 88, -1000, -1000, 643,
	198, 114, 88, 223, 219, 204, 94, 63, -1000, 261,
	91, 190, 871, -1000, 346, 50, 80, -1000, -1000, -1000,
	-1000, -1000, 18, -1000, 358, 1499, 826, 1264, 1355, 1355,
	-1000, 952, -1000, 859, -1000, 268, 1410, 871, 1460, 1538,
	-1000, 197, -1000, 868, 97, 504, -1000, 18, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18, -1000,
	-1000, -1000, 18, -1000, -1000, -1000, -1000, -1000, 529, -1000,
	496, 779, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 59, -1000, -1000, 525, -1000, -1000,
	-1000, -1000, -1000, 522, 227, -1000, 520, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 412, 871, -1000, -1000, -1000, -1000,
	-1000, 1582, 1582, -1000, 508, 283, 234, 411, 346, -1000,
	-1000, -1000, -1000, -1000, 293, 515, 489, -1000, -1000, -1000,
	-1000, 199, 199, 199, -1000, 8, 397, 463, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 255, 513, 508, 577,
	396, 1499, -1000, -1000, -1000, -1000, -1000, 392, 826, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 247, 308, 502, 44, 44, 508, 508,
	-25, 508, 388, 1264, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 508, 385, 1355, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 382, 375, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 368, 859, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 233, 508, 755, -1000, -1000,
	-1000, -1000, -1000, -1000, 508, 508, 1321, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 113, 576, 364,
	871, -1000, -1000, -1000, -1000, -1000, 1582, 1582, -1000, 348,
	1460, -1000, -1000, -1000, -1000, -1000, -1000, 342, 1538, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 341, 197, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 508, 325, 868, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000, -1000,
	-1000, -1000, 164, 156, -1000, -1000, 148, -1000, -1000, 315,
	1582, -1000, 298, 88, -1000, -1000, -1000, -1000, -1000, 282,
	-1000, -1000, -1000, -1000, 765, -1000, -1000, 97, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 318, 97, 88, -1000, -1000,
	-1000, -1000, -1000, -1000, 643, 138, 131, -1000, -1000, 123,
	112, -1000, -1000, 101, 88, 54, 97, 97, 18, -1000,
	-1000, 88, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 968,
	18, -1000, -1000, 88, 88, -1000, -1000, 1264, -1000, -1000,
	-1000, 297, 291, -1000, -1000, -1000, -1000, -1000, -1000, 88,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	253, 282, -1000, -1000, -1000, -1000, -1000, 44, 649, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	240, 318, -1000, -1000, 508, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 220, 202, 109, 502, 44, 508, 508, 508,
	506, 573, -1000, -1000, 744, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	239, 968, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1207, -1000, -1000, -1000,
	-1000, -1000, 96, -1000, -1000, -1000, -1000, 88, -1000, 537,
	-1000, 274, -1000, 238, 92, 97, 18, 18, 18, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 682, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -8, 111, -1000, -1000,
	-1000, -1000, -1000, -1000, 502, 310, -1000, -1000, -1000, -1000,
	-1000, -1000, 502, -1000, -1000, -1000, -1000, 89, -1000, -1000,
	97, -1000, -1000, 97, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 15, 7, 56, 714, 922, 920, 416, 11, 916,
	913, 911, 573, 908, 907, 904, 52, 309, 0, 903,
	901, 103, 900, 899, 897, 896, 892, 702, 889, 877,
	876, 54, 873, 867, 50, 51, 865, 854, 49, 19,
	849, 844, 840, 85, 82, 77, 65, 63, 53, 69,
	47, 36, 31, 41, 837, 836, 834, 832, 830, 48,
	827, 825, 823, 822, 18, 821, 820, 819, 43, 818,
	817, 44, 815, 812, 811, 35, 26, 9, 22, 155,
	86, 94, 46, 28, 810, 809, 808, 17, 591, 807,
	806, 30, 10, 8, 805, 631, 803, 13, 796, 794,
	793, 14, 20, 792, 790, 29, 23, 784, 21, 783,
	782, 38, 780, 776, 775, 24, 772, 766, 759, 757,
	755, 752, 748, 4, 747, 745, 744, 5, 738, 736,
	734, 732, 16, 727, 726, 724, 33, 712, 711, 12,
	709, 706, 703, 701, 700, 45, 42, 32, 699, 697,
	696, 27, 695, 693, 692, 25, 687, 683, 679, 40,
	678, 674, 673, 39, 667, 37, 661, 659, 657, 67,
	653, 34, 649, 648, 644, 1, 642, 641, 636, 2,
	632,
}

var yyR1 = [...]uint8{
	0, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 28, 26, 29, 13, 13, 30, 30, 31,
	31, 31, 31, 32, 33, 33, 21, 34, 34, 34,
	34, 34, 34, 34, 19, 36, 37, 37, 38, 38,
	38, 38, 38, 38, 20, 20, 35, 39, 39, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 40, 40, 24, 24, 56,
	57, 57, 58, 58, 59, 59, 59, 59, 60, 60,
	61, 62, 62, 63, 63, 64, 64, 64, 64, 65,
	25, 66, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 70, 72, 73, 71, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 55, 55, 84,
	85, 85, 86, 86, 87, 87, 87, 87, 87, 49,
	49, 89, 90, 90, 91, 91, 91, 91, 91, 92,
	93, 88, 94, 95, 95, 96, 96, 97, 97, 97,
	97, 54, 54, 98, 99, 99, 100, 100, 101, 101,
	101, 101, 101, 101, 102, 50, 104, 104, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 103, 106, 107,
	41, 109, 110, 110, 111, 111, 111, 111, 111, 111,
	111, 3, 3, 78, 83, 83, 112, 113, 113, 114,
	114, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	116, 116, 121, 121, 121, 122, 122, 123, 123, 123,
	123, 123, 123, 124, 120, 17, 17, 17, 119, 44,
	125, 126, 126, 108, 108, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 128, 129, 53, 130, 130, 131,
	131, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 133, 48, 48,
	134, 134, 135, 135, 136, 136, 136, 136, 136, 136,
	136, 136, 138, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 137, 137, 140, 141, 141, 23,
	142, 143, 143, 144, 144, 145, 145, 145, 145, 145,
	145, 145, 146, 147, 51, 148, 149, 149, 150, 150,
	151, 151, 151, 151, 151, 151, 151, 52, 152, 153,
	153, 154, 154, 155, 155, 155, 155, 155, 42, 156,
	157, 157, 158, 158, 159, 159, 159, 159, 43, 160,
	161, 162, 162, 81, 81, 82, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 165,
	165, 164, 77, 47, 47, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 166, 166, 45, 168, 169, 170,
	170, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 80, 4, 4, 2,
	2, 1, 1, 79, 46, 172, 118, 118, 173, 174,
	174, 175, 175, 175, 175, 175, 176, 117, 117, 177,
	178, 178, 179, 179, 179, 179, 179, 180, 16, 18,
	14, 15, 22, 76, 8, 8, 7, 5, 5, 6,
	6,
}

var yyR2 = [...]int8{
	0, 3, 3, 3, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 4, 2, 2, 4, 1, 2, 1,
	1, 1, 1, 2, 1, 2, 3, 1, 3, 1,
	1, 1, 1, 1, 4, 2, 1, 2, 3, 1,
	1, 1, 1, 1, 2, 4, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	4, 2, 1, 2, 1, 1, 1, 2, 2, 2,
	1, 3, 2, 2, 2, 3, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 3,
	3, 3, 2, 2, 4, 1, 2, 1, 1, 1,
	1, 2, 4, 2, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 3, 4, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 4, 2,
	4, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 4, 2, 0, 1, 1,
	2, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	2, 4, 2, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 4, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 4,
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 4, 1, 1, 2, 4,
	2, 0, 1, 1, 2, 1, 1, 1, 1, 3,
	3, 1, 2, 2, 4, 2, 0, 1, 1, 2,
	1, 1, 1, 1, 3, 3, 1, 4, 2, 0,
	1, 1, 2, 1, 1, 1, 1, 1, 4, 2,
	0, 1, 1, 2, 1, 1, 1, 1, 4, 2,
	1, 1, 2, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 4, 2, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 3, 4, 2, 2, 4, 2, 1,
	2, 1, 1, 1, 1, 1, 3, 2, 4, 2,
	1, 2, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 0, 1, 1,
	2,
}

var yyChk = [...]int16{
	-1000, -9, -10, 25, 54, -11, -12, 11, -13, -14,
	-15, -16, -17, -18, -19, -20, -21, -22, -23, -24,
	-25, -26, -27, -29, 49, 50, 12, 72, 34, -32,
	-36, 15, 62, -142, -56, -66, -28, -41, -42, -43,
	-44, -45, -46, -47, -48, -49, -50, -51, -52, -53,
	-54, -55, -7, 13, 40, 41, 28, 64, 77, 92,
	-109, -156, -160, -125, -168, -172, -166, -133, -89, -103,
	-148, -152, -129, -98, -84, 7, 30, 31, 27, 26,
	32, 35, 43, 44, 21, 61, 38, 42, 29, 53,
	56, 58, 4, 4, 9, -12, -4, 5, 10, 8,
	-4, -4, -4, 73, 74, 75, -4, 8, 10, 8,
	-4, 5, 8, 10, 8, 8, 8, 5, 4, 4,
	4, 4, -4, 5, 8, 8, 8, 8, 8, 8,
	10, 8, 10, 8, 10, 8, 8, 8, 8, 8,
	10, 8, 10, 8, -5, -6, -3, -4, 6, 4,
	4, 4, 4, 4, 4, 4, 4, 4, -4, 4,
	4, 4, -4, 4, 4, 8, 8, -8, 55, 10,
	8, -30, -31, -16, -17, -18, -7, 10, 10, -8,
	10, 10, 10, 10, -33, -34, -21, 13, -16, -17,
	-18, -35, -7, 91, -37, -38, 13, -16, -17, -18,
	-35, -7, 10, 10, -143, -144, -145, -16, -17, -18,
	-88, -146, -147, -7, 59, 23, 24, -57, -58, -59,
	-60, -16, -17, -18, -61, 65, -67, -68, -16, -18,
	-69, -70, -72, -73, -7, 78, -21, -110, -111, -83,
	-76, -16, -17, -18, -78, -7, -112, 70, 16, 14,
	-157, -158, -159, -16, -17, -18, -27, -161, -162, -163,
	-16, -17, -18, -88, -95, -81, -82, -79, -80, -164,
	-77, -165, -27, -94, 36, 37, 20, 33, 19, 22,
	83, 60, -126, -108, -127, -16, -17, -18, -88, -95,
	-79, -80, -128, -27, 76, -169, -170, -171, -83, -16,
	-17, -18, -88, -49, -95, -76, -79, -165, -81, -82,
	-80, -78, -7, -169, -167, -16, -17, -18, -88, -49,
	-95, -79, -80, -7, -134, -135, -136, -16, -17, -18,
	-88, -95, -137, -53, -7, -138, 51, -90, -91, -16,
	-18, -92, -93, -7, 88, 87, -104, -105, -16, -17,
	-18, -106, -27, -88, -95, -80, -78, -107, 39, -149,
	-150, -151, -16, -17, -18, -88, -146, -147, -7, -153,
	-154, -155, -16, -17, -18, -88, -27, -130, -131, -132,
	-16, -17, -18, -88, -95, -43, -44, -45, -46, -47,
	-48, -50, -106, -51, -52, -7, -99, -100, -101, -16,
	-17, -18, -102, -88, -7, 57, -85, -86, -87, -16,
	-17, -18, -88, -7, -8, -3, 5, -7, 9, -31,
	-34, 9, 5, 5, -38, 9, 5, 9, -145, -39,
	-40, -27, -39, -4, 8, 8, 9, -59, 10, 8,
	5, 9, -68, -71, 8, -71, -71, 79, 81, 82,
	80, 9, 9, -111, 10, 8, 5, -4, 4, 9,
	-159, 9, -163, 10, 8, -2, 52, 6, 5, -2,
	-1, 47, 48, -1, -4, -4, 84, 85, -4, 9,
	-127, -4, 9, -171, 9, 9, 9, -136, 10, 8,
	-4, 9, -91, -4, -4, 9, -105, 8, 4, 9,
	-151, -39, -39, 9, -155, 9, -132, 9, -101, -4,
	9, -87, 9, 10, 10, 10, 9, -27, 9, -8,
	-62, -63, -64, -16, -17, -18, -65, 66, -74, -75,
	-76, -49, -77, -78, -79, -80, -81, -82, -83, -8,
	-113, -114, -115, -116, 45, -117, -118, -102, -119, -83,
	-120, -7, -121, -177, -173, 71, 86, 63, 17, 67,
	18, 89, -8, -8, -96, -97, -16, -17, -18, -7,
	10, 10, 10, 10, 10, -8, 10, -8, -8, -8,
	-140, -141, -139, -16, -17, -18, -88, -78, -79, -80,
	-49, -81, -82, -7, -8, -8, -108, 9, 9, -8,
	9, -64, -1, 9, -75, 9, -115, -4, 10, 8,
	10, 8, 10, 8, -2, -1, -4, -4, -4, 5,
	4, 9, -97, 9, -139, 9, 10, -8, -122, -123,
	-16, -18, -92, -93, -124, -7, 68, -178, -179, -16,
	-17, -18, -180, -7, 46, -174, -175, -16, -17, -18,
	-176, -7, 90, 10, -8, 9, -123, 69, 9, -179,
	-2, 9, -175, -2, 10, -8, -8,
}

var yyDef = [...]int16{
	0, -2, 0, 0, 0, 0, 4, 0, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1, 5, 0, 417, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 311, 77, 80, 0, 0, 24, 33, 45,
	310, 79, 101, 22, 0, 350, 0, 241, 0, 0,
	383, 0, 278, 280, 139, 0, 0, 326, 339, 257,
	161, 164, 127, 130, 0, 458, 459, 201, 202, 191,
	349, 359, 240, 397, 425, 394, 395, 277, 141, 187,
	325, 338, 255, 163, 129, 2, 3, 6, 0, 454,
	0, 0, 27, 29, 30, 31, 32, 450, 451, 448,
	235, 236, 237, 449, 0, 34, 37, 0, 39, 40,
	41, 42, 43, 0, 0, 46, 0, 49, 50, 51,
	52, 53, 36, 452, 0, 312, 313, 315, 316, 317,
	318, 57, 57, 321, 0, 0, 0, 0, 81, 82,
	84, 85, 86, 87, 0, 0, 0, 102, 104, 105,
	106, 0, 0, 0, 110, 0, 0, 0, 192, 194,
	195, 196, 197, 198, 199, 200, 0, 0, 0, 0,
	0, 351, 352, 354, 355, 356, 357, 0, 360, 361,
	366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
	376, 377, 378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 242, 243, 245, 246, 247, 248, 249,
	250, 251, 252, 253, 0, 0, 398, 399, 401, 402,
	403, 404, 405, 406, 407, 408, 409, 410, 411, 412,
	413, 414, 415, 0, 0, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 0, 281, 282, 284, 285, 286,
	287, 288, 289, 290, 291, 0, 0, 0, 142, 144,
	145, 146, 147, 148, 0, 0, 0, 176, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 0, 0, 0,
	327, 328, 330, 331, 332, 333, 57, 57, 336, 0,
	340, 341, 343, 344, 345, 346, 347, 0, 258, 259,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 0, 165, 166, 168,
	169, 170, 171, 172, 173, 0, 0, 131, 132, 134,
	135, 136, 137, 138, 456, 460, 418, 0, 26, 28,
	35, 44, 0, 0, 47, 55, 0, 309, 314, 0,
	58, 75, 0, 0, 322, 323, 78, 83, 88, 91,
	90, 100, 103, 107, 0, 108, 109, 0, 112, 113,
	114, 23, 190, 193, 204, 207, 0, 0, 206, 348,
	353, 358, 362, 153, 0, 0, 0, 419, 420, 0,
	0, 421, 422, 0, 0, 0, 0, 0, 152, 239,
	244, 0, 396, 400, 424, 384, 279, 283, 304, 0,
	292, 140, 143, 0, 0, 175, 177, 0, 189, 324,
	329, 0, 0, 337, 342, 256, 260, 162, 167, 0,
	128, 133, 455, 38, 56, 48, 319, 76, 320, 151,
	0, 92, 93, 95, 96, 97, 98, 0, 0, 116,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 111,
	0, 208, 209, 211, 0, 213, 214, 215, 216, 217,
	218, 219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 453, 203, 0, 155, 157, 158, 159, 160,
	363, 364, 365, 423, 416, 381, 382, 379, 380, 254,
	0, 306, 307, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 149, 150, 0, 334, 335, 174,
	89, 94, 0, 115, 117, 205, 210, 0, 220, 0,
	437, 0, 426, 0, 0, 0, 222, 223, 224, 439,
	428, 154, 156, 305, 308, 188, 99, 212, 0, 225,
	227, 228, 229, 230, 231, 232, 0, 0, 440, 442,
	443, 444, 445, 446, 0, 0, 429, 431, 432, 433,
	434, 435, 0, 238, 234, 221, 226, 0, 438, 441,
	0, 427, 430, 0, 233, 447, 436,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			l := yylex.(*lexer)
			if l.parent != nil {
				l.Error("expected submodule for include")
				goto ret1
			}
			yylex.(*lexer).stack.push(l.builder.Module(yyDollar[2].token, l.featureSet))
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			l := yylex.(*lexer)
			if l.parent == nil {
				// may want to allow this is parsing submodules on their own has value
				l.Error("submodule is for includes")
				goto ret1
			}
			// sub modules really just re-add parent module back onto stack and let all
			// children be added to that.
			l.stack.push(l.builder.Submodule(l.parent, yyDollar[2].token, l.featureSet))
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:212
		{
			l := yylex.(*lexer)
			l.builder.Namespace(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "namespace", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:237
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.BelongsTo(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:246
		{
			yylex.(*lexer).stack.pop()
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:251
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Revision(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:260
		{
			yylex.(*lexer).stack.pop()
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:263
		{
			yylex.(*lexer).stack.pop()
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:278
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Import(l.stack.peek(), yyDollar[2].token, l.loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:291
		{
			l := yylex.(*lexer)
			l.builder.Prefix(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:309
		{
			yylex.(*lexer).stack.pop()
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:314
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Include(l.stack.peek(), yyDollar[2].token, yylex.(*lexer).loader))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:335
		{
			yylex.(*lexer).stack.pop()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:338
		{
			yylex.(*lexer).stack.pop()
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:343
		{
			l := yylex.(*lexer)
			l.builder.SetRevisionDate(l.stack.peek(), yyDollar[2].token)
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:374
		{
			yylex.(*lexer).stack.pop()
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:377
		{
			yylex.(*lexer).stack.pop()
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:382
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:404
		{
			yylex.(*lexer).stack.pop()
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:407
		{
			yylex.(*lexer).stack.pop()
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:412
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ExtensionDefArg(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:434
		{
			l := yylex.(*lexer)
			l.builder.YinElement(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:443
		{
			yylex.(*lexer).stack.pop()
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:448
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Deviation(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:476
		{
			l := yylex.(*lexer)
			l.builder.NotSupported(l.stack.peek())
			if chkErr2(l, "not-supported", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:485
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ReplaceDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:494
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.DeleteDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:503
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.AddDeviate(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:512
		{
			yylex.(*lexer).stack.pop()
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:535
		{
			yylex.(*lexer).stack.pop()
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:538
		{
			yylex.(*lexer).stack.pop()
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:544
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Feature(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:567
		{
			yylex.(*lexer).stack.pop()
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:570
		{
			yylex.(*lexer).stack.pop()
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:575
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Must(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:594
		{
			l := yylex.(*lexer)
			l.builder.ErrorMessage(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-message", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:603
		{
			l := yylex.(*lexer)
			l.builder.ErrorAppTag(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "error-app-tag", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:613
		{
			l := yylex.(*lexer)
			l.builder.IfFeature(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "if-feature", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:622
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.When(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:631
		{
			yylex.(*lexer).stack.pop()
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:634
		{
			yylex.(*lexer).stack.pop()
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yylex.(*lexer).stack.pop()
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:651
		{
			yylex.(*lexer).stack.pop()
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:656
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Identity(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:680
		{
			l := yylex.(*lexer)
			l.builder.Base(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "base", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:689
		{
			yylex.(*lexer).stack.pop()
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:709
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Choice(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:718
		{
			yylex.(*lexer).stack.pop()
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:723
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Case(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:732
		{
			yylex.(*lexer).stack.pop()
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:737
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Typedef(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:758
		{
			yyVAL.token = yyDollar[1].token
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:762
		{
			l := yylex.(*lexer)
			l.builder.Default(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "default", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:771
		{
			yylex.(*lexer).stack.pop()
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:774
		{
			yylex.(*lexer).stack.pop()
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:779
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Type(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:796
		{
			l := yylex.(*lexer)
			l.builder.Path(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "path", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:812
		{
			yylex.(*lexer).stack.pop()
		}
	case 221:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:815
		{
			yylex.(*lexer).stack.pop()
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:820
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ValueRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:827
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LengthRange(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:834
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Pattern(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:854
		{
			l := yylex.(*lexer)
			l.builder.SetInverted(l.stack.peek())
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:860
		{
			l := yylex.(*lexer)
			l.builder.RequireInstance(l.stack.peek(), yyDollar[2].boolean)
			if chkErr2(l, "require-instance", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:874
		{
			l := yylex.(*lexer)
			l.builder.FractionDigits(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:883
		{
			yylex.(*lexer).stack.pop()
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:888
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Container(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:916
		{
			l := yylex.(*lexer)
			l.builder.Presence(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "presence", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:925
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Augment(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:934
		{
			yylex.(*lexer).stack.pop()
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:964
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Uses(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:973
		{
			yylex.(*lexer).stack.pop()
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:976
		{
			yylex.(*lexer).stack.pop()
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:998
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Refine(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1021
		{
			yylex.(*lexer).stack.pop()
		}
	case 305:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1024
		{
			yylex.(*lexer).stack.pop()
		}
	case 309:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1036
		{
			yylex.(*lexer).stack.pop()
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1041
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1061
		{
			yylex.(*lexer).stack.pop()
		}
	case 320:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1064
		{
			yylex.(*lexer).stack.pop()
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1070
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionInput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1079
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.ActionOutput(l.stack.peek()))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1091
		{
			yylex.(*lexer).stack.pop()
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1096
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Action(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1116
		{
			yylex.(*lexer).stack.pop()
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1119
		{
			yylex.(*lexer).stack.pop()
		}
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1128
		{
			yylex.(*lexer).stack.pop()
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1133
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Notification(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1157
		{
			yylex.(*lexer).stack.pop()
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1162
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Grouping(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 358:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1184
		{
			yylex.(*lexer).stack.pop()
		}
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1189
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.List(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1206
		{
			l := yylex.(*lexer)
			l.builder.MaxElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1213
		{
			l := yylex.(*lexer)
			l.builder.UnBounded(l.stack.peek(), true)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1222
		{
			l := yylex.(*lexer)
			l.builder.MinElements(l.stack.peek(), yyDollar[2].num32)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1247
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedBySystem)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1254
		{
			l := yylex.(*lexer)
			l.builder.OrderedBy(l.stack.peek(), meta.OrderedByUser)
			if chkErr2(l, "ordered-by", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1263
		{
			l := yylex.(*lexer)
			l.builder.Key(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "key", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1275
		{
			yylex.(*lexer).stack.pop()
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1278
		{
			yylex.(*lexer).stack.pop()
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1295
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1302
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Any(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1311
		{
			yylex.(*lexer).stack.pop()
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1316
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Leaf(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1352
		{
			l := yylex.(*lexer)
			l.builder.Mandatory(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1361
		{
			yyVAL.token = tokenString(yyDollar[1].token)
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1364
		{
			yyVAL.token = yyDollar[1].token + tokenString(yyDollar[3].token)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1369
		{
			n, err := strconv.ParseInt(yyDollar[1].token, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1377
		{
			s := trimQuotes(yyDollar[1].token)
			n, err := strconv.ParseInt(s, 10, 32)
			if err != nil || n < 0 {
				yylex.Error(fmt.Sprintf("not a valid number for min elements %s", yyDollar[1].token))
				goto ret1
			}
			yyVAL.num32 = int(n)
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1388
		{
			yyVAL.boolean = true
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1389
		{
			yyVAL.boolean = false
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1392
		{
			l := yylex.(*lexer)
			l.builder.Config(l.stack.peek(), yyDollar[2].boolean)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1404
		{
			yylex.(*lexer).stack.pop()
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1409
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.LeafList(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1418
		{
			yylex.(*lexer).stack.pop()
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1421
		{
			yylex.(*lexer).stack.pop()
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1426
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Bit(l.stack.peek(), yyDollar[2].token))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1445
		{
			l := yylex.(*lexer)
			l.builder.Position(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "position", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1454
		{
			yylex.(*lexer).stack.pop()
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1457
		{
			yylex.(*lexer).stack.pop()
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1462
		{
			l := yylex.(*lexer)
			l.stack.push(l.builder.Enum(l.stack.peek(), trimQuotes(yyDollar[2].token)))
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1481
		{
			l := yylex.(*lexer)
			l.builder.EnumValue(l.stack.peek(), yyDollar[2].num32)
			if chkErr2(l, "value", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1490
		{
			l := yylex.(*lexer)
			l.builder.Description(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "description", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1499
		{
			l := yylex.(*lexer)
			l.builder.Reference(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1508
		{
			l := yylex.(*lexer)
			l.builder.Contact(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1517
		{
			l := yylex.(*lexer)
			l.builder.Organization(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1526
		{
			l := yylex.(*lexer)
			l.builder.YangVersion(l.stack.peek(), yyDollar[2].token)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1535
		{
			l := yylex.(*lexer)
			l.builder.Units(l.stack.peek(), yyDollar[2].token)
			if chkErr2(l, "units", yyDollar[3].ext) {
				goto ret1
			}
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1544
		{
			yyVAL.ext = nil
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1547
		{
			yyVAL.ext = yyDollar[2].ext
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1552
		{
			l := yylex.(*lexer)
			yyVAL.ext = l.builder.Extension(yyDollar[1].token, yyDollar[2].args)
			if chkErr(yylex, l.builder.LastErr) {
				goto ret1
			}
			// ironcically keyword extensions have have primary extensions
			if yyDollar[3].ext != nil {
				l.builder.AddExtension(yyVAL.ext, "", yyDollar[3].ext)
			}
			l.builder.AddExtension(l.stack.peek(), "", yyVAL.ext)
		}
	case 457:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1566
		{
			yyVAL.args = []string{}
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1572
		{
			yyVAL.args = []string{yyDollar[1].token}
		}
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1575
		{
			yyVAL.args = append(yyDollar[1].args, yyDollar[2].token)
		}
	}
	goto yystack /* stack new state and value */
}
