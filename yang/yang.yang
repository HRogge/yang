module yang {
    namespace "http://schema.org/yang";
    prefix "schema";
    description "YANG definition of YANG";
    revision 0;

    container module {
        uses def-header;

        leaf namespace {
            type string;
        }
        leaf prefix {
            type string;
        }
        leaf contact {
            type string;
        }
        leaf organization {
            type string;
        }
        container revision {
            leaf rev-date {
                type string;
            }
            leaf description {
                type string;
            }
            leaf reference {
                type string;
            }
        }
        uses groupings-typedefs;
        uses containers-lists-leafs-uses-choice;
    }

    grouping def-header {
        leaf ident {
            type string;
        }
        leaf description {
            type string;
        }
        leaf reference {
            type string;
        }
    }

    grouping type {
        container type {
            leaf ident {
                type string;
            }
            leaf range {
                type string;
            }
            list enumeration {
				key "label";
				leaf label {
	                type string;
				}
				leaf value {
					type int32;
				}
            }
            leaf path {
                type string;
            }
            leaf minLength {
                type int32;
            }
            leaf maxLength {
                type int32;
            }
            leaf default {
                type string;
            }
            leaf format {
                description "type control format";
                config false;
                type enumeration {
                    enum binary {
                        value 1;
                    }
                    enum bits;
                    enum boolean;
                    enum decimal64;
                    enum empty;
                    enum enum;
                    enum identityRef;
                    enum instanceRef;
                    enum int8;
                    enum int16;
                    enum int32;
                    enum int64;
                    enum leafRef;
                    enum string;
                    enum uint8;
                    enum uint16;
                    enum uint32;
                    enum uint64;
                    enum union;
                    enum any;
                    enum binaryList {
                        value 1025;
                    }
                    enum bitsList;
                    enum booleanList;
                    enum decimal64List;
                    enum emptyList;
                    enum enumList;
                    enum identityRefList;
                    enum instanceRefList;
                    enum int8List;
                    enum int16List;
                    enum int32List;
                    enum int64List;
                    enum leafRefList;
                    enum stringList;
                    enum uint8List;
                    enum uint16List;
                    enum uint32List;
                    enum uint64List;
                    enum unionList;
                    enum anyList;
                }
            }
        }
    }

    grouping groupings-typedefs {
        list groupings {
            key "ident";
            uses def-header;

            /*
              !! CIRCULAR
            */
            uses groupings-typedefs;
            uses containers-lists-leafs-uses-choice;
        }
        list typedefs {
            key "ident";
            uses def-header;
            uses type;
        }
    }

    grouping has-details {
        leaf config {
            type boolean;
        }
        leaf mandatory {
            type boolean;
        }
    }

    grouping containers-lists-leafs-uses-choice {
        list definitions {
            key "ident";
            leaf ident {
            	type string;
            }
            choice body-stmt {
                case container {
                    container container {
                        uses def-header;
                        uses has-details;
                        uses groupings-typedefs;
                        uses containers-lists-leafs-uses-choice;
                        /*uses notifications; */
                    }
                }
                case list {
                    container list {
                        leaf-list key {
                            type string;
                        }
                        uses def-header;
                        uses has-details;
                        uses groupings-typedefs;
                        uses containers-lists-leafs-uses-choice;
                        /* uses notifications; */
                    }
                }
                case leaf {
                    container leaf {
                        uses def-header;
                        uses has-details;
                        uses type;
                    }
                }
                case anyxml {
                    container anyxml {
                        uses def-header;
                        uses has-details;
                        uses type;
                    }
                }
                case leaf-list {
                    container leaf-list {
                        uses def-header;
                        uses has-details;
                        uses type;
                    }
                }
                case uses {
                    container uses {
                        uses def-header;
                        /* need to expand this to use refine */
                    }
                }
                case choice {
                    container choice {
                        uses def-header;
                        list cases {
                            key "ident";
                            leaf ident {
                                type string;
                            }
                            /*
                             !! CIRCULAR
                            */
                            uses containers-lists-leafs-uses-choice;
                        }
                    }
                }
                case notification {
                    container notification {
                        uses def-header;
                        uses groupings-typedefs;
                        uses containers-lists-leafs-uses-choice;
                    }
                }
                case action {
                    container action {
                        uses def-header;
                        uses def-header;
                        container input {
                            uses groupings-typedefs;
                            uses containers-lists-leafs-uses-choice;
                        }
                        container output {
                            uses groupings-typedefs;
                            uses containers-lists-leafs-uses-choice;
                        }
                    }
                }
            }
        }
    }
}